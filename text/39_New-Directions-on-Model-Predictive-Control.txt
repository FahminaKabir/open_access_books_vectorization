New Directions on
Model Predictive
Control
Edited by

Jinfeng Liu and Helen E. Durand
Printed Edition of the Special Issue Published in Mathematics

www.mdpi.com/journal/mathematics

New Directions on Model
Predictive Control

New Directions on Model
Predictive Control

Special Issue Editors
Jinfeng Liu
Helen E. Durand

MDPI • Basel • Beijing • Wuhan • Barcelona • Belgrade

Special Issue Editors
Jinfeng Liu

Helen E. Durand

University of Alberta

Wayne State University

Canada

USA

Editorial Ofﬁce
MDPI
St. Alban-Anlage 66
4052 Basel, Switzerland

This is a reprint of articles from the Special Issue published online in the open access journal
Mathematics (ISSN 2227-7390) in 2018 (available at: https://www.mdpi.com/journal/mathematics/
special issues/New Directions Model Predictive Control)

For citation purposes, cite each article independently as indicated on the article page online and as
indicated below:
LastName, A.A.; LastName, B.B.; LastName, C.C. Article Title. Journal Name Year, Article Number,
Page Range.

ISBN 978-3-03897-420-8 (Pbk)
ISBN 978-3-03897-421-5 (PDF)

c 2019 by the authors. Articles in this book are Open Access and distributed under the Creative

Commons Attribution (CC BY) license, which allows users to download, copy and build upon
published articles, as long as the author and publisher are properly credited, which ensures maximum
dissemination and a wider impact of our publications.
The book as a whole is distributed by MDPI under the terms and conditions of the Creative Commons
license CC BY-NC-ND.

Contents
About the Special Issue Editors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . vii
Preface to ”New Directions on Model Predictive Control” . . . . . . . . . . . . . . . . . . . . . .

ix

Masoud Kheradmandi and Prashant Mhaskar
Data Driven Economic Model Predictive Control
Reprinted from: Mathematics 2018, 6, 51, doi:10.3390/math6040051. . . . . . . . . . . . . . . . . . . . 1
Xinan Zhang, Ruigang Wang and Jie Bao
A Novel Distributed Economic Model Predictive Control Approach for Building
Air-Conditioning Systems in Microgrids
Reprinted from: Mathematics 2018, 6, 60, doi:10.3390/math6040060 . . . . . . . . . . . . . . . . . . 18
Su Liu and Jinfeng Liu
Economic Model Predictive Control with Zone Tracking
Reprinted from: Mathematics 2018, 6, 65, doi:10.3390/math6050065 . . . . . . . . . . . . . . . . . . 39
Zhe Wu, Helen Durand and Panagiotis D. Christoﬁdes
Safeness Index-Based Economic Model Predictive Control of Stochastic Nonlinear Systems
Reprinted from: Mathematics 2018, 6, 69, doi:10.3390/math6050069 . . . . . . . . . . . . . . . . . . 58

Shan Gao, Yi Zheng and Shaoyuan Li
Enhancing Strong Neighbor-Based Optimization for Distributed Model Predictive
Control Systems
Reprinted from: Mathematics 2018, 6, 86, doi:10.3390/math6050086 . . . . . . . . . . . . . . . . . . 77
Yahui Tian, Xiaoli Luan, Fei Liu and Stevan Dubljevic
Model Predictive Control of Mineral Column Flotation Process
Reprinted from: Mathematics 2018, 6, 100, doi:10.3390/math6060100 . . . . . . . . . . . . . . . . . 97
Da Xue and Nael H. El-Farra
Forecast-Triggered Model Predictive Control of Constrained Nonlinear Processes with Control
Actuator Faults
Reprinted from: Mathematics 2018, 6, 104, doi:10.3390/math6060104 . . . . . . . . . . . . . . . . . 114

Harwinder Singh Sidhu, Prashanth Siddhamshetty and Joseph S. Kwon
Approximate Dynamic Programming Based Control of Proppant Concentration in
Hydraulic Fracturing
Reprinted from: Mathematics 2018, 6, 132, doi:10.3390/math6080132 . . . . . . . . . . . . . . . . . 134
Helen Durand
A Nonlinear Systems Framework for Cyberattack Prevention for Chemical Process
Control Systems
Reprinted from: Mathematics 2018, 6, 169, doi:10.3390/math6090169 . . . . . . . . . . . . . . . . . 153
Wee Chin Wong, Ewan Chee, Jiali Li and Xiaonan Wang
Recurrent Neural Network-Based Model Predictive Control for Continuous
Pharmaceutical Manufacturing
Reprinted from: Mathematics 2018, 6, 242, doi:10.3390/math6110242 . . . . . . . . . . . . . . . . . 197

v

About the Special Issue Editors
Jinfeng Liu, Associate Professor, received B.S. and M.S. degrees in Control Science and Engineering
in 2003 and 2006, respectively, both from Zhejiang University, as well as a Ph.D. degree in Chemical
Engineering from UCLA in 2011. In 2012, he joined the faculty of the Department of Chemical and
Materials Engineering, University of Alberta in Canada. Dr. Liu’s research interests include the
general areas of process control theory and practice, with an emphasis on model predictive control,
networked and distributed state estimation and control, and fault-tolerant process control and their
applications to chemical processes, biomedical systems, and water conservation in irrigation.
Helen E. Durand, Assistant Professor, received her B.S. in Chemical Engineering from UCLA,
and upon graduation joined the Materials and Processes Engineering Department as an
engineer at Aerojet Rocketdyne for two and a half years. She earned her M.S. in Chemical
Engineering from UCLA in 2014, and her Ph.D. in Chemical Engineering from UCLA in 2017.
She is currently an Assistant Professor in the Department of Chemical Engineering and Materials
Science at Wayne State University. Her research interests are in the general area of process systems
engineering with a focus on process control and process operational safety.

vii

Preface to ”New Directions on Model
Predictive Control”
Model predictive control (MPC) has been an important and successful advanced control
technology in various industries, mainly due to its ability to effectively handle complex systems with
hard control constraints. At each sampling time, MPC solves a constrained optimal control problem
online, based on the most recent state or output feedback to obtain a ﬁnite sequence of control
actions, and only applies the ﬁrst portion. MPC presents a very ﬂexible optimal control framework
that is capable of handling a wide range of industrial issues while incorporating state or output
feedback to aid in the robustness of the design.
Traditionally, centralized MPC with quadratic cost functions have dominated the focus of MPC
research. Advances in computing, communication, and sensing technologies in the last decades have
enabled us to look beyond the traditional MPC and have brought new challenges and opportunities
in MPC research. Two important examples of this technology-driven development are distributed
MPC (in which multiple local MPC controllers carry out their calculations in separate processors
collaboratively) and economic MPC (in which a general economic cost function that typically is not
quadratic is optimized). There are already many results focused on advances such as these in MPC.
However, there are also still many important problems that require investigation within and beyond
the developments to date. Along with the theoretical development in MPC, we are also witnessing
the application of MPC to many non-traditional control problems.
This book consists of a compilation of works covering a number of application domains, such as
hydraulic fracturing, continuous pharmaceutical manufacturing, and mineral column ﬂotation, in
addition to works covering theoretical and practical developments in topics such as economic and
distributed MPC. The purpose of this book is to assemble a collection of current research in MPC that
handles practically-motivated theoretical issues as well as recent MPC applications, with the aim of
highlighting the signiﬁcant potential beneﬁts of new MPC theory and design.
We would like to thank those who have contributed to this book. We would also like to thank the
many researchers and industrial practitioners who have contributed to the advancement of MPC
over the last several decades. We would like to thank those who performed reviews of the
manuscripts which comprise this book. The feedback of these reviewers and their time is invaluable.
We would like to thank Dr. Jean Wu for her great support as the Managing Editor throughout the
process of putting together the Special Issue for Mathematics, which this work represents. We would
also like to thank our colleagues at the University of Alberta and at Wayne State University for their
continuous support. Finally, our deepest gratitude is extended to our families and friends for
their constant encouragement and support. Without them, this work would never be possible.
Jinfeng Liu, Helen E. Durand
Special Issue Editors

ix

Article

Data Driven Economic Model Predictive Control
Masoud Kheradmandi and Prashant Mhaskar *
Department of Chemical Engineering, McMaster University, Hamilton, ON L8S 4L7, Canada;
kheradm@mcmaster.ca
* Correspondence: mhaskar@mcmaster.ca; Tel.: +1-905-525-9140-23273
Received: 7 March 2018; Accepted: 22 March 2018; Published: 2 April 2018

Abstract: This manuscript addresses the problem of data driven model based economic model
predictive control (MPC) design. To this end, ﬁrst, a data-driven Lyapunov-based MPC is designed,
and shown to be capable of stabilizing a system at an unstable equilibrium point. The data driven
Lyapunov-based MPC utilizes a linear time invariant (LTI) model cognizant of the fact that the training
data, owing to the unstable nature of the equilibrium point, has to be obtained from closed-loop
operation or experiments. Simulation results are ﬁrst presented demonstrating closed-loop stability
under the proposed data-driven Lyapunov-based MPC. The underlying data-driven model is then
utilized as the basis to design an economic MPC. The economic improvements yielded by the
proposed method are illustrated through simulations on a nonlinear chemical process system example.
Keywords: Lyapunov-based model predictive control (MPC); subspace-based identiﬁcation;
closed-loop identiﬁcation; model predictive control; economic model predictive control

1. Introduction
Control systems designed to manage chemical process operations often face numerous challenges
such as inherent nonlinearity, process constraints and uncertainty. Model predictive control (MPC)
is a well-established control method that can handle these challenges. In MPC, the control action is
computed by solving an open-loop optimal control problem at each sampling instance over a time
horizon, subject to the model that captures the dynamic response of the plant, and constraints [1].
In early MPC designs, the objective function was often utilized as a parameter to ensure closed-loop
stability. In subsequent contributions, Lyapunov-based MPC was proposed where feasibility and
stability from a well characterized region was built into the MPC [2,3].
With increasing recognition (and ability) of MPC designs to focus on economic objectives, the notion
of Economic MPC (EMPC) was developed for linear and nonlinear systems [4–6], and several important
issues (such as input rate-of-change constraint and uncertainty) addressed. The key idea with the EMPC
designs is the fact that the controller is directly given the economic objective to work with, and the
controller internally determines the process operation (including, if needed, a set point) [7].
Most of the existing MPC formulations, economic or otherwise, have been illustrated using
ﬁrst principles models. With growing availability of data, there exists the possibility of enhancing
MPC implementation for situations where a ﬁrst principles model may not be available, and simple
‘step-test’, transfer-function based model identiﬁcation approaches may not sufﬁce. One of the widely
utilized approaches in the general direction of model identiﬁcation are latent variable methods,
where the correlation between subsequent measurements is used to model and predict the process
evolution [8,9]. In one direction, Dynamic Mode Decomposition with control (DMDc) has been
utilized to extract low-order models from high-dimensional, complex systems [10,11]. In another
direction, subspace-based system identiﬁcation methods have been adapted for the purpose of
model identiﬁcation, where state-space model from measured data are identiﬁed using projection

Mathematics 2018, 6, 51; doi:10.3390/math6040051

1

www.mdpi.com/journal/mathematics

Mathematics 2018, 6, 51

methods [12–14]. To handle the resultant plant model mismatch with data-driven model based
approaches, monitoring of the model validity becomes especially important.
One approach to monitor the process is to focus on control performance [15], where the control
performance is monitored and compared against a benchmark control design. To focus more explicitly
on the model behavior, in a recent result [16], an adaptive data-driven MPC was proposed to evaluate
model prediction performance and trigger model identiﬁcation in case of poor model prediction.
In another direction, an EMPC using empirical model was proposed [17]. The approach relies
on a linearization approach, resulting in closed-loop stability guarantees for regions where the
plant-model mismatch is sufﬁciently small, and illustrate results on stabilization around nominally
stable equilibrium points. In summary, data driven MPC or EMPC approaches, which utilize
appropriate modeling techniques to identify data from closed-loop tests to handle operation around
nominally unstable equilibrium points, remain to be addressed.
Motivated by the above considerations, in this work, we address the problem of data driven
model based predictive control at an unstable equilibrium point. In order to identify a model
around an unstable equilibrium point, the system is perturbed under closed-loop operation.
Having identiﬁed a model, a Lyapunov-based MPC is designed to achieve local and practical
stability. The Lyapunov-based design is then used as the basis for a data driven Lyapunov-based
EMPC design to achieve economical goals while ensuring boundedness. The rest of the manuscript
is organized as follows: ﬁrst, the general mathematical description for the systems considered
in this work and a representative formulation for Lyapunov-based model predictive control
are presented. Then, the proposed approach for closed-loop model identiﬁcation is explained.
Subsequently, a Lyapunov-based MPC is designed and illustrated through a simulation example.
Finally, an economic MPC is designed to consider economical objectives. The efﬁcacy of the proposed
method is illustrated through implementation on a nonlinear continuous stirred-tank reactor (CSTR)
with input rate of change constraints. Finally, concluding remarks are presented.
2. Preliminaries
This section presents a brief description of the general class of processes that are considered in this
manuscript, followed by closed-loop subspace identiﬁcation and Lyapunov based MPC formulation.
2.1. System Description
We consider a multi-input multi-output (MIMO) controllable systems where u ∈ Rnu denotes the
vector of constrained manipulated variables, taking values in a nonempty convex subset U ⊂ Rnu ,


where U = u ∈ Rnu | umin ≤ u ≤ umax , umin ∈ Rnu and umax ∈ Rnu denote the lower and upper
bounds of the input variables, and y ∈ Rny denotes the vector of measured output variables. In keeping
with the discrete implementation of MPC, u is piecewise constant and deﬁned over an arbitrary
sampling instance k as:
u(t) = u(k ), kΔt ≤ t<(k + 1)Δt,
where Δt is the sampling time and xk and yk denote state and output at the kth sample time. The central
problem that the present manuscript addresses is that of designing a data driven modeling and control
design for economic MPC.
2.2. System Identiﬁcation
In this section, a brief review of a conventional subspace-based state space system identiﬁcation
methods is presented [16,18,19]. These methods are used to identify the system matrices for
a discrete-time linear time invariant (LTI) system of the following form:
xk+1 = Axk + Buk + wk ,

(1)

yk = Cxk + Duk + vk ,

(2)

2

Mathematics 2018, 6, 51

where x ∈ Rnx and y ∈ Rny denote the vectors of state variables and measured outputs, and w ∈ Rnx
and v ∈ Rny are zero mean, white vectors of process noise and measurement noise with the following
covariance matrices:
 



wi  T
Q S
wi v Tj ] =
δij ,
(3)
E[
vj
ST R
where Q ∈ Rnx ×nx , S ∈ Rnx ×ny and R ∈ Rny ×ny are covariance matrices, and δij is the Kronecker delta
function. The subspace-based system identiﬁcation techniques utilize Hankel matrices constructed by
stacking the output measurements and manipulated variables as follows:
⎡
U1|i

u
⎢ 1
⎢ u2
⎢
=⎢
⎣. . .
ui

u2
u3
...
u i +1

...
...
...
...

⎤
uj
⎥
u j +1 ⎥
⎥,
... ⎥
⎦
u i + j −1

(4)

where i is a user-speciﬁed parameter that limits the maximum order of the system (n), and, j is
determined by the number of sample times of data. By using Equation (4), the past and future Hankel
matrices for input and output are deﬁned:
U p = U1|i ,

U f = U1|i ,

Yp = Y1|i ,

Y f = Y1|i .

(5)

Similar block-Hankel matrices are made for process and measurement noises Vp , Vf ∈ Riny × j and
Wp , W f ∈ Rinx × j are deﬁned in the similar way. The state sequences are deﬁned as follows:


X p = x1 x2 . . . x j ,


X f = x i +1 x i +2 . . . x i + j .

(6)
(7)

Furthermore, these matrices are used in the algorithm:



Yp
Ψp =
,
Up




Yf
Ψf =
,
Uf



Ψ pr


Rf
=
.
Ψp

(8)

By recursive substitution into the state space model equations Equations (1) and (2), it is
straightforward to show:
Y f = Γi X f + Φid U f + Φis W f + Vf ,

(9)

Γi X p + Φid U p + Φis Wp + Vp ,
Ai X p + Δid U p + Δis Wp ,

(11)

Yp =
Xf =

(10)

where:
⎡

⎤
C
⎢
⎥
⎢ CA ⎥
⎢
⎥
2 ⎥
⎢
Γi = ⎢ CA ⎥ ,
⎢ . ⎥
⎢ .. ⎥
⎣
⎦
CAi−1

⎡
D
⎢
⎢ CB
⎢
Φid = ⎢
⎢ CAB
⎢ ...
⎣
CAi−2 B

3

0
D
CB
...
CAi−3 B

0
0
D
...
CAi−4 B

...
...
...
...
...

⎤
0
⎥
0⎥
⎥
0⎥
⎥,
. . .⎥
⎦
D

(12)

Mathematics 2018, 6, 51

⎡
0
0
0
⎢
⎢ C
0
0
⎢
Φis = ⎢
C
0
⎢ CA
⎢ ...
.
.
.
.
..
⎣
CAi−2 CAi−3 CAi−4

Δid = Ai−1 B Ai−2 B . . . AB

...
...
...
...
...


B ,

0
0
0
0
C

⎤
0
⎥
0⎥
⎥
0⎥
⎥,
0⎥
⎦
0

(13)


Δis = Ai−1

A i −2

...

A


I .

(14)

Equation (9) can be rewritten in the following form to have the input and output data at the left
hand side of the equation [20]:

I

−Φid

 
 Y
f
= Γi X f + Φis W f + Vf .
Uf

(15)

In open loop identiﬁcation methods, in the next step, by orthogonal projecting of Equation (15)
onto Ψ p :

I


−Φid Ψ f /Ψ p = Γi X f /Ψ p .

(16)

Note that, the last two terms in RHS of Equation (15) are eliminated since the noise terms are
independent, or othogonal to the future inputs. Equation (16) indicates that:
Column_Space(W f /Wp ) = Column_Space((Γi ⊥

T


I

 T
− Hid ) ).

(17)

Therefore, Γi and Hid can be calculated using Equation (17) by decomposition methods. These can
in turn be utilized to determine the system matrices (some of these details are deferred to Section 3.1).
For further discussion on system matrix extraction, the readers are referred to references [18,19].
2.3. Lyapunov-Based MPC
The Lyapunov-based MPC (LMPC) for linear system has the following form:
min

ũk ,...,ũk+ P

Ny

Nu

j =1

j =1

2
2
∑ ||ỹk+ j − ySP
k + j || Qy + ∑ || ũk + j − ũk + j−1 || Rdu ,

subject to:

(18)
(19)

x̃k+1 = A x̃k + Bũk ,

(20)

ỹk = C x̃k + D ũk ,

(21)

ũ ∈ U ,

Δũ ∈ U◦ ,

x̃ (k ) = x̂l ,

(22)

V ( x̃k+1 ) ≤ αV ( x̃k ) ∀ V ( x̃k ) > ∗ ,

(23)

V ( x̃k+1 ) ≤ ∗ ∀ V ( x̃k ) ≤ ∗ ,

(24)

where x̃k+ j , ỹk+ j , ySP
k + j and ũk + j denote predicted state and output, output set-point and calculated
manipulated input variables j time steps ahead computed at time step k, and x̂l is the current estimation
of state, and 0 < α < 1 is a user deﬁned parameter. The operator ||.||2Q denotes the weighted Euclidean
2 = x T Wx. Furthermore,
norm deﬁned for an arbitrary vector x and weighting matrix W as || x ||W
Qy > 0 and Rdu ≥ 0 denote the positive deﬁnite and positive semi-deﬁnite weighting matrices
for penalizing deviations in the output predictions and for the rate of change of the manipulated
inputs, respectively. Moreover, Ny and Nu denote the prediction and control horizons, respectively,
and the input rate of change, given by Δũk+ j = ũk+ j − ũk+ j−1 , takes values in a nonempty convex


subset U◦ ⊂ Rm , where U◦ = Δu ∈ Rnu | Δumin ≤ Δu ≤ Δumax . Note ﬁnally that, while the system

4

Mathematics 2018, 6, 51

dynamics are described in continuous time, the objective function and constraints are deﬁned in
discrete time to be consistent with the discrete implementation of the control action.
Equations (23) and (24) are representatives of Lyapunov-based stability constraint [21,22],
where V ( xk ) is a suitable control Lyapunov function, and α, ∗ > 0 are user-speciﬁed parameters.
In the presented formulation, ∗ > 0 enables practical stabilization to account for the discrete nature
of the control implementation.
Remark 1. Existing Lyapunov-based MPC approaches exploit the fact that the feasibility (and stability) region
can be pre-determined. The feasibility region, among other things, depends on the choice of the parameter α,
the requested decay factor in the value of the Lyapunov function at each time step. If (reasonably) good ﬁrst
principles models are available, then these features of the MPC formulation provide excellent conﬁdence over
the operating region under closed-loop. In contrast, in the presence of signiﬁcant plant-model mismatch (as is
possibly the case with data driven models), the imposition of such decay constraints could result in unnecessary
infeasibility issues. In designing the LMPC formulation with a data driven model, this possible lack of feasibility
must be accounted for (as is done in Section 3.2).
3. Integrating Lyapunov-Based MPC with Data Driven Models
In this section, we ﬁrst utilize an identiﬁcation approach necessary to identify good models for
operation around an unstable equilibrium point. The data driven Lyapunov-based MPC design is
presented next.
3.1. Closed-Loop Model Identiﬁcation
Note that, when interested in identifying the system around an unstable equilibrium point,
open-loop data would not sufﬁce. To begin with, nominal open-loop operation around an unstable
equilibrium point is not possible. If the nominal operation is under closed-loop, but the loop is
opened to perform step tests, the system would move to the stable equilibrium point corresponding
to the new input value, thereby not providing dynamic information around the desired operating
point. The training data, therefore, has to be obtained using closed-loop step tests, and an appropriate
closed-loop model identiﬁcation method employed. Such a method is described next.
In employing closed-loop data, note that the assumption of future inputs being independent
of future disturbances no longer holds, and, if not recognized, can cause biased results in system
identiﬁcation [18]. In order to handle this issue, the closed-loop identiﬁcation approach in the projection
utilizes a different variable Ψ pr instead of Ψ p . The new instrument variable, which satisﬁes the
independence requirement, is used to project both sides of Equation (15) and the result is used to
determine LTI model matrices. For further details, refer to [16,18,23].
By projecting Equation (15) onto Ψ pr we get:

I


−Φid Ψ f /Ψ pr = Γi X f /Ψ pr + Φis W f /Ψ pr + Vf /Ψ pr .

(25)

Since the future process and measurement noises are independent of the past input/output and
future setpoint in Equation (25), the noise terms cancel, resulting in:

I


−Φid Ψ f /Ψ pr = Γi X f /Ψ pr .

(26)

By multiplying Equation (26) by the extended orthogonal observability Γi⊥ , the state term
is eliminated:


(Γi⊥ ) T I −Φid Ψ f /Ψ pr = 0.
(27)

5

Mathematics 2018, 6, 51


Therefore, the column space of Ψ f /Ψ pr is orthogonal to the row space of (Γi⊥ ) T
By performing singular value decomposition (SVD) of Ψ f /Ψ pr :

 Σ
1
U2
0



Ψ f /Ψ pr = UΣV = U1

0
0




−(Γi⊥ ) T Φid .


V1 T
,
V2 T

(28)

where Σ1 contains dominant singular values of Ψ f /Ψ pr and, theoretically, it has the order nu i + n [18,23].
Therefore, the order of the system can be determined by the number of the dominant
The orthogonal column space of Ψ f /Ψ pr is U2 M,
singular values of the Ψ f /Ψ pr [20].

where M ∈ R(ny −n)i×(ny −n)i is any constant nonsingular matrix and is typically chosen as an identity
matrix [18,23]. One approach to determine the LTI model is as follows [18]:

( Γi⊥


−Γi⊥ Φid ) T = U2 M.

(29)

From Equation (29), Γi and Φid can be estimated:



Γi ⊥
= U2 ,
−(Φid ) T Γi ⊥

(30)

which results in (using MATLAB (2017a, MathWorks, Natick, MA, USA) matrix index notation):
⎧
⎨ Γ̂ = U (1 : ny i, :)⊥ ,
2
i
†
⎩ Φ̂d = −(U2 (1 : ny i, :) T ) U2 (ny i + 1 : end, :) T .
i

(31)

The past state sequence can be calculated as follows:

X̂i = Γ̂i† I


−Φ̂id Ψ f /Ψ pr .

(32)

The future state sequence can be calculated by changing data Hankel matrices as follows [18]:
R f = Ri+2|2i ,

(33)

U p = U1|i+1 ,

(34)

Yp = Y1|i+1 ,

(35)

U f = Ui+2|2i ,

(36)

Y f = Yi+2|2i ,


†
⇒ X̂i+1 = Γ̂i I − Ĥ id Ψ f /Ψ pr ,

(37)
(38)

where Γ̂i is obtained by eliminating the last ny rows of Γi , and H id is obtained by eliminating the last
ny rows and the last nu columns of Hid . Then, the model matrices can be estimated using least squares:


 
Xi + 1
A
=
Yi|i
C

B
D



 

Wi|i
Xi
+
.
Ui|i
Vi|i

(39)

Note that the difference between the proposed method in [18] and described method is that,
in order to ensure that the observer is stable (eigenvalues of A − KC are inside unit circle), instead

6

Mathematics 2018, 6, 51

of innovation form of LTI model, Equations (1) and (2) are used [16] to derive extended state space
equations. The system matrices can be calculated as follows:


Â
Ĉ


†
 
Xi + 1
Xi
B̂
=
.
Yi|i
Ui|i
D̂

(40)

With the proposed approach, process and measurement noise Hankel matrices can be calculated
as the residual of the least square solution of Equation (39):


 
 
Ŵi|i
Xi + 1
Â
=
−
Yi|i
Ĉ
V̂i|i

B̂
D̂




Xi
.
Ui|i

(41)

Then, the covariances of plant noises can be estimated as follows:


Q̂
Ŝ T




Ŵ 
Ŝ
= E( i|i ŴiT|i
R̂
V̂i|i


V̂iT|i ).

(42)

Model identiﬁcation using closed-loop data has a positive impact on the predictive capability of
the model (see the simulation section for a comparison with a model identiﬁed using open-loop data).
3.2. Control Design and Implementation
Having identified an LTI model for the system (with its associated states), the MPC implementation
first requires a determination of the state estimates. To this end, an appropriate state estimator needs to
be utilized. In the present manuscript, a Luenberger observer is utilized for the purpose of illustration.
Thus, at the time of control implementation, state estimates x̂k are generated as follows:
x̂k+1 = A x̂k + Buk + L(yk − C x̂k ),

(43)

where L is the observer gain and is computed using pole placement method, and yk is the vector of
measured variables (in deviation form, from the set point).
In order to stabilize the system at an unstable equilibrium point, a Lyapunov-based MPC is
designed. The control calculation is achieved using a two-tier approach (to decouple the problem of
stability enforcement and objective function tuning). The ﬁrst layer calculates the minimum value of
Lyapunov function that can be reached subject to the constraints. This tier is formulated as follows:
Vmin = min(V ( x̃k+1 )),
ũ1k

subject to:
(44)

x̃k+1 = A x̃k + Bũ1k ,
ỹk = C x̃k +
ũ1 ∈ U ,

D ũ1k ,
1

Δũ ∈ U◦ ,

x̃ (k ) = x̂l − x SP ,

where x̃, ỹ are predicted state and output and ũ1 is the candidate input computed in the ﬁrst tier. x SP is
underlying state setpoint (in deviation form from the nominal equilibrium point), which here is the
desired unstable equilibrium point (and therefore zero in terms of deviation variables). For setpoint
tracking, this value can be calculated using the target calculation method; readers are referred to [24]
for further details.

7

Mathematics 2018, 6, 51

Note that the ﬁrst tier has a prediction horizon of 1 because the objective is to only compute the
immediate control action that would minimize the value of the Lyapunov function at the next time
step. V is chosen as a quadratic Lyapunov function with the following form:
V ( x̃ ) = x̃ T P x̃,

(45)

where P is a positive deﬁnite matrix computed by solving the Riccati equation with the LTI model
matrices as follows:
A T PA − P − A T PB( B T PB + R)−1 + Q = 0,

(46)

where Q ∈ Rnx ×nx and R ∈ Rnu ×nu are positive deﬁnite matrices. Then, in the second tier,
this minimum value is used as a constraint (upper bound for Lyapunov function value at the next
time step). The second tier is formulated as follows:
Ny

min

ũ2k ,...,ũ2k+ N
p

2
2
2
2
∑ ||ỹk+ j − ỹSP
k + j || Qy + || ũk + j − ũk+ j−1 || Rdu ,

j =1

subject to:
x̃k+1 = A x̃k + Bũk ,

(47)

ỹk = C x̃k + D ũk ,
ũ2 ∈ U ,

Δũ2 ∈ U◦ ,

x̃ (k ) = x̂l ,

V ( x̃k+1 ) ≤ Vmin ∀ V ( x̃k ) > ∗ ,
V ( x̃k+1 ) ≤ ∗ ∀ V ( x̃k ) ≤ ∗
where Np is the prediction horizon and ũ2 denotes the control action computed by the second tier.
In essence, in the second tier, the controller calculates a control action sequence that can take the
process to the setpoint in an optimal fashion optimally while ensuring that the system reaches the
minimum achievable Lyapunov function value at the next time step. Note that, in both of the tiers,
the input sequence is a decision variable in the optimization problem, but only the ﬁrst value of
the input sequence of the second tier is implemented on the process. The solution of the ﬁrst tier,
however, is used to ensure and generate a feasible initial guess for the second tier. The two-tiered
control structure is schematically presented in Figure 1.

Setpoint

Tier I
(Lyapunov
Value)

Vmin

Tier II
(MPC)

Input

Estimated
State

Plant

Output

State
Estimator

Figure 1. Two-tier control strategy.

Remark 2. Note that Tiers 1 and 2 are executed in series and at the same time, and the implementation does
not require a time scale separation. The overall optimization is split into two tiers to guarantee feasibility of
the optimization problem. In particular, the ﬁrst tier computes an input move with the objective function only
focusing on minimizing the Lyapunov function value at the next time step. Notice that the constraints in the ﬁrst
tier are such that the optimization problem is guaranteed to be feasible. With this feasible solution, the second
tier is used to determine the input trajectory that achieves the best performance, while requiring the Lyapunov
8

Mathematics 2018, 6, 51

function to decay. Again, since the second tier optimization problem uses the solution from Tier 1 to impose the
stability constraint, feasibility of the second tier optimization problem, and, hence, of the MPC optimization
problem, is guaranteed. In contrast, if one were to require the Lyapunov function to decay by an arbitrary chosen
factor, determination of that factor in a way that guarantees feasibility of the optimization problem would be
a non-trivial task.
Remark 3. It is important to recognize that, in the present formulation, feasibility of the optimization problem
does not guarantee closed-loop stability. A superﬂuous (and incorrect) reason is as follows: the ﬁrst tier computes
the control action that minimizes the value of the Lyapunov function at the next step, but does not require that
it be smaller than the previous time step, leading to potential destabilizing control action. The key point to
realize here, however, is that if such a control action were to exist (that would lower the value of the Lyapunov
function at the next time step), the optimization problem would determine that value by virtue of the Lyapunov
function being the objective function, and lead to closed-loop stability. The reasons closed-loop stability may
not be achieved are two: (1) the current state might be such that closed-loop stability is not achievable for the
system dynamics and constraints; and (2) due to plant model mismatch, where the control action that causes
the Lyapunov function to decay for the identiﬁed model does not do so for the system in question. The ﬁrst
reason points to a fundamental limitation due to the presence of input constraints, while the second is due to the
lack of availability of the ‘correct’ system dynamics, and as such will be true in general for data driven MPC
formulations. Note that inclusion of a noise/plant model mismatch term in the model may help with the predictive
capability of the model, however, unless a bound on the uncertainty can be assumed, closed-loop stability can not
be guaranteed.
Remark 4. Along similar lines, consider the scenario where, based on the model, and constraints, an input
value exists for which V ( x (k)) <= V ( x (k − 1)) is achievable. It can be readily shown that any solution
computed by the ﬁrst tier of the optimization problem would also result in V ( x (k)) <= V ( x (k − 1)) by virtue
of the objective function being the Lyapunov function at the next time step. Thus, in such a case, the explicit
incorporation of the constraint V ( x (k)) <= V ( x (k − 1)) (as is traditionally done in Lyapunov based MPC)
does not help, and is not required. On the other hand, for the scenario where such an input does not exist,
the inclusion of the constraint will cause the optimization problem to be infeasible. In contrast, in the proposed
formulation, the MPC will compute a control action where the value of the Lyapunov function might be greater
than the previous value, but greater by the smallest margin possible. The real impact of this phenomenon is
in making the MPC formulation more pliable, especially when dealing with plant-model mismatch. In such
scenarios, the proposed MPC continues to compute feasible (best possible, in terms of stabilizing behavior)
solutions, and, should the process move into a region from where stabilization is possible, smoothly transits to
computing stabilizing control action.
Remark 5. In the current manuscript, we focus on the cases where a ﬁrst principal model is not available.
If a good ﬁrst principles model was available, it could be utilized directly in a nonlinear MPC design, or linearized
if one were to implement a linear MPC. In the case of linearization, the applicability would be limited by the
region over which the linearization holds. In contrast, note that the model utilized in the present manuscript
does not result from a linearization of a nonlinear model. Instead, it is a linear model, possibly with a higher
number of states than the original nonlinear model, albeit identiﬁed, and applicable, over a ‘larger’ region of
operation, compared to a linearized model.
Remark 6. To account for possible plant-model mismatch, model validity can be monitored with model
monitoring methods [16], resulting in appropriately triggering re-identiﬁcation in case of poor model prediction.
In another direction, in line with control performance monitoring approaches, the Lyapunov function value
could be utilized. Thus, unacceptable increases in Lyapunov function value could be utilized as a means of
triggering re-identiﬁcation.

9

Mathematics 2018, 6, 51

Remark 7. As mentioned previously, in order to create rich training data around unstable operating points,
closed-loop data must be generated. In turn, since open-loop methods result in biased estimation [25,26] in
model identiﬁcation, a suitable closed-loop identiﬁcation method is utilized, and adapted to ensure that the model
accurately captures the key dynamics.
4. Simulation Results
We next illustrate the proposed approach using a nonlinear CSTR example [27]. To this end,
k

consider a CSTR where a ﬁrst-order, exothermic and irreversible reaction of the form A −
→ B takes
place. The mass and energy conservation laws results in the following mathematical model:
−E
F
(C − C A ) − k0 e RTR C A ,
V A0
−E
F
Q
(−ΔH )
k0 e RTR C A +
.
ṪR = ( TA0 − TR ) +
V
ρc p
ρc p V

Ċ A =

(48)

The description of the process variables and the values of the system parameters are presented in
Table 1. The control objective is to stabilize the system at an unstable equilibrium point using inlet
concentration, C A0 , and the rate of heat input, Q, while the manipulated inputs are constrained to be
within the limits |C A0 | ≤ 1 kmol/m3 and | Q| ≤ 9 × 103 KJ/min, and the input rate is constrained as
|ΔC A0 | ≤ 0.1 Kmol/m3 and |ΔQ| ≤ 9 × 200 KJ/min. We assume that both of the states are measured.
The system has an unstable equilibrium point at C A = 0.573 Kmol/m3 and T = 395.3 K. The goal is
to stabilize the system at this equilibrium point. To this end, ﬁrst an LTI model is identiﬁed using
closed-loop data; then, an MPC is designed to stabilize the system at the unstable equilibrium point.
Table 1. Variable and parameter description and values for the continuous stirred-tank reactor
(CSTR) example.
Variable
C A,S
TR,S
F
V
C A0,S
k0
E
R
TA0
ΔH
ρ
cp

Description

Unit

Value

Nominal Value of Concentration
Nominal Value of Reactor Temperature
Flow Rate
Volume of the Reactor
Nominal Inlet Concentration
Pre-Exponential Constant
Activation Energy
Ideal Gas Constant
Inlet Temperature
Enthalpy of the Reaction
Fluid Density

kmol
m3

0.573
395
0.2
0.2
0.787
72 × 109
8.314 × 104
8.314
352.6
4.78 × 104
103

Heat Capacity

K

m3
min
m3
min
kmol
m3

−

kJ
mol
kJ
KmolK

K

kJ
Kmol
kg
m3
kj
kg.K

0.239

For system identiﬁcation of the CSTR model, proportional–integral (PI) controllers (pairing C A
with C A,in and T with Q) are implemented in the process. In particular, pseudo-random binary signals
are used as set-points for PI controllers. The identiﬁed LTI model order is selected as n = 4 and i = 12,
in order to achieve the best ﬁt in model prediction (using cross-validation). Note that these four states
are the states of the identiﬁed LTI model. When dealing with setpoint tracking, these states can be
augmented with additional states and utilized as part of an offset-free MPC design. Model validation
results under a different set of set-point changes from training data
 are presented in Figures 2 and 3.
The identiﬁed system is unstable with absolute eigenvalues

10

0.9311

0.9311 0.9998 1.0002 ,

Mathematics 2018, 6, 51

which has an eigenvalue outside unit circle. The unstable nature of the identiﬁed model is consistent
with the operation of the system around the unstable equilibrium point.

Figure 2. Data driven model validation results: measured outputs (dash-dotted line), state and output
estimates using the (linear time invariant) LTI model model from closed-loop data and identiﬁcation
(dashed line), state and output estimates using the LTI model from open-loop data and identiﬁcation
(dotted line), observer stopping point (vertical dashed line).

CA,in(kmol/m3)

1
0.8
0.6
0.4
0.2

0.4

0.6

0.8

1

1.2

1.4

1

1.2

1.4

Time(min)

Q(kJ/min)

4000
2000
0
-2000
0.2

0.4

0.6

0.8

Time(min)

Figure 3. Model validation data: manipulated inputs under a proportional–integral (PI) controller.

For the model validation, initially, a steady state Kalman ﬁlter (gain calculated by the identiﬁcation
method) is utilized to update state estimate until t = 0.8 min and after convergence of the states
(gaged via convergence of the outputs), the model and the input trajectory (without the state
estimator) are used to predict the future output. Figure 2 illustrates the results of the model validation,
and compares against a model obtained from open-loop step pseudo-random binary sequence (PRBS)
on the input. As expected, the model identiﬁed using closed-loop data predicts better.
Next, closed-loop simulation results for proposed controller and conventional MPC
(i.e., MPC without Lyapunov constraint) with horizons 1 and 10 are presented in Figures 4–7.
The controllers parameters are presented in Table 2. As can be seen, the LMPC has the best performance
in stabilizing the system at the unstable equilibrium point. The MPC with a horizon of 1 is not capable
of stabilizing the system, and the controller with a horizon of 10 reaches the set-point later compared
to the LMPC. In addition, the evolution of the subspace states indicates better performance under the
proposed LMPC.

11

Mathematics 2018, 6, 51

CA (kmol/m3)

0.65
0.6
0.55
0.5
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.5

0.6

0.7

Time(min)

T(K)

420

400

380
0

0.1

0.2

0.3

0.4

Time(min)

Figure 4. Closed-loop profiles of the measured variables obtained from the proposed Lyapunov-based
MPC (continuous line), MPC with horizon 1 (dash-dotted line), MPC with horizon 10 (dashed line),
and MPC with horizon 1 and open-loop identification (narrow dash-dotted line) and set-point
(dashed line).

Figure 5. Closed-loop profiles of the manipulated variables obtained from the proposed LMPC
(continuous line), MPC with horizon 1 (dash-dotted line), MPC with horizon 1 and open-loop
identification (narrow dash-dotted line) and MPC with horizon 10 (dashed line).

0

5

xLMPC,4

0

2

xLMPC,3

10

xLMPC,2

xLMPC,1

0.5

0

0

-5
-0.5

-10
0.4

0.6

-2
0

Time(min)

0.6

0

0

-20
0

0.2

0.4

0.6

0

0.2

0.4

0.2

0.4

Time(min)

0.6

0.4

0.6

0

-5
0

0.2

0.4

0.6

0

Time(min)

0.2

0.4

0.6

Time(min)

10

0

-10
0

0.2

Time(min)

0

0.6

xMPC,h=10,3

xMPC,h=10,2

-1

0
5

Time(min)
10

0

0.6

-20

Time(min)
1

0.4

20

xMPC,h=1,3

0

-1

0.2

Time(min)

20

xMPC,h=1,2

xMPC,h=1,1

0.4

Time(min)

1

xMPC,h=10,1

0.2

xMPC,h=1,4

0.2

xMPC,h=10,4

0

0

0

-10
0

0.2

0.4

0.6

0

Time(min)

0.2

0.4

Time(min)

0.6

0

0.2

0.4

0.6

Time(min)

Figure 6. Closed-loop proﬁles of the LTI model states obtained from the proposed LMPC
(continuous line), MPC with horizon 1 (dash-dotted line) and MPC with horizon 10 (dashed line).

12

Mathematics 2018, 6, 51

10

10

5

9
8
7

V(x)

6
5
4
3
2
1
0
0

0.1

0.2

0.3

0.4

0.5

0.6

Time(min)

Figure 7. Closed-loop Lyapunov function proﬁles obtained from the proposed LMPC (continuous line),
MPC with horizon 1 (dash-dotted line) and MPC with horizon 10 (dashed line).
Table 2. List of controllers parameters for the CSTR reactor.
Variable
Δt
Qx
Q x,MPC
RΔu,MPC
QK
RK
τmin
τmax
εi

Value
0.2 min


1 0
0 1
10 × diag([1/C A,s , 1/TR,S ])
diag([1/C A0,max , 1/Qmax ])
diag([103 , 103 ])
diag([10−3 , 10−3 ])
0
5
−3
 10 × xi,Sp 

−0.1

0.1

Δumin
Δumax

∗
V (x)

−200


200

1
( x − xsp ) T ( x − xsp )

T
108 0

T
0 0.1
7.83 × 105

cy
cu
ρ

5. Data-Driven EMPC Design and Illustration
Having illustrated the ability of the LMPC to achieve stabilization, it is next utilized to achieve
economical objectives while ensuring stability. The Lyapunov based EMPC formulation is as follows:
Ny

∑ cyT ỹk+ j − cuT ũk+ j ,
ũk ,...,ũk+ P
max

j =1

subject to:
(49)

x̃k+1 = A x̃k + Bũk ,
ỹk = C x̃k + D ũk ,
ũ ∈ U ,

Δũ ∈ U◦ ,

x̃ (k ) = x̂l ,

V ( x̃k+ j ) ≤ ρ for j = 1, . . . , P,
13

Mathematics 2018, 6, 51

where the value of ρ dictates the neighborhood that the process states are allowed to evolve within.
cy and cu indicate output and input cost vectors. Other variables have the same deﬁnition as
Equation (47).
Remark 8. In recent contributions [17,28], a Lyapunov-Based EMPC is proposed that utilizes data-driven
methods to identify an empirical model for the system where the number of empirical model states is equal to the
order of the plant model. In contrast, in the present work, the order of the model is selected based on the ability of
the model to ﬁt and predict dynamic behavior over a suitable range of operation, in turn allowing for an EMPC
design that can reliably operate over a larger region.
Remark 9. The EMPC formulation in the present manuscript utilizes a linear form of the cost function for the
purpose of illustration. The proposed approach is not limited by this particular choice. Any other form of the cost
function, including those where the costs could be time dependent, could be readily utilized within the proposed
formulation. In such scenarios, the presence of the stability constraints provide the safeguards that allow the
EMPC to move the process as needed to achieve economical goals.
Remark 10. The use of linear models in the control design opens up the possibility of utilizing MPC
formulations [3,29] that enable stabilization from the entire null controllable region (the region from which
stabilization is achievable subject to input constraints). The use of the NCR can, in turn, be utilized to maximize
the region over which the EMPC can be implemented, thereby maximizing the potential economic beneﬁt.
Such an implementation, however, needs to account for potential plant model mismatch owing to the use of the
linear model, and remains the subject of future work.
Next, the proposed Lyapunov-based EMPC (LEMPC) is implemented on the CSTR simulation
example and compared to the LMPC implementation. The closed-loop results are presented in
Figures 8–11. Exploiting the ﬂexibility of operation within a neighborhood of the origin, the LEMPC
drives the system to a point on the border of that neighborhood, which happens to be the optimal
operating point, instead of the nominal operating point. Figure 12 shows the comparison of the
LEMPC and LMPC. As expected, the LEMPC achieves improved economic returns compared to the
conventional MPC.

CA (kmol/m3)

0.9
0.8
0.7
0.6
0.5
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.4

0.5

0.6

0.7

Time(min)

396

T(K)

394
392
390
388
0

0.1

0.2

0.3

Time(min)

Figure 8. Closed-loop proﬁles of the measured variables obtained from the proposed Lyapunov-based
economic MPC (continuous line) and the nominal equilibrium point (dashed line).

14

Mathematics 2018, 6, 51

CA,in(kmol/m3)

2
1.5
1
0.5
0
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.4

0.5

0.6

0.7

Time(min)

4000

Q(kJ/min)

2000
0
-2000
-4000
-6000
0

0.1

0.2

0.3

Time(min)

xLEMPC,1

Figure 9. Closed-loop proﬁles of the manipulated variables obtained from the proposed LEMPC
(continuous line).
2
1
0
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.4

0.5

0.6

0.7

0.4

0.5

0.6

0.7

0.4

0.5

0.6

0.7

xLEMPC,2

Time(min)
20
0
-20
0

0.1

0.2

0.3

xLEMPC,3

Time(min)
20
0
-20
0

0.1

0.2

0.3

xLEMPC,4

Time(min)
5
0
-5
0

0.1

0.2

0.3

Time(min)

Figure 10. Closed-loop proﬁles of the identiﬁed model states obtained from the proposed LEMPC
(continuous line).
105

8

7

6

VLEMPC(x)

5

4

3

2

1

0
0

0.1

0.2

0.3

0.4

0.5

0.6

Time(min)

Figure 11. Closed-loop Lyapunov function profiles obtained from the proposed LEMPC (continuous line).
Note that the LEMPC drives the system to a point within the acceptable neighborhood of the origin.

15

Mathematics 2018, 6, 51

7

9

x 10

Economic Objective

8.5
8
7.5
7
6.5
6
5.5
0

0.1

0.2

0.3

0.4

0.5

0.6

Time(min)

Figure 12. A comparison of the economic cost between the LEMPC (continuous line) and LMPC (dotted line).

6. Conclusions
In this study, a novel data-driven MPC is developed that enables stabilization at nominally
unstable equilibrium points. This LMPC is then utilized within an economic MPC formulation to
yield a data driven EMPC formulation. The proposed approach is described and compared against
a representative MPC, and shown to be able to provide improved closed-loop performance.
Acknowledgments: Financial support from the McMaster Advanced Control Consortium (MACC) is
gratefully acknowledged.
Author Contributions: Masoud Kheradmandi as the lead author was the primary contributor, contributed
to conceiving and designing of the framework, performed all the simulations and wrote the ﬁrst draft of the
manuscript, and made susbequent revisions. The advisor Prashant Mhaskar contributed to conceiving and
designing of the framework, analyzing the data and revising the paper.
Conﬂicts of Interest: The authors declare no conﬂict of interest.

References
1. Rawlings, J.B.; Mayne, D.Q. Model Predictive Control: Theory and Design; Nob Hill Publishing:
Madison, Wisconsin, 2009.
2. Mhaskar, P.; El-Farra, N.H.; Christoﬁdes, P.D. Predictive control of switched nonlinear systems with
scheduled mode transitions. IEEE Trans. Autom. Control 2005, 50, 1670–1680.
3. Mahmood, M.; Mhaskar, P. Constrained control Lyapunov function based model predictive control design.
Int. J. Robust Nonlinear Control 2014, 24, 374–388.
4. Angeli, D.; Amrit, R.; Rawlings, J.B. On average performance and stability of economic model predictive
control. IEEE Trans. Autom. Control 2012, 57, 1615–1626.
5. Bayer, F.A.; Lorenzen, M.; Müller, M.A.; Allgöwer, F. Improving Performance in Robust Economic MPC
Using Stochastic Information. IFAC-PapersOnLine 2015, 48, 410–415.
6. Liu, S.; Liu, J. Economic model predictive control with extended horizon. Automatica 2016, 73, 180–192.
7. Müller, M.A.; Angeli, D.; Allgöwer, F. Economic model predictive control with self-tuning terminal cost.
Eur. J. Control 2013, 19, 408–416.
8. Golshan, M.; MacGregor, J.F.; Bruwer, M.J.; Mhaskar, P. Latent Variable Model Predictive Control (LV-MPC)
for trajectory tracking in batch processes. J. Process Control 2010, 20, 538–550.
9. MacGregor, J.; Bruwer, M.; Miletic, I.; Cardin, M.; Liu, Z. Latent variable models and big data in the process
industries. IFAC-PapersOnLine 2015, 48, 520–524.
10. Narasingam, A.; Siddhamshetty, P.; Kwon, J.S.I. Handling Spatial Heterogeneity in Reservoir Parameters
Using Proper Orthogonal Decomposition Based Ensemble Kalman Filter for Model-Based Feedback Control
of Hydraulic Fracturing. Ind. Eng. Chem. Res. 2018, doi:10.1021/acs.iecr.7b04927.

16

Mathematics 2018, 6, 51

11. Narasingam, A.; Kwon, J.S.I. Development of local dynamic mode decomposition with control: Application
to model predictive control of hydraulic fracturing. Comput. Chem. Eng. 2017, 106, 501–511.
12. Huang, B.; Kadali, R. Dynamic Modeling, Predictive Control and Performance Monitoring: A Data-Driven Subspace
Approach; Springer; Berlin/Heidelberg, Germany, 2008.
13. Li, W.; Han, Z.; Shah, S.L. Subspace identiﬁcation for FDI in systems with non-uniformly sampled multirate
data. Automatica 2006, 42, 619–627.
14. Hajizadeh, I.; Rashid, M.; Turksoy, K.; Samadi, S.; Feng, J.; Sevil, M.; Hobbs, N.; Lazaro, C.; Maloney, Z.;
Littlejohn, E.; et al. Multivariable Recursive Subspace Identiﬁcation with Application to Artiﬁcial Pancreas
Systems. IFAC-PapersOnLine 2017, 50, 886–891.
15. Shah, S.L.; Patwardhan, R.; Huang, B. Multivariate controller performance analysis: methods, applications
and challenges. In AICHE Symposium Series; American Institute of Chemical Engineers: New York, NY, USA,
1998; Volume 2002, pp. 190–207.
16. Kheradmandi, M.; Mhaskar, P.
Model predictive control with closed-loop re-identiﬁcation.
Comput. Chem. Eng. 2017, 109, 249–260.
17. Alanqar, A.; Ellis, M.; Christoﬁdes, P.D. Economic model predictive control of nonlinear process systems
using empirical models. AIChE J. 2015, 61, 816–830.
18. Huang, B.; Ding, S.X.; Qin, S.J. Closed-loop subspace identiﬁcation: An orthogonal projection approach.
J. Process Control 2005, 15, 53–66.
19. Qin, S.J. An overview of subspace identiﬁcation. Comput. Chem. Eng. 2006, 30, 1502–1513.
20. Wang, J.; Qin, S.J. A new subspace identiﬁcation approach based on principal component analysis.
J. Process Control 2002, 12, 841–855.
21. Mhaskar, P.; El-Farra, N.H.; Christoﬁdes, P.D. Stabilization of nonlinear systems with state and control
constraints using Lyapunov-based predictive control. Syst. Control Lett. 2006, 55, 650–659.
22. Mayne, D.Q.; Rawlings, J.B.; Rao, C.V.; Scokaert, P.O. Constrained model predictive control: Stability and
optimality. Automatica 2000, 36, 789–814.
23. Qin, S.J.; Ljung, L. Closed-loop subspace identiﬁcation with innovation estimation. IFAC Proc. Vol. 2003, 36,
861–866.
24. Pannocchia, G.; Rawlings, J.B. Disturbance models for offset-free model-predictive control. AIChE J.
2003, 49, 426–437.
25. Ljung, L. System identiﬁcation. In Signal Analysis and Prediction; Springer: Boston, MA, USA, 1998.
26. Forssell, U.; Ljung, L. Closed-loop identiﬁcation revisited. Automatica 1999, 35, 1215–1241.
27. Wallace, M.; Pon Kumar, S.S.; Mhaskar, P. Offset-free model predictive control with explicit performance
speciﬁcation. Ind. Eng. Chem. Res. 2016, 55, 995–1003.
28. Alanqar, A.; Durand, H.; Christoﬁdes, P.D. Fault-Tolerant Economic Model Predictive Control Using
Error-Triggered Online Model Identiﬁcation. Ind. Eng. Chem. Res. 2017, 56, 5652–5667.
29. Mahmood, M.; Mhaskar, P. Enhanced Stability Regions for Model Predictive Control of Nonlinear Process
Systems. AIChE J. 2008, 54, 1487–1498.
c 2018 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access

article distributed under the terms and conditions of the Creative Commons Attribution
(CC BY) license (http://creativecommons.org/licenses/by/4.0/).

17

mathematics
Article

A Novel Distributed Economic Model Predictive
Control Approach for Building Air-Conditioning
Systems in Microgrids
Xinan Zhang † , Ruigang Wang and Jie Bao *
School of Chemical Engineering, University of New South Wales, Sydney, NSW 2052, Australia;
zhangxn@ntu.edu.sg (X.Z.); ruigang.wang@unsw.edu.au (R.W.)
* Correspondence: j.bao@unsw.edu.au
† Current address: School of Electrical & Electronic Engineering, Nanyang Technological University,
50 Nanyang Avenue, Singapore.
Received: 26 March 2018; Accepted: 13 April 2018; Published: 17 April 2018

Abstract: With the penetration of grid-connected renewable energy generation, microgrids are
facing stability and power quality problems caused by renewable intermittency. To alleviate such
problems, demand side management (DSM) of responsive loads, such as building air-conditioning
system (BACS), has been proposed and studied. In recent years, numerous control approaches
have been published for proper management of single BACS. The majority of these approaches
focus on either the control of BACS for attenuating power ﬂuctuations in the grid or the operating
cost minimization on behalf of the residents. These two control objectives are paramount for
BACS control in microgrids and can be conﬂicting. As such, they should be considered together
in control design. As individual buildings may have different owners/residents, it is natural to
control different BACSs in an autonomous and self-interested manner to minimize the operational
costs for the owners/residents. Unfortunately, such “selﬁsh” operation can result in abrupt and
large power ﬂuctuations at the point of common coupling (PCC) of the microgrid due to lack
of coordination. Consequently, the original objective of mitigating power ﬂuctuations generated
by renewable intermittency cannot be achieved. To minimize the operating costs of individual
BACSs and simultaneously ensure desirable overall power ﬂow at PCC, this paper proposes a novel
distributed control framework based on the dissipativity theory. The proposed method achieves
the objective of renewable intermittency mitigation through proper coordination of distributed
BACS controllers and is scalable and computationally efﬁcient. Simulation studies are carried out to
illustrate the efﬁcacy of the proposed control framework.
Keywords: model predictive control (MPC); dissipativity; building air-conditioning system
(BACS); microgrids

1. Introduction
In the past decade, electricity generation by using renewable energy resources, such as solar
energy, becomes increasingly popular due to its capability of saving fossil fuels and reducing emissions.
As a result, the number of grid-connected solar generation (SG) plants rises rapidly. One of the
drawbacks of SG is the ﬂuctuations in its output power caused by renewable intermittency. In practice,
large and rapid output power oscillations are often experienced in SG plants, which may lead to bus
voltage instability or even blackouts in the electric grid [1–3]. Such stability problems become far more
signiﬁcant in the microgrids, where high penetration of SG plants can be expected [4]. One of the
widely accepted solutions to the aforementioned stability problems is to increase the operating reserve
of electric grid. This includes the installation of extra generators, deployment of a large amount of

Mathematics 2018, 6, 60; doi:10.3390/math6040060

18

www.mdpi.com/journal/mathematics

Mathematics 2018, 6, 60

battery energy storage systems (BESSs), and demand side management (DSM), etc. Obviously, large
scale implementation of either extra generators or BESSs will introduce very high costs. In comparison,
DSM utilizes the load shifting potential of end-users and does not require additional infrastructure.
Thus, DSM is considered to be one of the most cost-effective methods for providing operating reserve
to the grid [5,6].
Conceptually, DSM indicates the management of electrical loads to diminish undesirable
ﬂuctuations in power ﬂow while satisfying customer requirements. Some electrical loads are
controllable, including washing machines, air-conditioners and ventilation systems, etc. Among
all these loads, air-conditioners typically consume a signiﬁcant portion of energy. This is especially
true for modern buildings that employ central air-conditioning systems. Statistically, nearly 40% of the
world’s end-use electric energy is consumed by buildings and more than 50% of the building energy is
used for ventilation and air-conditioning [7–9]. This shows that control of building air-conditioning
systems (BACS) can be crucial for maintaining power balance in the grid, and the thermal capacity
of buildings can be used as an effective tool for smoothing the power ﬂow and shaving peak power
in microgrids.
In recent years, model predictive control (MPC) has been investigated in the optimal management
and operation of energy systems (including BACSs) [10–17]. For example, Maasoumy et al. [14]
proposed an MPC approach to regulate building heating, ventilation and air-conditioning (HVAC)
systems to offer an ancillary service to automatic generation control (AGC). The proposed method
contributes to improving the accuracy of AGC in power systems. However, the operating costs of
building HVAC systems and the scenarios of large scale power systems with SGs are not considered.
In [15–17], researchers proposed other model based control methods to manipulate the aggregated
demand of BACSs to compensate for the power ﬂuctuations caused by SG units. These methods
essentially increase the operating reserve of electric grids. Nevertheless, the associated operating
costs of BACS are still not considered. In fact, the operating costs are one of the main concerns of
building residents and must be taken into account in BACS control. From the perspective of building
residents, the main control objective of BACSs should be the minimization of operating cost so that
their electricity bills can be reduced. In [18], a hierarchical economic MPC framework based on the
time-scale difference between HVAC and building thermal energy storage was developed to improve
the total operation cost. In this work, distributed control is adopted since different buildings are
usually subject to different energy demands and ownerships.
To study general situations in microgrids, dynamic electricity prices are employed in this paper for
energy trading of distributed buildings with SGs and BACSs. Theoretically, dynamic prices are based
on the current and predicted power supply/demand information that is available in the commonly
used day-ahead market. Certainly, such dynamic “prices” can be either actual electricity prices for a
microgrid with ﬁnancially independent buildings (where the prices impact owners’ economic costs) or
virtual prices for a microgrid owned by one organization such as a university or company campus
(where the “prices” are used as a token for the coordination of energy consumption of different
buildings). With respect to the dynamic prices, each individual BACS controller can minimize its
operating cost economically through demand management. This mechanism encourages BACS
controllers to shave peak power demand in the high price region and shift it to a low price region.
However, if not appropriately coordinated, a positive feedback loop might be formed. In this case,
the prediction of an increasing electricity price stimulates building controllers to purchase and use
more energy at the current step to save the predicted future SG outputs for possible energy selling
at higher prices. This subsequently results in a further boosted electricity price. The presence of
such a mechanism can signiﬁcantly deteriorate the collective power ﬂow proﬁle of all participated
buildings in the microgrid. Under some extreme conditions, voltage instability might also be incurred.
Therefore, the formulation of the aforementioned positive feedback loop must be avoided through
appropriate coordination of different BACS controllers. Proper coordination of microgrid users is
necessary to attenuate excessive energy trading behaviors effectively. Advanced control methods,

19

Mathematics 2018, 6, 60

such as process control techniques, can be applied in this scenario to improve system-wide stability and
performance [10,13,19,20]. Although some articles are published on the coordination of distributed
controllers for microgrid applications [21–23], their nature of achieving economic optimum at an
aggregation level makes them computationally complicated and not scalable for large scale systems,
such as microgrids. Thus, distributed control without online centralized optimization is a better
solution to the aforementioned problem.
In this paper, a novel distributed economic MPC approach for BACS in microgrids is developed,
based on the dissipativity theory. This approach allows individual BACS MPCs to minimize their own
operational costs while attenuating the ﬂuctuations of the total power demand and ensure microgrid
level stability. To allow large scale implementation, the basic idea is to constrain the behaviors of
BACS controllers with additional conditions to achieve the microgrid level performance and stability.
In this work, such conditions are developed based on concept of dissipativity. Being an input and
output property of dynamical systems [24,25], dissipativity was found useful for stability design for
feedback systems (e.g., [26,27]) and was recently applied to develop plantwide interaction analysis and
distributed control approaches (e.g., [28–31]). In this paper, microgrid-wide performance and stability
are represented as microgrid dissipativity conditions that in turn are translated into the constraints
that each BACS controller has to satisfy. To reduce the conservativeness of the dissipativity conditions,
dynamic supply rates in Quadratic Difference Form (QdF) [32] are adopted in this approach, similar
to [33]. Each BACS controller can optimize its own “selﬁsh” economic objective based on the local
information (e.g., the indoor temperature) and the electricity price, subject to the above discussed
constraint, without iterative optimization or negotiations.
The remaining part of this paper is organized as follows: Section 2 introduces thermal modeling
of buildings with AC and SG for microgrid applications. In Section 3, the effect of dynamic electricity
price on energy trading in microgrids is discussed and an illustrative price scheme is provided.
The dissipativity theory is brieﬂy reviewed in Section 4. Subsequently, microgrid-wide dissipativity is
analyzed and the proposed control framework is presented. Based on the general case of dynamic
electricity price, simulations are carried out with the results presented in Section 5 to show the
effectiveness of the proposed approach on improving collective performance of BACSs in microgrids.
Finally, a conclusion is drawn in Section 6.
2. Buildings with Air-Conditioning and Solar Generation in Microgrids
2.1. Building Thermal Modeling
To effectively reduce the energy consumption of BACS without sacriﬁcing the comfort of residents,
thermal dynamics of buildings have to be studied. Therefore, a suitable building thermal model is
necessary. In literature, a number of models are proposed to quantitatively evaluate building thermal
dynamics [34–38]. Typically, three exogenous disturbances, including ambient temperature, solar
irradiation and heat generated by internal electrical appliances, are adopted in these models and
ground temperature is neglected [35]. The complexity of these models are basically dependent on their
accuracy and the number of thermal zones considered in a building. It is noted that linear state space
models are commonly used and found to be accurate enough [36–38]. In addition, the complexity of
such models rises drastically with the increase of the number of building thermal zones [39]. Therefore,
in real-time control applications, a reduced order model is usually desirable. Without loss of generality,
a lumped parameter building thermal model [38] is employed in this paper as follows:
dTd
1
1
1
1
=
( Ta − Td ) +
( Tw − Td ) +
( Te − Td ) +
[( Pheat + Pcool + ρPld ) + Φs Aμ1 ] ,
dt
Cd R a
Cd Rd
Cd Rw
Cd
1
1
dTw
(1)
=
( T − Tw ) +
Φs Aμ2 ,
dt
Cw Rd d
Cw
1
1
dTe
=
( T − Te ) +
( Ta − Te ),
dt
Ce Rw d
Ce R am
20

Mathematics 2018, 6, 60

where the deﬁnitions and units of notations used in Equation (1) are given in Table 1. Noticeably,
expressions Φs Aμ1 and Φs Aμ2 represent the solar radiation transferred through an external building
envelop to heat up indoor air and interior walls, respectively. Considering the effect of shading,
the usage of heat insulation materials in the envelop of most buildings and the heat transfer rate
between air and wall, the values of μ1 and μ2 are chosen to be 0.02 and 0.0075 in this paper. It should be
pointed out that the control framework to be presented in Section 4 can be applied with any building
thermal model, including those more detailed models that consider the dynamics of each individual
thermal zone.
Table 1. Variables in the thermal model.
Variable
Td
Tw
Te
Ta
Φs
Pheat
Pcool
Pld
ρ
Ra
Rd
Rw
R am
Cd
Cw
Ce
A
μ1
μ2

Deﬁnition

Unit

Temperature of building indoor air
Temperature of building interior walls
Temperature of building envelop
Temperature of ambient environment
Solar radiation
Heating power from air-conditioning system (positive)
Cooling power from air-conditioning system (negative)
Power consumption of indoor appliances (excluding AC system)
Fraction of heat generated from the operation of indoor appliances
Thermal resistance between indoor air and ambient environment
Thermal resistance between interior walls and indoor air
Thermal resistance between indoor air and building envelop
Thermal resistance between building envelop and ambient environment
Heat capacity of indoor air
Heat capacity of interior walls
Heat capacity of building envelop
Effective area of building envelop
Coefﬁcient of solar radiation transferred through building envelop to heat up indoor air
Coefﬁcient of solar radiation transferred through building envelop to heat up interior
walls

◦C
◦C
◦C

◦C
kW/m2
kW
kW
kW
◦ C/kW
◦ C/kW
◦ C/kW

◦ C/kW
kW/◦ C
kW/◦ C
kW/◦ C
m2

2.2. Building with Air-Conditioning and Solar Generation
As mentioned before, modern buildings are usually equipped with automatically controlled
air-conditioners (AC), which includes on/off type and inverter based variable frequency type. In most
cases, the latter shows superior performance over the former even though it is more expensive [40].
According to some previous studies, the variable frequency air-conditioner (VFAC) can achieve
signiﬁcant energy savings and simultaneously provide better comfort level [40–42] compared to its
on/off counterpart. This means the increased capital cost of VFAC can be readily paid back through
the reduction of electricity bills. Consequently, nowadays, VFACs are widely used to replace the
conventional on/off models [43]. In view of such circumstances, the VFAC, which is capable of
continuously adjusting its output heating/cooling power, is assumed to be the default air-conditioner
for buildings in this paper.
In the microgrids, it is common to install solar photovoltaic (PV) systems on the roof of buildings
to reduce buildings’ energy dependency on the grid. In this way, many buildings can have their own
clean energy sources to support loads or even sell surplus electric energy back to the grid. In order
to describe a general situation, SG systems are assumed to be present in the buildings of microgrids
in this work. Conceptually, the studied building system with AC and SG can be brieﬂy depicted by
Figure 1. Denote Pb and Ps as the power purchased from and sold to the microgrid by the building,
respectively. Then, the power balance equation can be expressed as follows:
Pb + Ps + Ppv = Pheat + Pcool + Pld ,

21

(2)

Mathematics 2018, 6, 60

where Ppv and Pld are deﬁned as the power generated by SG plant and the power consumed by the
other electrical loads (excluding AC system), respectively.
…

0LFURJULG
$LUFRQGLWLRQLQJ
6\VWHP
2WKHU(OHFWULFDO/RDGV

…

3&&

…

6XEVWDWLRQZLWK
6XEVWDWLRQZLWK
,QIRUPDWLRQ([FKDQJH

8WLOLW\*ULG

$LUFRQGLWLRQLQJ
6\VWHP

…

…

2WKHU(OHFWULFDO/RDGV

$LUFRQGLWLRQLQJ
6\VWHP
2WKHU(OHFWULFDO/RDGV

Figure 1. Block diagram of buildings with air-conditioner (AC) and solar generation (SG) in microgrids.

The output power of SG can be estimated/predicted from forecasted solar radiation and
ambient temperature together with the technical speciﬁcations of the PV panels and the incremental
conductance based maximum power point tracking algorithm [44].
2.3. State-Space Representation
The aim of controller is to maintenance the building’s indoor temperature with a certain range
while dynamically adjusting the power demands within the microgrid to achieve better economy.
Thus, the state variables x, output (or controlled) variables y, manipulated variables u and disturbance
variables d can be chosen as follows:

T

x = Td Tw Te , y = Td Pb

T

u = Pheat Pcool Pb , d = Pld

Ps

T

Ppv

,
Ta

Φs

T

(3)
,

respectively. The discrete-time state-space model of Equations (1)–(2) can be expressed in the following
compact form:
x (k + 1) = Ax (k) + Bu(k ) + Ed(k ),

(4)

y(k) = Cx (k) + Du(k ) + Fd(k ),
where
⎡
⎢
A = I3 + Ts ⎣
⎡

1
⎢
C = ⎣0
0

0
0
0

− C1d ( R1a +

1
Rd

+

1
Rd Cw
1
Rw Ce

⎤
⎡
0
0
⎥
⎢
0⎦ , D = ⎣0
0
1

0
0
1

⎤
1 1 0
Ts ⎢
⎥
⎥
0
⎦, B =
⎣0 0 0⎦ ,
Cd
1
1
1
0 0 0
0
− Ce ( Rw + Ram )
⎤
⎤
⎡ρ
⎡
μ1 A ⎤
1
0 Ra C
0
0 0 0 0
Cd
Cd
d
⎥
⎥
⎢
⎢
μ2 A ⎥
1 ⎦ , E = Ts ⎣ 0 0
⎦ , F = ⎣0 0 0 0⎦ ,
0
Cw
1
−1
−
1
0
0
1
0 0
0

1
Rw )

1
Rd Cd
− Rd1Cw

⎤

1
Rw Cd

R am Ce

with Ts as the controller sampling period and I3 as a 3 × 3 identity matrix.

22

⎡

(5)

Mathematics 2018, 6, 60

3. Electricity Price Policy for Energy Trading in Microgrids
There are research efforts on minimizing the operating costs of BACS based on the predictions
of electricity price while respecting thermal comfort constraints [45–48]. Nonetheless, the attentions
of these proposals are only based on static electricity price. Instead, the general case of dynamic
electricity pricing, which varies with respect to real-time power supply and demand conditions, is not
investigated. In practice, dynamic electricity prices are widely proposed for microgrid and smart grid
applications [22,49–51] because they are effective tools for achieving power and ﬁnancial balances.
Furthermore, the existing proposals also neglect the effect of cost minimization by distributed BACS
controllers on the overall power ﬂow proﬁle of microgrid. Actually, this effect is very important since
the detrimental intermittent power ﬂuctuations caused by renewable intermittency can be aggregated
rather than mitigated if there is no coordination among distributed BACS controllers. The reason for
such phenomenon is that buildings in one geographical area, such as a microgrid, are typically subject
to the same electricity price and very similar weather conditions. As a consequence, simultaneous cost
minimization of BACSs can lead to similar control actions, producing similar building power ﬂow
proﬁles even though there are some differences in the output of SGs installed on buildings.
It is acknowledged that a constant electricity price does not give customers incentives to change
their load patterns, which can lead to supply issues in power systems during peak demand hours [9,52].
In addition, it implies that people who use electricity during off-peak hours are essentially subsidizing
peak hour users [53]. Undoubtedly, such a price policy is undesirable for both the grid operator and
the users. To effectively shave the peak of power demand, time-of-use (TOU) price policy is proposed
and employed [47,54,55]. For example, a typical TOU price αUG adopted by the state of New South
Wales in Australia [54,55] is illustrated in Figure 2, from which it is seen that TOU electricity price
varies with time periodically with large price difference between peak and non-peak hours. In this
way, the shifting of electrical loads from peak hours to non-peak (off-peak or shoulder) hours can help
reduce users’ electricity cost to a large extent. Therefore, TOU price policy motivates users to shift their
electricity usage to low price regions.
:HHNHQGV
30

:HHNGD\V
30
30

6KRXOGHU

2II3HDN

2II3HDN

3HDN
6KRXOGHU
6KRXOGHU

$0

$0

30

33ULFHVLQ$8'

D8*

­ 3HDN
°
® 6KRXOGHU  E8* 
°2II  3HDN
¯

Figure 2. Illustrative example of time-of-use (TOU) electricity price and solar feed-in tariff.

Indeed, there are drawbacks of the existing TOU price policies. Firstly, researchers have pointed
out that the ratio of peak to off-peak TOU prices has to be signiﬁcant. Otherwise, the proﬁle of user
power demand will not change effectively [56]. Nevertheless, large price differences in different time
intervals can result in higher overall cost for some users, and, thus, may not be preferable. Secondly,
since the TOU price policy is static, dynamic supply and demand information cannot be reﬂected in
the electricity price. Consequently, it is impossible for the electricity market to use price as an effective
tool to affect power balance in the grid. In practice, dynamic electricity price has great potential to
23

Mathematics 2018, 6, 60

inﬂuence both the supply and demand to alleviate power imbalances in areas with high penetration
of SG plants [49], such as microgrids. Theoretically, electric energy can be traded among users in
microgrids with reasonable prices and this is beneﬁcial for both grid operator and users. For the grid
operator, electricity price can be regulated based on real-time supply and demand information to
mitigate microgrid-wide power imbalance. Alternatively, for users in the microgrid, trading with
the other users instead of the grid gives them the opportunity of getting a better electricity price.
This contributes to reducing their overall cost. Therefore, dynamic electricity prices are promising for
microgrid applications.
Of course, to implement dynamic electricity prices in the microgrid, energy trading between
microgrid and utility grid (UG) is inevitable because power imbalances in microgrid have to be
compensated by UG. As a result, the existing TOU price proﬁle employed by UG must be considered.
In general, the dynamic electricity prices should possess three features. First of all, they ought to be
functions of the real-time power supply and demand in microgrid. Secondly, the users who buy energy
should be charged at a price not higher than that of the UG and the users who sell energy should be
paid at a price not lower than that of the UG. This feature motivates users to participate in energy
trading activities. Thirdly, despite their nature of beneﬁting users, the dynamic electricity prices must
guarantee that the microgrid can be ﬁnancially self-sustained in its transactions with UG. In other
words, the ﬁnancial gain of microgrid through energy selling must be able to cover the ﬁnancial loss
of microgrid through energy buying. In theory, many pricing policies can satisfy the above features.
One of the examples is


αmg = [1 + (1 − γ) PsΣ /PbΣ ]αUG , β mg = γαUG ,
αmg = β mg = βUG ,

if PbΣ + PsΣ > 0,
if PbΣ + PsΣ ≤ 0,

(6)

where αmg and β mg represent the electricity price charged on energy buyers and paid to energy sellers
in microgrid, respectively, and Pb,Σ (≥0) and Ps,Σ (≤0) are the total electric power purchased from and
sold to the microgrid by internal users, i.e.,
PbΣ =

M

PsΣ =

∑ Pbi ,

M

∑ Psi ,

(7)

i =1

i =1

with Pbi and Psi as the trading behaviors of individual users and M as the number of users. Notations
αUG and βUG denote the electricity price charged on and paid to microgrid by UG when there are
transactions between them. The values of αUG and βUG can be determined from Figure 2. Symbol γ is
a user-deﬁned constant in the range 0 < γ < 1.
From Equation (6), it can be seen that


αmg PbΣ + β mg PsΣ = ( PbΣ + PsΣ )αUG

αmg PbΣ + β mg PsΣ = ( PbΣ + PsΣ ) βUG

if PbΣ + PsΣ > 0,
if PbΣ + PsΣ ≤ 0.

(8)

In both equations, the left-hand side represents ﬁnancial gain/loss of microgrid’s trading with
internal users and the right-hand side indicates ﬁnancial gain/loss of microgrid’s trading with UG.
Obviously, equivalence of the two sides implies zero ﬁnancial gain/loss of microgrid. Consequently,
by employing such a pricing policy, the microgrid serves as a non-proﬁt information platform that
facilitates energy trading among internal users. In practical applications, if certain operation and
maintenance costs are associated with this information platform, a monthly service charge can be
imposed on users. However, this service charge should be very low due to the large amount of users
in microgrid and the marginal cost of running an information platform.

24

Mathematics 2018, 6, 60

4. Dissipativity Based Distributed Control Framework
The distributed control diagram of building thermal systems in the microgrid is depicted by
Figure 3, where Bi and Ci represent the i-th building and its corresponding controller. During
each sampling period, individual controllers receive price information (both current and predicted
purchasing/selling prices) from the energy trading unit, retrieve load proﬁles from historical data and
measure building temperatures. Then, it calculates the control inputs by minimizing its economical
cost and sending the power demand/supply information to the energy trading unit. The further price
proﬁle is generated by this centralized component based on the price scheme in Equation (6) and
redistributed to individual controllers at the next time step.

Utility Grid
PΣ

αM G

βM G

Energy Trading
y1
d1

αmg

βmg

B1

yM
dM

BM

u1

uM
C1

Building 1

CM
···

Building M

Figure 3. Block diagram of signal ﬂows of a controlled building thermal system.

As shown in our previous work [57], without proper coordination, the “selﬁsh” nature of each
economic MPC controller could generate excessive energy trading behaviors, which may cause
undesirable oscillations. In this section, the dissipativity theory, which characterizes system behaviors
from input–output trajectories, is employed to resolve this issue. The whole system in Figure 3
is treated as a network of dynamical interacted subsystems. Firstly, the dissipativity analysis is
performed on each components, e.g., building thermal model, controller and energy trading unit.
Then, a microgrid-wide supply rate is obtained by the linear combination of individual subsystems’
supply rates. Finally, a microgrid-wide dissipativity synthesis is performed ofﬂine and the online
implementation involves solving distributed economic model predictive control (DEMPC) problems
subject to additional dissipativity based coordination constraints.
4.1. Dissipativity and Dissipative Conditions
Consider a general discrete-time system expressed as follows:
x (k + 1) = f ( x (k ), u(k)),

y(k ) = h( x (k ), u(k )),

(9)

where x ∈ Rn , u ∈ R p and y ∈ Rq are deﬁned as the state, input and output variables, respectively.
Notation k denotes the k-th sampling instant. This system is said to be dissipative if there exists a
positive semideﬁnite function ψ( x ) deﬁned on the state, called storage function, and a function φ(y, u)

25

Mathematics 2018, 6, 60

deﬁned on the input and output, which is known as supply rate, such that the following inequality
holds [24]
(10)
ψ( x (k + 1)) − ψ( x (k )) ≤ φ(y(k), u(k )), ∀k ≥ 0.
Commonly, the following ( Q, S, R)-type supply rate is used

φ(y(k ), u(k )) =

y(k)
u(k)

T 

Qφ
SφT

Sφ
Rφ




y(k)
,
u(k)

(11)

where Qφ = QφT ∈ Rq×q , Rφ = RφT ∈ R p× p and Sφ ∈ Rq× p are parametric matrices. In general,
the information of system gain is contained in Qφ , Rφ and the phase relation is indicated by Sφ . For
example, Qφ = − Iq , Sφ = 0, Rφ = ρ2 I p implies a system with bounded L2 gain (with an H∞ system
norm of ρ).
Since the ( Q, S, R)-type supply rate only contains input and output information at the current
sampling instant, i.e., u(k) and y(k ), it can be very conservative. The conservativeness of the
dissipativity conditions can be reduced by introducing the concept of dynamic supply rate, e.g.,
in the quadratic differential form (QDF) [32], or the QdF for discrete time systems [58]. Such a
dynamic supply rate is a function of the input and output trajectories and, consequently, captures
more behavioral features of the system. An exemplary illustration of an n-th order QdF supply rate is


ŷ(k )
Φ(ŷ, û) :=
û(k )

T 

Qφ
SφT

Sφ
Rφ




ŷ(k)
,
û(k)

(12)

where Qφ = QφT ∈ Rnq×nq , Sφ ∈ Rnq×np , Rφ = RφT ∈ Rnp×np , and û(k), ŷ(k ) are the input and output
trajectories deﬁned by:
ŷ(k) = col(y(k), . . . , y(k + n − 1)),


where col(y1 , . . . , ym ) = y1T
can be derived as follows:
Ψ(ŷ, û) :=

T

···

T
ym



T 

ŷ(k )
û(k)

û(k ) = col(u(k ), . . . , u(k + n − 1))

(13)

. By using the above notation, a QdF storage function Ψ(ŷ, û)

diag( Xψ , 0q×q )
diag(YψT , 0 p×q )

diag(Yψ , 0q× p )
diag( Zψ , 0 p× p )




ŷ(k )
,
û(k )

(14)

where Xψ = XψT ∈ R(n−1)q×(n−1)q , Yψ ∈ R(n−1)q×(n−1) p , Zψ = ZψT ∈ R(n−1) p×(n−1) p . It is noted that
zero vectors are concatenated with Xψ , Yψ and Zψ to extend the dimension of parametric matrix.
With slight abuse of notations, we use Φ and Ψ to denote the coefﬁcient matrix of supply rate and
storage function, i.e.,


Qφ
Φ=
SφT


Sφ
,
Rφ



diag( Xψ , 0q×q )
Ψ=
diag(YψT , 0 p×q )


diag(Yψ , 0q× p )
.
diag( Zψ , 0 p× p )

(15)

Subsequently, the QdF-type dissipativity [33] can be deﬁned as follows.
Deﬁnition 1. System (9) is said to be dissipative with respect to the n-th order QdF-type supply rate Φ(ŷ, û) if
there exists n-th order QdF-type storage function Ψ(ŷ, û) ≥ 0 satisfying the following dissipation inequality:

∇Ψ(ŷ, û) = Ψ(ŷ(k + 1), û(k + 1)) − Ψ(ŷ(k), û(k)) ≤ Φ(ŷ(k), û(k)),

26

∀k ≥ 0.

(16)

Mathematics 2018, 6, 60

It is noted that the change of storage function ∇Ψ(ŷ, û) is expressed as


∇Ψ =

diag(0q×q , Xψ ) − diag( Xψ , 0q×q )
diag(0 p×q , YψT ) − diag(YψT , 0 p×q )


diag(0q× p , Yψ ) − diag(Yψ , 0q× p )
.
diag(0 p× p , Zψ ) − diag( Zψ , 0 p× p )

(17)

4.2. Dissipativity Analysis of an Individual Building in the Microgrid
Assume that there are M buildings participating in the energy trading in microgrid and the i-th
(i = 1, . . . , M) building system is expressed as follows:
xi (k + 1) = Ai xi (k ) + Bi ui (k ) + Ei di (k ),

(18)

yi (k) = Ci xi (k ) + Di ui (k ) + Fi di (k ),

where variables xi , ui , di , yi and matrices Ai , Bi , Ci , Di , Ei , Fi are deﬁned in a similar way as those in
(3)–(5).
The dissipativity property of individual building thermal model can be obtained as follows.
Proposition 1. System (18) is dissipative with supply rate Φi (ŷi , ûi , dˆi ), if there exists a storage function
Ψi (ŷi , ûi , dˆi ) satisfying the following linear matrix inequalities (LMIs)
⎡
Ψi ≥ 0,

Ĉi
⎢
⎣0
0

D̂i
I
0

⎡
⎤T
Ĉi
F̂i
⎥
⎢
0 ⎦ ( Φi − ∇ Ψi ) ⎣ 0
I
0

D̂i
I
0

⎤
F̂i
⎥
0 ⎦ ≥ 0,
I

(19)

where
⎡

⎤
⎡
Ci
Di
⎢
⎥
⎢
⎢ Ci Ai ⎥
⎢ Ci Bi
⎥
⎢
Ĉi = ⎢
..
⎢ .. ⎥ , D̂i = ⎢
.
⎣ . ⎦
⎣
n −1
n
Ci Ai Bi
Ci Ai

0
Di
..
.
n −2
Ci Ai Bi

···
···
..
.
···

⎤
⎡
Fi
0
⎥
⎢
0⎥
⎢ Ci Ei
⎥ , F̂i = ⎢
..
⎥
⎢
0⎦
.
⎣
n −1
Ci Ai Ei
Di

0
Fi
..
.
n −2
Ci Ai Ei

···
···
..
.
···

⎤
0
⎥
0⎥
⎥.
⎥
0⎦
Fi

(20)

Proof. From (18), we have ŷi (k ) = Ĉi x( k) + D̂i ûi (k) + F̂i dˆi (k ). By submitting it into the dissipation
inequality (16), then (19) follows as x (k), ûi (k ), dˆi (k ) are independent.
4.3. Dissipativity Based DEMPC
In this work, a DEMPC approach is developed to control each BACS as MPC implement cost
functions that directly reﬂect the actual operational costs of air-conditioners and can deal with
constraints easily. For the i-th building with AC and SG, the economic optimal control problem
can be expressed as follows:
N −1

min
ui

s.t.

∑

j =0

αmg (k + j) Pbi (k + j) + β mg (k + j) Psi (k + j),

x̃i (k + j + 1) = A x̃i (k + j) + Bui (k + j) + Ed˜i (k + j), x̂i (k) = xi (k )
ỹi (k + j) = C x̃i (k + j) + Dui (k + j) + F d˜i (k + j)

(21)

ỹi (k + j) ∈ [ T i , T i ] × [0, Pt ] × [− Pt , 0]
ũi (k + j) ∈ [0, P AC ] × [− P AC , 0] × [0, Pt ],
where ui = {ui (k), . . . , ui (k + N − 1)} is the vector of decision variable and N is the prediction horizon.
In addition, the constraint inequalities indicate limits imposed by user comfort temperature zone
[ T i , T i ], power distribution line limit Pt and rating of air-conditioner P AC .

27

Mathematics 2018, 6, 60

Similar to [57], an additional dissipativity based constraint is added to individual DEMPC
controllers to achieve microgrid-wide stability and performance. Since MPC is a static control law
without any storage function, it could be very conservative to impose the dissipation inequality (16) to
the DEMPC formulation (21). To solve this problem, the concept of dissipative trajectory, which is the
integral version of (16), is adopted in this work:
Deﬁnition 2 ([31]). An MPC controller with the supply rate Φc (ŷ(k ), û(k )) is said to trace a dissipative
trajectory if the following condition is satisﬁed:
k

Wk =

∑ Φc (ŷ( j), û( j)) ≥ 0,

∀k ≥ 0.

(22)

j =0

To ensure that the DEMPC controller in (21) is dissipative with respect to supply rate Φc,i (ŷi , ûi , dˆi ),
the following constraint
⎡

ŷc,i (k )
⎢
⎢ ûc,i (k)
T
Wk−1 + ŷc,i Qφc,i ŷc,i + ⎢ ˆ
⎣ dc,i (k )
v̂c,i (k )

⎤T
⎥
⎥
⎥
⎦



0
SφTc,i

Sφc,i
Rφc,i



⎡

ŷc,i (k )
⎢
⎢ ûc,i (k )
⎢ ˆ
⎣ dc,i (k )
v̂c,i (k )

⎤
⎥
⎥
⎥ ≥ 0,
⎦

(23)


T
where yc,i = ui , uc,i = yi , dc,i = di and vc,i = αmg β mg
are imposed to the optimization
problem (21). To ensure its recursive feasibility, the controller’s supply matrix Φc,i needs to satisfy [33]
the following conditions:


0
Sφc,i
− Qφc,i ≥ 0,
≥ 0.
(24)
SφTc,i Rφc,i
4.4. Analysis of Dissipativity of Price Controller in Microgrid
The energy trading unit is a memoryless rational function of total power supply (PsΣ ) and demand
(PbΣ ). The dissipation inequality of the CPC can be expressed as follows:
⎡

⎤T ⎡
⎤
αmg
αmg
⎢β ⎥
⎢β ⎥
⎢ mg ⎥
⎢ mg ⎥
⎢ Σ ⎥ φe ⎢ Σ ⎥ ≥ 0,
⎣ Pb ⎦
⎣ Pb ⎦
PsΣ
PsΣ

(25)

where φe is the quadratic supply rate (QSR) matrix. The problem in (25) can be solved efﬁciently by
the sum-of-squares (SOS) programming method.
Here is a brief introduction to the basic concept of SOS programming. Let R[ x ] be the set of all
polynomials in x with real coefﬁcients and
Σ[ x ] := { p ∈ R[ x ] | p = p21 + p22 + · · · + p2n , p1 , . . . , pn ∈ R[ x ]}

(26)

be the subset of R[ x ] containing the SOS polynomials. Finding a sum of squares polynomial p( x ) is
equivalent to determination of the existence of a positive semideﬁnite matrix Q such that
p( x ) = m T ( x ) Qm( x )

(27)

where m( x ) is a vector of monomials. The SOS decomposition (27) can be efﬁciently and reliably
achieved through semideﬁnite programming (SDP) [59]. In this paper, open source MATLAB toolbox
YALMIP (version R20170921, Linkoping University, Linköping, Sweden) [60] and SDP solver SeDuMi

28

Mathematics 2018, 6, 60

(version 1.05R5, maintained by CORAL Lab, Department of Industrial and Systems Engineering,
Lehigh University, Bethlehem, PA, USA) [61] are used for ﬁnding the Q matrix.
By substituting the price scheme (6) into (25), we can have the following SOS programming problem:
⎡
⎢
⎢
⎢
⎣

⎤T ⎡
⎤
αUG [ PbΣ + (1 − γ) PsΣ ]
αUG [ PbΣ + (1 − γ) PsΣ ]
⎥
⎢
⎥
γαUG PbΣ
γαUG PbΣ
⎥
⎢
⎥
⎥ φe ⎢
⎥ ≥ 0.
Σ
2
Σ
2
⎦
⎣
⎦
( Pb )
( Pb )
Σ
Σ
Σ
Σ
Ps Pb
Ps Pb

(28)

The following n-th order QdF supply rate (augment of QSR supply rate) can be written as
T diag( φ , . . . , φ ) Π ,
Φ E = Πm
e
e
m

(29)

where the permutation matrix Πm is deﬁned by
⎡

⎤
αmg (k )
⎢
⎥
β mg (k )
⎢
⎥
⎢
⎥
PbΣ (k )
⎢
⎥
⎡
⎤
⎢
⎥
α̂mg (k )
Σ
⎢
⎥
P
(
k
)
s
⎢
⎥
⎢ β̂ (k )⎥
⎢
⎥
⎢ mg ⎥
..
⎥.
⎢
⎥ = Πm ⎢ Σ
.
⎢
⎥
⎣ P̂b (k) ⎦
⎢ α ( k + n − 1) ⎥
Σ (k)
⎢ mg
⎥
P̂
s
⎢
⎥
⎢ β mg (k + n − 1)⎥
⎢ Σ
⎥
⎣ Pb (k + n − 1) ⎦
PsΣ (k + n − 1)

(30)

4.5. Microgrid-Wide Dissipativity Synthesis
Let the independent variables for the networked system be partitioned into the following sets:
y g = col( Pb1 , Ps1 , . . . , PbM , PsM ),
(31)

d g = col(d1 , . . . , d M ),
wg =

1
1
M
M
col( Pheat
, Pcool
, Td1 , . . . , Pheat
, Pcool
, TdM , αmg , β mg ).

Then, the microgrid-wide supply rate, which is the linear combination of the supply rates of
individual subsystems, distributed controllers and energy trading unit can be represented as
⎡ ⎤T
⎡ ⎤
ŷ g
ŷ g
⎢ ˆ ⎥
⎢ ⎥
ˆ
Φ g (ŷ g , d g , ŵ g ) = ⎣ d g ⎦ Φ g ⎣ dˆg ⎦ ,
ŵ g
ŵ g


where Φ g = Π T diag(Φ1 , . . . , Φ M , Φc,1 , . . . , Φc,M , Φ E )Π and Π = Π1T
matrices Π1 , Π2 , Π3 satisfying
⎡
⎡

⎤

ŷ1
⎢ û1 ⎥
⎢ ⎥
⎡ ⎤
⎢ dˆ ⎥
⎢ 1⎥
ŷ g
⎢ . ⎥
⎥
⎢ . ⎥ = Π1 ⎢
⎣ dˆg ⎦ ,
⎢ . ⎥
⎢ ⎥
ŵ g
⎢ ŷ M ⎥
⎢ ⎥
⎣û M ⎦
dˆM

⎤
ŷc,1
⎢ û ⎥
⎢ c,1 ⎥
⎢ ˆ ⎥
⎢ dc,1 ⎥
⎢
⎥
⎡ ⎤
⎢ v̂c,1 ⎥
ŷ g
⎢
⎥
⎢ .. ⎥
⎢ ⎥
⎢ . ⎥ = Π2 ⎣ dˆg ⎦ ,
⎢
⎥
⎢ ŷ ⎥
ŵ g
⎢ c,M ⎥
⎢
⎥
⎢ûc,M ⎥
⎢ˆ ⎥
⎣ dc,M ⎦
v̂c,M

29

(32)

Π2T

Π3T

T

with permutation

⎡

⎤
ŷc,1
⎢ û ⎥
⎢ c,1 ⎥
⎢ ˆ ⎥
⎢ dc,1 ⎥
⎢
⎥
⎡ ⎤
⎢ v̂c,1 ⎥
ŷ g
⎢
⎥
⎢ .. ⎥
⎢ ⎥
⎢ . ⎥ = Π3 ⎣ dˆg ⎦ .
⎢
⎥
⎢ ŷ ⎥
ŵ g
⎢ c,M ⎥
⎢
⎥
⎢ûc,M ⎥
⎢ˆ ⎥
⎣ dc,M ⎦
v̂c,M

(33)

Mathematics 2018, 6, 60

By imposing different constraints on the above microgrid-wide supply rate, we can achieve
different performances of the collective behavior of all buildings. In practice, the UG operator mainly
pays attention to the power ﬂow at point of common coupling (PCC) depicted in Figure 1 because it
directly affects the stability and power quality of UG. Instead, the power ﬂows within the microgrid
are usually not of concern on condition that the limits of power distribution lines are taken care of by
distributed controllers.
In the context of microgrid with a high penetration of SG plants, desirable performances at PCC
include: (1) reduced peak-to-peak amplitude of power ﬂow proﬁle; and (2) attenuated amplitude
of rapid power ﬂow ﬂuctuations. To satisfy these two requirements, a frequency weighted H∞
microgrid-wide performance (34) is employed in this paper for the collective behavior of all buildings

W ( z ) y g  2
≤ 1,
 d g 2

(34)

where y g and d g are deﬁned in (31) and W (z) is a frequency dependent weighting function utilized to
penalize the mid to high frequency ﬂuctuations of total power ﬂow of all buildings and the excessive
energy trading by individual buildings. An example of W (z) is
⎡

1
⎢0
⎢
⎢
0
Ω=⎢
⎢
⎢ ..
⎣.
0

W (z) = w(z)Ω,

1
ξ
0
..
.
0

1
0
ξ
..
.
0

...
...
...
..
.
...

⎤
1
0⎥
⎥ 
⎥
0⎥ ⊗ 1
⎥
.. ⎥
.⎦
ξ


1 ,

(35)

⎤
a11 B · · · a1n B
⎢ ..
.. ⎥. The weighting function
..
where the Kronecker operator ⊗ is deﬁned by A ⊗ B = ⎣ .
.
. ⎦
an1 B · · · ann B
w(z) can be chosen as follows to attenuate the high frequency power ﬂuctuations:
⎡

w(z) = K

2T2 (1 − z−1 ) + Ts (1 + z−1 )
,
2T1 (1 − z−1 ) + Ts (1 + z−1 )

(36)

with coefﬁcients Ts , Ti (i = 1, 2) and K representing controller sampling period, time constants and
attenuation gain, respectively. In addition, Ω is a linear transformation matrix that puts weightings on
both the overall power ﬂow at PCC and the net power ﬂow of each individual building as interpreted by
⎡

⎤
PbΣ + PsΣ
⎢ 2
⎥
⎢ Pb + Ps2 ⎥
⎥.
Ωy g = ⎢
..
⎢
⎥
.
⎣
⎦
PbM + PsM

(37)

In this paper, the weightings in (35) are normalized with unity weighting assigned to the overall
power ﬂow at PCC (i.e., PbΣ + PsΣ ) and a small positive weighting of ξ < 1 assigned to the net power
ﬂow of each building. Physically, this means that the penalty on the amplitude of high frequency
power ﬂuctuations is mainly imposed on the overall power ﬂow, while the excessive energy trading
behavior of each building is also constrained.

30

Mathematics 2018, 6, 60

The condition on the microgrid H∞ performance (34) can be reinterpreted into the microgrid
supply rate condition to ensure the minimum performance level of microgrid observed at PCC [33,57].
To illustrate this, the microgrid-wide supply rate is partitioned as follows:
⎡

⎤T ⎡
Λyy
ŷ g
⎢
⎥ ⎢ T
Φ g (ŷ g , dˆg , ŵ g ) = ⎣ dˆg ⎦ ⎣ Λyd
T
ŵ g
Λyw

Λyd
Λdd
T
Λdw

⎤⎡ ⎤
Λyw
ŷ g
⎢ ⎥
Λdw ⎥
⎦ ⎣ dˆg ⎦ .
ŵ g
Λww

(38)

According to [33], the L2 -gain condition in (34) can be converted into the following LMIs:
Λyd = 0, Λyw = 0, Λdw = 0,
Λyy ≤ − N T N, Λdd ≥ D T D, Λww ≤ 0,

(39)

where N = diag {K ( Ts − 2T1 ), K ( Ts + 2T1 )} ⊗ Ω and D = diag { Ts − 2T2 , Ts + 2T2 } ⊗ I M .
4.6. Distributed Control Design and Implmentation
The proposed dissipativity based DEMPC involves two steps:
• Off-line dissipativity synthesis: The dissipativity property for a given system is not unique.
A system can have different supply rates that represent different aspects of the process dynamics
(e.g., the gain and phase conditions). Therefore, dissipativity conditions for all subsystems
including individual buildings, BACS controllers and the pricing controller that allow the
required microgrid-wide stability and performance condition in (34) need to be found during
the ofﬂine design step. This is done by solving LMIs in (19) for dissipativity conditions for
buildings (corresponding to the building model in (18)), feasibility conditions for individual
EMPC controllers in (24), the dissipativity condition for the pricing controller in (28), and the
dissipativity condition representing the microgrid-wide stability and performance in (39)
simultaneously. The outcome of this step is the dissipativity conditions (more speciﬁcally,
the supply rates Qφc,i , Sφc,i and Rφc,i for the i-th controller) that individual EMPC controllers need
to satisfy.
• Online implementation: solve the DEMPC optimization problem in (21) subject to an additional
dissipativity based coordination constraint in (23).
5. Simulation Results
To demonstrate the efﬁcacy of the proposed control framework, a simulation model of microgrid
consisting of eight buildings with AC and SG is developed. These buildings can be divided into four
groups with each two buildings in one group sharing the same thermal parameters. Simulation studies
are carried out based on the illustrative dynamic price scheme presented in Section 3. The data of power
consumption by electrical appliances in buildings are downloaded from Australian Energy Market
Operator (AEMO) [62] and the information of weather conditions, including ambient temperature and
solar radiation, is obtained from the weather station of Murdoch University [63]. For the reference,
proﬁles of the aforementioned data for one building are plotted in Figure 4. Furthermore, the values
of thermal parameters for different types of buildings (with their deﬁnitions given in Table 1) are
given in Table 2. In addition, an exemplary weighting function W (z) is designed by selecting K = 2,
T1 = 2π × 3 rad/h, T2 = 2π
48 rad/h, and ξ = 0.1. The controller sampling period is selected to be
10 min and the online computation time for individual DEMPC controller is less than 10 s, which is
negligible. The small control latency is due to the non-iterative feature of the proposed approach.

31

Mathematics 2018, 6, 60

Table 2. Values of thermal parameters for four types of buildings.
Buildings

Ra

Rd

Rw

R am

Cd

Cw

Ce

μ1

μ2

A

ρ

Type 1
Type 2
Type 3
Type 4

3.26
4.22
3.95
3.54

0.21
0.22
0.23
0.2

0.132
0.142
0.146
0.144

0.0389
0.133
0.12
0.142

76.02
37.04
36.72
32.85

874.94
337
300
312

2767.1
1465.28
1302.5
1310

0.02
0.02
0.02
0.02

0.0075
0.0075
0.0075
0.0075

10500
3600
3200
3200

0.1
0.1
0.1
0.1

(a)

(b)

(c)
Figure 4. Representative proﬁles of: (a) power consumption of electrical appliances (excluding building
air-conditioning systems (BACS)) in building 7 (kW); (b) ambient temperature of building 7 (◦ C);
(c) solar radiation of buiding 1 (kW/m2 ).

Firstly, the dynamic responses of different buildings are simulated by using distributed MPC as
BACS controller without dissipativity based coordination (23). The results are given in Figures 5a
and 6a, from which high amplitude ﬂuctuations are seen in both the dynamic electricity prices and the
overall power ﬂow of microgrid. This is caused by the “selﬁsh” optimizations by distributed BACS
controllers, which formulate a positive feedback loop in energy trading as analyzed in the Introduction.
After implementing the dissipativity based coordination (23), which imposes constraints on the
overall power ﬂow of all participating buildings in the microgrid, comparative simulations are run
under the same conditions of Figures 5a and 6a. The corresponding results are shown in Figures 5b
and 6b. By comparing these four ﬁgures, it is seen that high amplitude ﬂuctuations in electricity prices
and the overall power ﬂow are effectively attenuated, which implies successful mitigation of excessive
energy trading of buildings. Moreover, from the third subplots of Figure 6, it is observable that the
peak-to-peak amplitude of overall power ﬂow is reduced by approximately 50% with the application

32

Mathematics 2018, 6, 60

D PJ

GROODUN:K
GROODUN:K

E PJ

GROODUN:K

D PJ

GROODUN:K
GROODUN:K

E PJ

GROODUN:K

of dissipativity based coordination. This means that coordination of distributed BACS controllers can
reduce microgrid’s energy dependency on UG.

7LPH
+RXU
7LPH +RXU

7LPH
+RXU
7LPH +RXU

(a)

(b)

7RWDO3RZHU)ORZ
RI$OO%XLOGLQJV N:

7RWDO3RZHU)ORZ
RI$OO%XLOGLQJV N:

7RWDO3RZHU6XSSO\
RI$OO%XLOGLQJV N:

7RWDO3RZHU6XSSO\
RI$OO%XLOGLQJV N:

7RWDO3RZHU'HPDQG
RI$OO%XLOGLQJV N:

7RWDO3RZHU'HPDQG
RI$OO%XLOGLQJV N:

Figure 5. Dynamic electricity price for energy trading: (a) with; (b) without dissipativity based coordination.

7LPH +RXU

7LPH +RXU

(b)

(a)

Figure 6. Overall power ﬂow proﬁles of all buildings: (a) without dissipativity based coordination;
(b) with dissipativity based coordination.

To investigate the impact of dissipativity based coordination on the response of individual
buildings, corresponding simulation results are presented in Figure 7, from which it can be seen that
the indoor temperature is kept within the required comfort zone and ﬂuctuations in the total power
ﬂow and the consumption by AC of an individual building is also attenuated.
To further demonstrate the effectiveness of the proposed control framework, the responses of
electricity prices and overall power ﬂow proﬁles are simulated during the weekend. The corresponding
results are given in Figures 8 and 9, from which improvements on the damping of rapid ﬂuctuations
33

Mathematics 2018, 6, 60

and peak-to-peak amplitude of power ﬂow can also be seen in the responses with dissipativity
based coordination.
ZHHNGD\

ZHHNHQG

ZHHNGD\

,QGRRU7HPSHUDWXUH
RI%XLOGLQJ R&

,QGRRU7HPSHUDWXUH
RI%XLOGLQJ R&

3RZHU&RQVXPHGIRU
&RROLQJLQ%XLOGLQJ N:

3RZHU&RQVXPHGIRU
&RROLQJLQ%XLOGLQJ N:

7RWDO3RZHU)ORZ
RI%XLOGLQJ N:

7RWDO3RZHU)ORZ
RI%XLOGLQJ N:

ZHHNHQG

7LPH +RXU

7LPH +RXU

(b)

(a)

Figure 7. Response of building 7: (a) without dissipativity based coordination; (b) with dissipativity
based coordination.
ZHHNGD\

D PJ

GROODUN:K
GROODUN:K

E PJ

ZHHNHQG

GROODUN:K

D PJ

GROODUN:K
GROODUN:K

E PJ

GROODUN:K

ZHHNHQG

ZHHNGD\

7LPH
7LPH +RXU
+RXU

7LPH
7LPH +RXU
+RXU

(b)

(a)

Figure 8. Weekend dynamic electricity prices: (a) without dissipativity based coordination; (b) with
dissipativity based coordination.

34

Mathematics 2018, 6, 60

ZHHNHQG

ZHHNGD\

ZHHNGD\

7RWDO3RZHU)ORZ
RI$OO%XLOGLQJV N:

7RWDO3RZHU)ORZ
RI$OO%XLOGLQJV N:

7RWDO3RZHU6XSSO\
RI$OO%XLOGLQJV N:

7RWDO3RZHU6XSSO\
RI$OO%XLOGLQJV N:

7RWDO3RZHU'HPDQG
RI$OO%XLOGLQJV N:

7RWDO3RZHU'HPDQG
RI$OO%XLOGLQJV N:

ZHHNHQG

7LPH +RXU

7LPH +RXU

(a)

(b)

Figure 9. Weekend overall power ﬂow proﬁles of microgrid: (a) without dissipativity based
coordination; (b) with dissipativity based coordination.

6. Conclusions
This paper proposes a novel distributed control framework for the management of buildings with
air-conditioners and SG in the context of microgrid. It allows the freedom of individually distributed
building air-conditioner controllers in order to minimize their own operating costs, while achieving
appropriate coordination among them to produce desirable overall power ﬂow proﬁle at the PCC.
The effectiveness of the proposed control framework is demonstrated through simulation studies in
comparison with conventional building air-conditioning control without coordination.
Acknowledgments: This work was supported by the Australian Research Council (Discovery Projects DP150103100).
Author Contributions: Xinan Zhang developed the main results, performed the simulation studies and prepared
the initial draft of the paper. Ruigang Wang contributed to the distributed control theoretical developments.
Jie Bao developed the dissipativity based distributed control idea, oversaw all aspects of the research and revised
this manuscript.
Conﬂicts of Interest: The authors declare that they have no conﬂict of interest regarding the publication of the
research article.

References
1.
2.
3.

Tonkoski, R.; Turcotte, D.; El-Fouly, T.H. Impact of high PV penetration on voltage proﬁles in residential
neighborhoods. IEEE Trans. Sustain. Energy 2012, 3, 518–527.
Eftekharnejad, S.; Vittal, V.; Heydt, G.T.; Keel, B.; Loehr, J. Impact of increased penetration of photovoltaic
generation on power systems. IEEE Trans. Power Syst. 2013, 28, 893–901.
Rahouma, A.; El-Azab, R.; Salib, A.; Amin, A.M. Frequency response of a large-scale grid-connected solar
photovoltaic plant. In Proceedings of the SoutheastCon 2015, Fort Lauderdale, FL, USA, 9–12 April 2015;
pp. 1–7.
35

Mathematics 2018, 6, 60

4.
5.
6.

7.
8.
9.
10.
11.
12.

13.
14.

15.
16.
17.
18.
19.
20.
21.

22.
23.
24.
25.
26.
27.
28.
29.

Wang, Y.; Zhang, P.; Li, W.; Xiao, W.; Abdollahi, A. Online overvoltage prevention control of photovoltaic
generators in microgrids. IEEE Trans. Smart Grid 2012, 3, 2071–2078.
Jiang, B.; Muzhikyan, A.; Farid, A.M.; Youcef-Toumi, K. Demand side management in power grid enterprise
control: A comparison of industrial & social welfare approaches. Appl. Energy 2017, 187, 833–846.
Ramchurn, S.D.; Vytelingum, P.; Rogers, A.; Jennings, N. Agent-based control for decentralised demand side
management in the smart grid. In Proceedings of the 10th International Conference on Autonomous Agents
and Multiagent Systems, Taipei, Taiwan, 2–6 May 2011; Volume 1, pp. 5–12.
Bellia, L.; Capozzoli, A.; Mazzei, P.; Minichiello, F. A comparison of HVAC systems for artwork conservation.
Int. J. Refrig. 2007, 30, 1439–1451.
Lauro, F.; Moretti, F.; Capozzoli, A.; Panzieri, S. Model Predictive Control for Building Active Demand
Response Systems. Energy Procedia 2015, 83, 494–503.
Xue, X.; Wang, S.; Yan, C.; Cui, B. A fast chiller power demand response control strategy for buildings
connected to smart grid. Appl. Energy 2015, 137, 77–87.
Qi, W.; Liu, J.; Christoﬁdes, P.D. A distributed control framework for smart grid development: Energy/water
system optimal operation and electric grid integration. J. Process Control 2011, 21, 1504–1516.
Qi, W.; Liu, J.; Chen, X.; Christoﬁdes, P.D. Supervisory predictive control of standalone wind/solar energy
generation systems. IEEE Trans. Control Syst. Technol. 2011, 19, 199–207.
Qi, W.; Liu, J.; Christoﬁdes, P.D. Supervisory predictive control for long-term scheduling of an integrated
wind/solar energy generation and water desalination system. IEEE Trans. Control Syst. Technol. 2012,
20, 504–512.
Qi, W.; Liu, J.; Christoﬁdes, P.D. Distributed supervisory predictive control of distributed wind and solar
energy systems. IEEE Trans. Control Syst. Technol. 2013, 21, 504–512.
Maasoumy, M.; Sanandaji, B.M.; Sangiovanni-Vincentelli, A.; Poolla, K. Model predictive control of
regulation services from commercial buildings to the smart grid. In Proceedings of the 2014 American
Control Conference, Portland, OR, USA, 4–6 June 2014; pp. 2226–2233.
Zhang, W.; Lian, J.; Chang, C.Y.; Kalsi, K. Aggregated modeling and control of air-conditioning loads for
demand response. IEEE Trans. Power Syst. 2013, 28, 4655–4664.
Bashash, S.; Fathy, H.K. Modeling and control of aggregate air-conditioning loads for robust renewable
power management. IEEE Trans. Control Syst. Technol. 2013, 21, 1318–1327.
Liu, M.; Shi, Y. Model predictive control of aggregated heterogeneous second-order thermostatically
controlled loads for ancillary services. IEEE Trans. Power Syst. 2016, 31, 1963–1971.
Touretzky, C.R.; Baldea, M. Integrating scheduling and control for economic MPC of buildings with energy
storage. J. Process Control 2014.
Soroush, M.; Chmielewski, D.J. Process systems opportunities in power generation, storage and distribution.
Comput. Chem. Eng. 2013, 51, 86–95.
Chen, X.; Heidarinejad, M.; Liu, J.; Christoﬁdes, P.D. Distributed economic MPC: Application to a nonlinear
chemical process network. J. Process Control 2012, 22, 689–699.
Vytelingum, P.; Voice, T.D.; Ramchurn, S.D.; Rogers, A.; Jennings, N.R. Agent-based micro-storage
management for the smart grid. In Proceedings of the 9th International Conference on Autonomous
Agents and Multiagent Systems, Toronto, ON, Canada, 10–14 May 2010; pp. 39–46.
Maity, I.; Rao, S. Simulation and pricing mechanism analysis of a solar-powered electrical microgrid.
IEEE Syst. J. 2010, 4, 275–284.
Stephens, E.R.; Smith, D.B.; Mahanti, A. Game theoretic model predictive control for distributed energy
demand-side management. IEEE Trans. Smart Grid 2015, 6, 1394–1402.
Willems, J.C. Dissipative dynamical systems part I: General theory. Arch. Ration. Mech. Anal. 1972,
45, 321–351.
Weiland, S.; Willems, J.C. Dissipative dynamical systems in a behavioral context. Math. Models Methods Appl.
Sci. 1991, 1, 1–25.
Hill, D.; Moylan, P. Stability Results for Nonlinear Feedback Systems. Automatica 1977, 13, 377–382.
Moylan, P.; Hill, D. Stability criteria for large-scale systems. IEEE Trans. Autom. Control 1978, 23, 143–149.
Xu, S.; Bao, J. Distributed control of plantwide chemical processes. J. Process Control 2009, 19, 1671–1687.
Xu, S.; Bao, J. Control of chemical processes via output feedback controller networks. Ind. Eng. Chem. Res.
2010, 49, 7421–7445.
36

Mathematics 2018, 6, 60

30.
31.
32.
33.
34.
35.
36.
37.

38.
39.
40.
41.
42.

43.

44.
45.

46.

47.
48.
49.

50.
51.
52.
53.
54.

Tippett, M.J.; Bao, J. Dissipativity based distributed control synthesis. J. Process Control 2013, 23, 755–766.
Tippett, M.J.; Bao, J. Control of plant-wide systems using dynamic supply rates. Automatica 2014, 50, 44–52.
Willems, J.; Trentelman, H. On quadratic differential forms. SIAM J. Control Optim. 1998, 36, 1703–1749.
Tippett, M.J.; Bao, J. Distributed model predictive control based on dissipativity. AIChE J. 2013, 59, 787–804.
Yu, Z.; Jia, L.; Murphy-Hoye, M.C.; Pratt, A.; Tong, L. Modeling and stochastic control for home energy
management. IEEE Trans. Smart Grid 2013, 4, 2244–2255.
Hazyuk, I.; Ghiaus, C.; Penhouet, D. Optimal temperature control of intermittently heated buildings using
Model Predictive Control: Part I–Building modeling. Build. Environ. 2012, 51, 379–387.
Ghosh, S.; Reece, S.; Rogers, A.; Roberts, S.; Malibari, A.; Jennings, N.R. Modeling the Thermal Dynamics of
Buildings: A Latent-Force-Model-Based Approach. ACM Trans. Intell. Syst. Technol. 2015, 6, 7.
Ma, Y.; Anderson, G.; Borrelli, F. A distributed predictive control approach to building temperature regulation.
In Proceedings of the 2011 American Control Conference, San Francisco, CA, USA, 29 June–1 July 2011; pp.
2089–2094.
Thavlov, A.; Bindner, H.W. Thermal models for intelligent heating of buildings. In Proceedings of the
International Conference on Applied Energy, Suzhou, China, 5–8 July 2012.
Haghighi, M.M. Controlling Energy-Efﬁcient Buildings in the Context of Smart Grid: A Cyber Physical
System Approach. Ph.D. Thesis, EECS Department, University of California, Berkeley, CA, USA, 2013.
Nasution, H.; Hassan, M.N.W. Potential electricity savings by variable speed control of compressor for
air-conditioning systems. Clean Technol. Environ. Policy 2006, 8, 105–111.
Hunt, W.; Amarnath, A. Cooling Efﬁciency Comparison between Residential Variable Capacity and Single
Speed Heat Pump. ASHRAE Trans. 2013, 119, Q1.
Funami, K.; Nishi, H. Evaluation of power consumption and comfort using inverter control of
air-conditioning. In Proceedings of the 37th Annual Conference on IEEE Industrial Electronics Society,
Melbourne, VIC, Australia, 7–10 November 2011; pp. 3236–3241.
Energy of the Environment Air Conditioners. 2016. Available online: http://www.energyrating.gov.
au/products/space-heating-and-cooling/air-conditioners (Australian Government Equipment Energy
Efﬁciency Program) (accessed on 24 April 2016).
Lokanadham, M.; Bhaskar, K.V. Incremental conductance based maximum power point tracking (MPPT) for
photovoltaic system. Int. J. Eng. Res. Appl. 2012, 2, 1420–1424.
Ma, J.; Qin, S.J.; Salsbury, T. Experimental study of economic model predictive control in building energy
systems. In Proceedings of the 2013 American Control Conference, Washington, DC, USA, 17–19 June 2013;
pp. 3753–3758.
Putta, V.; Zhu, G.; Kim, D.; Hu, J.; Braun, J. Comparative evaluation of model predictive control strategies for
a building HVAC system. In Proceedings of the 2013 American Control Conference, Washington, DC, USA,
17–19 June 2013; pp. 3455–3460.
Ma, J.; Qin, S.J.; Salsbury, T. Application of economic MPC to the energy and demand minimization of a
commercial building. J. Process Control 2014, 24, 1282–1291.
Brundage, M.P.; Chang, Q.; Li, Y.; Xiao, G.; Arinez, J. Energy efﬁciency management of an integrated serial
production line and HVAC system. IEEE Trans. Autom. Sci. Eng. 2014, 11, 789–797.
Braun, P.; Grüne, L.; Kellett, C.M.; Weller, S.R.; Worthmann, K. A real-time pricing scheme for residential
energy systems using a market maker. In Proceedings of the 2015 5th Australian Control Conference (AUCC),
Gold Coast, Australia, 5–6 November 2015; pp. 259–262.
Ito, K. Nonlinear Pricing in Energy and Environmental Markets. Ph.D. Thesis, Agricultural & Resource
Economics, University of California, Berkeley, CA, USA, 2011.
Okawa, Y.; Namerikawa, T. Distributed dynamic pricing based on demand-supply balance and voltage
phase difference in power grid. Control Theory Technol. 2015, 13, 90–100.
Yang, L.; Dong, C.; Wan, C.J.; Ng, C.T. Electricity time-of-use tariff with consumer behavior consideration.
Int. J. Prod. Econ. 2013, 146, 402–410.
Rowlands, I.H.; Furst, I.M. The cost impacts of a mandatory move to time-of-use pricing on residential
customers: An Ontario (Canada) case-study. Energy Efﬁc. 2011, 4, 571–585.
Matters, E. Feed-in Tariff for Grid-Connected Solar Power Systems. 2011. Available online: http://www.
energymatters.com.au/rebates-incentives/feedintariff (accessed on 15 September 2015).

37

Mathematics 2018, 6, 60

55.
56.

57.

58.

59.
60.
61.
62.
63.

Matters, E. Battery Storage And Solar Feed in Tariffs—State Of Play. 2015. Available online: http://www.
energymatters.com.au/renewable-news/solar-ﬁt-batteries-em5074/ (accessed on 15 September 2015).
Muzmar, M.; Abdullah, M.; Hassan, M.; Hussin, F. Time of Use pricing for residential customers case of
Malaysia. In Proceedings of the 2015 IEEE Student Conference on Research and Development (SCOReD),
Kuala Lumpur, Malaysia, 13–14 December 2015; pp. 589–593.
Zhang, X.; Bao, J.; Wang, R.; Zheng, C.; Skyllas-Kazacos, M. Dissipativity based distributed economic model
predictive control for residential microgrids with renewable energy generation and battery energy storage.
Renew. Energy 2017, 100, 18–34.
Kojima, C.; Takaba, K. A generalized Lyapunov stability theorem for discrete-time systems based on quadratic
difference forms. In Proceedings of the 44th IEEE Conference on Decision and Control, Seville, Spain,
15 December 2005; pp. 2911–2916.
Parrilo, P.A. Structured Semideﬁnite Programs and Semialgebraic Geometry Methods in Robustness and
Optimization. Ph.D. Thesis, California Institute of Technology, Pasadena, CA, USA, 2000.
Löfberg, J. YALMIP: A toolbox for modeling and optimization in MATLAB. In Proceedings of the CACSD
Conference, Taipei, Taiwan, 2–4 September 2004; pp. 284–289.
Sturm, J.F. Using SeDuMi 1.02, a MATLAB toolbox for optimization over symmetric cones.
Optim. Methods Softw. 1999, 11, 625–653.
Fan, S.; Hyndman, R.J. Short-term load forecasting based on a semi-parametric additive model. IEEE Trans.
Power Syst. 2012, 27, 134–141.
Station, M.U.W. 2017. Available online: http://wwwmet.murdoch.edu.au/downloads (accessed on
24 April 2016).
c 2018 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access

article distributed under the terms and conditions of the Creative Commons Attribution
(CC BY) license (http://creativecommons.org/licenses/by/4.0/).

38

mathematics
Article

Economic Model Predictive Control with
Zone Tracking
Su Liu and Jinfeng Liu *
Department of Chemical & Materials Engineering, University of Alberta, Edmonton, AB T6G 2V4, Canada;
su7@ualberta.ca
* Correspondence: jinfeng@ualberta.ca; Tel.: +1-780-492-1317
Received: 1 April 2018; Accepted: 23 April 2018; Published: 25 April 2018

Abstract: In this work, we propose a framework for economic model predictive control (EMPC)
with zone tracking. A zone tracking stage cost is incorporated into the existing EMPC framework
to form a multi-objective optimization problem. We provide sufﬁcient conditions for asymptotic
stability of the optimal steady state and characterize the exact penalty for the zone tracking cost
which prioritizes zone tracking objective over economic objective. Moreover, an algorithm to modify
the target zone based on the economic performance and reachability of the optimal steady state is
proposed. The modiﬁed target zone effectively decouples the dynamic zone tracking and economic
objectives and simpliﬁes parameter tuning.
Keywords: predictive control; process optimization; soft constraint; zone control

1. Introduction
Process control of chemical plants needs to address a number of objectives including safety,
environmental regulations, product quality, energy efﬁciency, proﬁtability, etc. Based on the emphasis
of the control objectives in practice, three elements or three facets of control exist [1]: regulatory control,
constraint control and maneuvering control. Regulatory control refers to the conventional setpoint
tracking control which minimizes the variance of controlled variables to the setpoint. Constraint control,
or zone control, prevents the system from violating its boundary and steers the system back into the
zone whenever constraint violation happens. No control action is required if the system is (predicted
to be) in the target zone. Maneuvering control moves the system from the current operating point to
a new operating point, typically due to economic considerations or change of operating conditions.
Generally speaking, a well designed control system necessarily integrates all three control types,
although emphasis on the three facets of control may vary from application to application.
Model predictive control (MPC) has been the most widely applied advanced control technique.
The ability to handle constraints and to incorporate economic considerations makes MPC an ideal
platform for integrating different control objectives. The literature is rich with theories for conventional
setpoint tracking MPC ([2]). The past decade has seen an increasing academic interest in economic
model predictive control (EMPC) ([3–6]) which integrates economic objectives into regulatory setpoint
tracking control. On the contrary, zone control has received less attention. In the MPC framework,
zone control is usually dealt with by the so-called soft constraint technique ([7–11]). As its name
suggests, soft constraint is often dismissed as a trick to avoid feasibility issue with hard constraint,
and is discussed separately from set-point tracking and economic objectives. To the best of the
authors’ knowledge, only a few MPC frameworks explicitly handle zone tracking objectives ([12–14]).
A practical challenge for the design and implementation of an integrated control system is the difﬁculty
in parameter tunning. How to tradeoff different control objectives via the tuning parameters to get the
desired closed-loop performance is crucial to the successful implementation of any control framework.

Mathematics 2018, 6, 65; doi:10.3390/math6050065

39

www.mdpi.com/journal/mathematics

Mathematics 2018, 6, 65

In this work, we propose an EMPC framework with integrated zone control. A zone tracking
stage cost which penalizes a weighted l1 norm and squared l2 norm distance to the target zone is
incorporated into the EMPC framework to form a multi-objective optimization problem. We provide
sufﬁcient conditions for asymptotic stability of the optimal steady state and characterize the exact
penalty for the zone tracking cost which prioritizes the zone tracking objective over the economic
objective. Moreover, we propose an algorithm to modify the target zone based on the economic
performance and reachability of the optimal steady state in the target zone. The modiﬁed target
zone is constructed as an invariant subset of the original target zone in which closed-loop transient
economic performance is guaranteed. EMPC with the modiﬁed target zone effectively decouples the
zone tracking and economic objectives and enjoys a simpliﬁed and more transparent parameter tuning
procedure. Finally, two numerical examples are investigated which reveal the intrinsic difﬁculties
in parameter tunning for EMPC with zone tracking and demonstrate the efﬁcacy of the proposed
approach.
2. Problem Setup
2.1. Notation

1/p
Throughout this work,  x  p denotes the l p norm of the vector x such that  x  p = ∑ | x (i) | p
.
The operator | · | denotes the l2 norm or Euclidean norm of a scalar or a vector. The symbol I N
M
denotes the set of integers { M, M + 1, ..., N }. The symbol I≥0 denotes the set of non-negative integers
{0, 1, 2, ...}. The symbol projX (O) denotes projection of the set O onto its subspace X. A function
l ( x ) : X → R is said to be positive deﬁnite with respect to a set Xt ⊂ X, if l ( x ) = 0 for all x ∈ Xt and
l ( x ) > 0 otherwise.
2.2. System Description and Control Objective
We consider the following nonlinear discrete time system:
x (n + 1) = f ( x (n), u(n))

(1)

where x (n) ∈ X ⊂ Rnx , u(n) ∈ U ⊂ Rnu , n ∈ I≥0 , denote the state and input at time n, respectively.
The vector function f (·) : Rnx × Rnu → Rnx is continuous. The system is subject to coupled state and
input constraint:
( x (n), u(n)) ∈ Z ⊆ X × U,
n ∈ I≥0
where X, U, Z are all compact sets. The primary control objective is to steer and maintain the system in a
compact set Zt ⊂ Z. The distance to the target zone is measured by the function z ( x (n), u(n)) : Z → R
which is positive deﬁnite with respect to the target zone Zt . There is also a secondary economic
objective to minimize the operational cost characterized by the function e ( x, u) : Z → R. Both z (·)
and e (·) are continuous functions. Since zone tracking objectives are usually associated with important
process speciﬁcations concerning safety or product quality, an ideal control strategy should satisfy
zone objectives whenever possible and allow zone tracking violation only for a short period of
time. This leads to the following formal statement of the control objective as an inﬁnite-horizon
optimization problem:
min
s.t.

∞

K

∑ e ( x (n), u(n)) + ∑ z ( x (n), u(n)) + K

n =0

n =0

( x (n), u(n)) ∈ Z,

n ∈ I≥0

( x (n), u(n)) ∈ Zt ,

n ≥ K+1

40

(2)

Mathematics 2018, 6, 65

The above optimization problem optimizes the economic performance over an inﬁnite horizon
and minimizes the zone tracking error for the ﬁrst K time steps when the system is outside the
target zone Zt . When the system is steered into the target zone, the zone tracking error z (·) is zero.
The duration of zone target violation K is also an explicit objective which ensures that the zone tracking
objective is satisﬁed in ﬁnite time. The optimization of Equation (2) is essentially a multi-objective
optimization problem in which the magnitude, duration of zone target violation, as well as the
economic performance are traded off.
For simplicity of exposition, we assume that the optimization of Equation (2) is well deﬁned.
This implies that the system can be steered to the target zone Zt in ﬁnite time without violating the
constraint. Moreover, the inﬁnite sum ∑∞
n=0 e ( x ( n ), u ( n )) is bounded. This condition is satisﬁed for
strictly dissipative systems if we assume without loss of generality that the economic performance at
the optimal steady state is zero [6].
Let ( xs , us ) denote the economically optimal steady state in the target zone Zt . That is:

( xs , us ) = arg min e ( x, u)
x,u

s.t.

x = f ( x, u)

(3)

( x, u) ∈ Zt
We assume that ( xs , us ) uniquely solves the above steady-state optimization problem. Note that
the economic cost function e (·) is not necessarily positive deﬁnite with respect to ( xs , us ).
3. EMPC with Zone Tracking
In this section, we propose a general framework for EMPC with zone tracking to tackle the
inﬁnite-horizon optimization problem in Equation (2). The EMPC is formulated as a ﬁnite horizon
optimization problem which is solved repeatedly in a receding horizon fashion to approximate the
optimal solution to Equation (2). We provide sufﬁcient conditions for asymptotic stability of the
optimal steady state and discuss how zone tracking can be prioritized using exact penalty.
3.1. EMPC Formulation
At a sampling time n, the EMPC is formulated as the following finite-horizon optimization problem:
min

u0 ,··· ,u N −1

s.t.

∑iN=−0 1 e ( xi , ui ) + z ( xi , ui )

(4)

xi+1 = f ( xi , ui ), i ∈ I0N −1

(5)

x0 = x ( n )

(6)

( xi , ui ) ∈ Z, i ∈ I0N −1

(7)

x N = xs

(8)

In the above optimization, the objective function Equation (4) minimizes the zone tracking
error and economic performance over a ﬁnite horizon of N steps, Equation (5) is the system
model, Equation (6) speciﬁes the initial condition, Equation (7) sets the state and input constraints.
The point-wise terminal constraint Equation (8) requires the terminal state to arrive at the optimal
steady state xs after N steps. This implicitly imposes constraint on the duration of zone objective
violation (K in Equation (2)).
Let u∗ (i |n), i ∈ I0N −1 denote the optimal solution. The input injected to the system at time n is:
u(n) = u∗ (0|n). At the next sampling time n + 1, the optimization of Equation (4) is re-evaluated,
generating an implicit feedback control law u(n) = κ N ( x (n)). We denote the feasibility region of
the optimization problem of Equation (4) by X N . Due to the terminal constraint Equation (8), X N is

41

Mathematics 2018, 6, 65

forward invariant under the EMPC design. In other words, the EMPC design is recursively feasible.
The zone tracking penalty z ( x, u) is deﬁned by the following function:

z ( x, u) = min
c1 ( x − x z 1 + u − uz 1 ) + c2 ( x − x z 22 + u − uz 22 )
z z
x ,u

s.t.

( x z , u z ) ∈ Zt

(9)

where c1 and c2 are positive scalars. The zone tracking penalty deﬁned in Equation (9) is formulated
implicitly as an optimization problem which minimizes weighted l1 norm and squared l2 norm distance
from the point ( x, u) to the target zone Zt . The distance to the target zone is evaluated by introducing
artiﬁcial variables ( xz , uz ) which are bounded in the target zone Zt . It is easy to verify that z ( x, u)
deﬁned in Equation (9) is positive deﬁnite with respect to the target zone Zt . When the zone tracking
penalty of Equation (9) is used, Equation (4) is equivalent to the following optimization problem:
min

ui ,xiz ,uiz

s.t.






2 
2
∑ e ( xi , ui ) + c1 ( xi − xiz 1 + ui − uiz 1 ) + c2 ( xi − xiz 2 + ui − uiz 2 )

N −1
i =0

xi+1 = f ( xi , ui ), i ∈ I0N −1
x0 = x ( n )

( x i , u i ) ∈ Z, i ∈

(10)

I0N −1

x N = xs

( xiz , uiz ) ∈ Zt , i ∈ I0N −1
Remark 1. The incorporation of the l1 norm penalty allows for the so-called exact penalty which will be
discussed in Section 3.3. From a multi-objective optimization point of view, the combined use of the linear
(l1 norm) penalty and quadratic (squared l2 norm) penalty offers a way to trade off the magnitude and duration
of zone tracking violation [7]. Larger linear penalty may, though not necessarily, result in more drastic control
move with smaller duration of zone tracking violation. On the contrary, quadratic penalty generally leads to
mild control action with smaller zone tracking violation but larger duration of violation. These results will be
demonstrated in the simulation.
Remark 2. A well-known technique to address the feasibility issues in MPC is to employ the so-called soft
constraint where slack variables are introduced to relax hard (state) constraint. Interested readers may refer
to [7,9] which provide comprehensive discussions on constraint relaxation of MPC using soft constraint. Let the
target zone Zt be characterized by Zt := {( x, u) : g( x, u) ≤ 0} where g( x, u) : Rnx × Rnu → Rny . When soft
constraint is used, the penalty for constraint violation has the following form:

s ( x, u) = min c1 s1 + c2 s22
s

s.t.

g( x, u) ≤ s

The function s ( x, u) deﬁned above is also positive deﬁnite with respect to the target zone Zt . Note that the
zone tracking penalty s ( x, u) is different from z ( x, u) in Equation (9). In the above example, implementing
the soft-constraint penalty s ( x, u) requires ny artiﬁcial variables whereas for z ( x, u) the number is n x + nu .
The soft-constraint penalty s ( x, u) may be better described as an output zone tracking penalty (considering
y = g( x, u) as the system output) whereas z ( x, u) in Equation (9) is a zone tracking penalty for system state
and input. The pros and cons of state zone tracking against output zone tracking calls for further investigation.
One advantage of using the state zone tracking penalty z ( x, u) is that it allows set-theoretic method ([15])
in the EMPC design. In Section 4 an algorithm based on set-theoretic method will be proposed to modify the
target zone.

42

Mathematics 2018, 6, 65

3.2. Stability Analysis
In the following, we establish sufﬁcient conditions for asymptotic stability of the optimal steady
state xs .
Deﬁnition 1. (Strictly dissipative systems) The system of Equation (1) is strictly dissipative with respect to the
supply rate s : X × U → R if there exists a continuous storage function λ(·) : X → R and a K∞ function
α1 (·) such that the following holds for all x ∈ X and u ∈ U:
λ( f ( x, u)) − λ( x ) ≤ s( x, u) − αl (| x − xs |)
Assumption 1. (Strict dissipativity, [16]) The system of Equation (1) is strictly dissipative with respect to the
supply rate s( x, u) = e ( x, u) − e ( xs , us )
Assumption 2. (weak controllability, ([17])) There exists a K∞ function γ(·) such that for all x ∈ X N ,
there exists a feasible solution to Equation (4) such that:
N −1

∑

|ui − us | ≤ γ(| x − xs |)

i =0

Theorem 1. If Assumptions 1 and 2 hold, then the optimal steady state xs is asymptotically stable under the
EMPC of Equation (4) with a region of attraction X N .
Proof. To proceed, we deﬁne the rotated cost ¯ e ( x, u) as:

¯ e ( x, u) = e ( x, u) − e ( xs , us ) + λ( x ) − λ( f ( x, u))

(11)

From Assumption 1, the rotated cost satisﬁes

¯ e ( x, u) ≥ αl (| x − xs |)

(12)

Substitute Equation (11) into the Equation (4), the optimization problem of Equation (4) can be
equivalently written as follows:
min

u0 ,··· ,u N −1

s.t.

N −1

∑ ¯ e ( xi , ui ) + z ( xi , ui ) − λ( x0 ) + λ( x N ) + N e ( xs , us )

i =0

xi+1 = f ( xi , ui ), i ∈ I0N −1
x0 = x ( n )

( xi , ui ) ∈ Z, i ∈ I0N −1
x N = xs
The last three terms in the objective function of the above optimization are all constant and can be
dropped (because of constraints Equations (6) and (8)). The above optimization is then reduced to:
V ( x (n)) =

min

u0 ,··· ,u N −1

s.t.

N −1

∑ L ( xi , ui )

i =0

xi+1 = f ( xi , ui ), i ∈ I0N −1
x0 = x ( n )

( xi , ui ) ∈ Z, i ∈ I0N −1
x N = xs

43

Mathematics 2018, 6, 65

where L( x, u) = ¯ e ( x, u) + z ( x, u). Since L(·) is non-negative and taking into Equation (12), we have:
V ( x (n)) ≥ L( x0 , u0 ) = ¯ e ( x0 , u0 ) + z ( x0 , u0 ) ≥ ¯ e ( x0 , u0 ) ≥ αl (| x (n) − xs |)

(13)

Moreover, Assumption 2 implies the existence of a K∞ function β(·) such that (see [17] Appendix):
V ( x (n)) ≤ β(| x (n) − xs |)

(14)

Finally, the value function V ( x (n)) is strictly non-increasing and satisﬁes:
V ( x (n + 1)) − V ( x (n)) ≤ − L( x (n), u(n)) ≤ −αl (| x (n) − xs |)

(15)

Equations (13)–(15) makes the value function V ( x (n)) a Lyapunov function with respect to the
optimal steady state xs . Therefore the optimal steady state xs is asymptotically stable.
Remark 3. If the optimal steady state lies in the interior of the target zone, then asymptotic stability of the
optimal steady state implies ﬁnite-time convergence into the target zone. However, if the optimal steady state is
on the boundary of the target zone, asymptotic stability of the optimal steady state does not imply ﬁnite-time
convergence to the target zone. One way to still achieve nominal ﬁnite-time convergence to the target zone is
to implement the whole predicted input sequence instead of only the ﬁrst element. That is, u(n + i ) = u∗ (i |n)
for i ∈ I0N −1 . At the sampling time n + N, re-evaluate the optimization of Equation (4) based on the state
measurement x (n + N ). Due to the terminal constraint, the nominal system will reach the optimal steady state
in N steps. Another way is to employ sufﬁciently large l1 norm zone tracking penalty (large c1 ) which is known
to result in deadbeat control policy ([18]).
3.3. Prioritized Zone Tracking
In practice, zone control objectives are usually associated with important or urgent objectives
such as operation safety and product speciﬁcation. Thus a natural question to ask is how to pick the
zone tracking penalty such that the zone tracking is prioritized over the economic objective? In other
words, how to ensure that the system stays in the target zone whenever possible? The answer has to
do with the so-called exact penalty function. To proceed with the discussion, we introduce the concept
of the dual norm:
Deﬁnition 2. (dual norm) Consider the p norm of a vector u, u p , p ∈ I≥0 . We refer to uq as the dual
norm of u p where uq is deﬁned as follows:

uq := max u T v
v≤1

It can be veriﬁed that ·1 is the dual norm of ·∞ and vice versa. Consider the following
constrained optimization problem:
min V (u)
u
(16)
s.t. g(u) ≤ 0
The above hard-constraint optimization problem can be recast as the following soft-constraint
optimization problem:
min V (u) + c  p
u,
(17)
s.t. g(u) ≤ 

44

Mathematics 2018, 6, 65

where c is a positive scalar. It is conceivable that if the penalty c is sufﬁciently large, then the solution
to the Equation (17) will be identical to Equation (16). The following well-known result speciﬁes how
large is sufﬁciently large for c:
Theorem 2. Consider the optimization of Equations (16) and (17). Assume that the solutions to both problems
satisfy second-order sufﬁcient conditions, and let λ denote the vector of the Lagrange multipliers of Equation (16).
If c > λq where ·q is the dual norm of · p , then the solutions to Equations (16) and (17) are identical.
Proof. The proof can be found in [19] Theorem 14.3.1.
Any penalty function satisfying the conditions in Theorem 2 is called the exact penalty function.
When exact penalty is used, the soft-constraint optimization problem has the same solution as the
original problem. This means that if we treat the feasibility region, { x | g( x ) ≤ 0}, as the target zone
and the penalty, c  p , as the zone tracking penalty, the exact penalty prioritizes the zone tracking
objective over the economic objective.
Remark 4. The exact penalty function problem for Equation (16) is usually written in the following form:
min V (u) + c max{0, g(u)} p
u

The above formulation is equivalent to the problem of Equation (17). With slight abuse of language, we
refer to the soft-constraint formulation in Equation (17) with c > λq as the exact penalty. Essentially what
allows the exact penalty to be exact or to prioritize the constraint objective is the non-smoothness of the penalty
function at  = 0. In the case of equality constraint, the same result applies since one can also treat h(u) = 0
as a set of inequality constraints h(u) ≤ 0 and − h(u) ≤ 0. In this case, the exact penalty function problem
becomes: min V (u) + c  h(u) p
u

In the light of Theorem 2, we can construct the following optimization problem in which zone
tracking is made the hard constraint:
min

ui ,xiz ,uiz

s.t.

N −1

∑ e ( xi , ui )

i =0

xi+1 = f ( xi , ui ), i ∈ I0N −1
x0 = x ( n )

( xi , ui ) ∈ Z, i ∈ I0N −1

(18)

x N = xs

( xiz , uiz ) ∈ Zt , i ∈ I0N −1
xi = xiz , i ∈ I0N −1
ui = uiz , i ∈ I0N −1
To make the statement of the ﬁnal result more compact, we employ the deﬁnition of the N-step
reachable set [20]:
Deﬁnition 3. (N-step reachable set) We use X N (Zt , xs ) to denote the set of states that can be steered to X f in
N steps while satisfying the state and input constraints ( x, u) ∈ Zt . That is,


X N (Zt , xs ) = x (0) | ∃ ( x (n), u(n)) ∈ Zt , n ∈ I0N −1 , x ( N ) = xs
Based on the above deﬁnition, the EMPC is capable of maintaining the system in the target zone
only if x (0) ∈ X N (Zt , xs ). Now we are ready to state and prove the ﬁnal result:
45

Mathematics 2018, 6, 65

Theorem 3. Let λ denote the Lagrange multiplier of the optimization of Equation (18). If x (n) ∈ X N (Zt , xs )
and c1 > λ∞ , then the solutions to the MPC of Equations (10) and (18) are identical.
Proof. We provide a sketch of the proof. Consider the exact penalty problem of Equation (18) with
p = 1 and q = ∞ in Theorem 2. Since c1 > λ∞ , it can be veriﬁed that the optimization of Equation (18)
is equivalent to the following optimization problem:




∑ e ( xi , ui ) + c1 ( xi − xiz 1 + ui − uiz 1 )

N −1

min
z z

ui ,xi ,ui

i =0

(5) − (8)

s.t.

( xiz , uiz ) ∈ Zt , i ∈ I0N −1
Since the optimal solution satisﬁes xi = xiz and ui = uiz for i ∈ I0N −1 , adding the quadratic

2 
2
terms c2 ( xi − x z  + ui − uz  ) to the stage cost does not change the optimal solution to the above
i

2

i

2

optimization problem. This implies that the solutions to the MPC of Equation (10) and Equation (18)
are identical.
Theorem 3 implies that if the l1 norm penalty c1 is sufﬁciently large, then the zone tracking
objective is prioritized over the economic objective. Note that the constraints (18c)–(18e) can be
combined by canceling the slack variables xiz and uiz into the compact form:

( xi , ui ) ∈ Zt , i ∈ I0N −1
Thus the EMPC of Equation (18) yields the same solution to the following EMPC constrained by
the target zone:
min
∑iN=−0 1 e ( xi , ui )
u0 ,··· ,u N −1

s.t.

xi+1 = f ( xi , ui ), i ∈ I0N −1
(19)

x0 = x ( n )

( x i , u i ) ∈ Zt , i ∈

I0N −1

x N = xs
The constraint (6) is removed because Zt ⊂ Z. Therefore, sufﬁciently large l1 norm penalty term




c1 ( xi − xiz 1 + ui − uiz 1 ) in effect can convert the zone tracking objective into hard constraints
( xi , ui ) ∈ Zt whenever possible.
Remark 5. Note that exact penalty cannot be achieved by the quadratic term c2 ( x − x z 22 + u − uz 22 ) unless
c2 can be made inﬁnitely large [9]. Note also that to ensure x (n) ∈ Zt for all n ∈ I≥0 and x (0) ∈ X N (Zt , xs ),
the condition c1 > λ∞ needs to be satisﬁed for Lagrange multipliers λ associated with all x (n) ∈ X N (Zt , xs ).
Finding the exact lower bound for such c1 is in general difﬁcult. The task is possible for linear systems with
quadratic tracking costs and polyhedral constraints ([8]).
4. Modiﬁed Target Zone
The EMPC with zone tracking framework discussed in Section 3 is applicable to a broad class of
control systems with multiple objectives involving economic optimization, zone tracking or setpoint
tracking. A challenging problem in practice that largely affects the performance of MPC is parameter
tuning. Speciﬁcally, for the EMPC of Equation (10), how does one pick c1 and c2 such that the
closed-loop system achieves the desired tradeoff between magnitude and duration of zone tracking
violation as well as economic performance? As a rule of thumb, if the zone objective is more important
than economic objective, one should pick sufﬁciently large c1 such that it makes zone tracking the exact

46

Mathematics 2018, 6, 65

penalty, and tune c2 relative to c1 to tradeoff magnitude and duration of constraint violation. While this
method suits most scenarios, for certain systems which we will show in the simulation, naive choice of
a large zone tracking penalty may lead to arbitrarily poor transient economic performance.
Parameter tuning can be a challenging task for a number of reasons: (i) the number of tuning
parameters can be large depending on the number of system states and inputs. In the EMPC
formulation Equation (10), we have lumped all tuning parameters into two parameters, c1 and
c2 , for simplicity of exposition. Note that in principle each element of the system state and input
may be assigned a weight, for quadratic penalty a weighting matrix may be used; (ii) there is a
lack of transparency in the relationship between closed-loop performance and tuning parameters;
(iii) the difﬁculty may be intrinsic to the problem. That is, suitable tuning parameters may vary under
different conditions or states. These will be illustrated in the simulation example.
Motivated by the above considerations, we propose an algorithm to modify the target zone.
The idea is to construct a modiﬁed target zone which is an invariant subset of the original target zone
in which closed-loop transient economic performance is guaranteed. In this way, EMPC tracking the
modiﬁed target zone will have guaranteed economic performance once the system is in the modiﬁed
target zone. Moreover, under exact zone tracking penalty, the closed-loop system will not leave
the target zone once it enters. EMPC tracking the modiﬁed target zone allows the user to tradeoff
magnitude and duration of zone tracking violation by tuning c1 and c2 without worrying about poor
transient economic performance. The proposed algorithm is outlined below:
Algorithm 1: Modiﬁed target zone.
1. Choose some M ∈ I1N and α ≥ 0
2. Set Z0 = ( xs , us )
3. for i = 0 : M − 1
Calculate Zi+1 with Equation. (20)
end
4. The modiﬁed target zone is Zt = Z M

Zi + 1

⎧
⎪
⎨

⎫
⎪
⎬
 f ( x, u) ∈ projX (Zi )

= ( x, u)  e ( x, u) ≤ e ( xs , us ) + α
⎪
⎪
⎩
⎭
( x, u) ∈ Zt

(20)

The modiﬁed target zone Zt , obtained by Algorithm 1 is a zone in which the system can be steered
to the optimal steady state in M steps in the target zone Zt while the economic performance of each
step is upper bounded by e ( xs , us ) + α. Once the modiﬁed target zone is obtained, the EMPC of
Equation (10) may be implemented with the original target zone Zt replaced by the modiﬁed target
zone Zt . The properties of the EMPC that tracks the modiﬁed target zone Zt are summarized in the
following theorem:
Theorem 4. Consider the system of Equation (1) under the EMPC of Equation (10) with the target zone Zt
replaced with the modiﬁed target zone Zt and x (0) ∈ X N (Zt , xs ).
(i)

If c1 is an exact zone tracking penalty for Zt for all x (n) ∈ X N (Zt , xs ), then the modiﬁed target zone is
forward invariant under the closed-loop system. That is,

( x (n), u(n)) ∈ Zt =⇒ ( x (n + 1), u(n + 1)) ∈ Zt

47

Mathematics 2018, 6, 65

(ii)

If in addition Assumptions 1 and 2 hold, the transient economic performance in the modiﬁed target zone
Zt is upper bounded such that for any time instant K where ( x (K ), u(K )) ∈ Zt , the following holds:
∞

∑




e ( x (n), u(n)) − e ( xs , us ) ≤ M · α

n=K

Proof.
(i) First, we prove that the sets Zi , i ∈ I0M , deﬁned in Equation (20) are nested such that Zi ⊆ Zi+1
for i ∈ I0M−1 . We can start from M = 2. It is easy to verify that ( xs , us ) ∈ Z1 because the point
( xs , us ) satisﬁes the conditions in Equation (20) for i = 0. Thus we have Z0 ⊆ Z1 . Then we can
prove by induction. Suppose that Zi−1 ⊆ Zi for all i ≤ M. Consider i = M − 1 in Equation (20) and
( x, u) ∈ Z M , we have f ( x, u) ∈ projX (Z M−1 ) ⊆ projX (Z M ). Now consider i = M in Equation (20) and
( x, u) ∈ Z M . Since f ( x, u) ∈ projX (Z M ) for any ( x, u) ∈ Z M , Z M is a subset of Z M+1 . This proves that
the sets Zi ⊆ Zi+1 are nested for all i ∈ I0M−1 . The nestedness of the set Zi implies that whenever
x (n) ∈ Zt = ZtM , there is a feasible sequence bounded in Zt that reaches the optimal steady state in M
steps. This further implies that the exact penalty for tracking the modiﬁed target zone Zt will act as
hard constraint and prevent the system from leaving the modiﬁed target zone Zt .
(ii) Let the optimal solution at time instant n be denoted by u∗ (i |n) and x ∗ (i |n),
i ∈ I0N −1 . The corresponding terminal state is x ∗ ( N |n) = xs because of the terminal
constraint Equation (8).
A feasible solution at time instant n + 1 can be constructed
as follows: [u∗ (1|n), u∗ (2|n), · · · , u∗ ( N − 1|n), us ], with the corresponding state trajectory:
[ x ∗ (1|n), x ∗ (2|n), · · · , x ∗ ( N − 1|n), xs ]. Let V (n) denote the optimal value function at time n, the value
function V (n + 1) is upper bounded by the above feasible solution, which yields:
V ( n + 1)

≤ e ( x ∗ (1|n), u∗ (1|n)) + e ( x ∗ (2|n), u∗ (2|n)) + ... + e ( xs , us )
= V (n) − e ( x ∗ (0|n), u∗ (0|n)) + e ( xs , us )

Rearranging the above and replacing x ∗ (0|n), u∗ (0|n) with x (n), u(n), we have:

e ( x (n), u(n)) − le ( xs , us ) ≤ V (n) − V (n + 1)
Summing both sides from n = K to ∞:
∞

∑




e ( x (n), u(n)) − e ( xs , us ) ≤ V (K ) − V (∞)

(21)

n=K

If ( x (K ), u(K )) ∈ Zt , from Algorithm 1 and Equation (20), there exist state and input trajectories
which satisfy:

e ( x (i |K ), u(i |K )) ≤ e ( xs , us ) + α,
e ( x (i |K ), u(i |K )) = e ( xs , us ),




x (i |K ), u(i |K ) ∈ Zt


x ( i | K ), u ( i | K ) = ( x s , u s )

i ∈ I0M−1
−1
i ∈ IN
M

The above implies that
V (K ) ≤ N · e ( xs , us ) + M · α

(22)

Moreover, under Assumptions 1 and 2, we know from Theorem 1 that lim x (n) = xs . This means
n→∞


that the optimal solution x ∗ (i |n), u∗ (i |n) = ( xs , us ) as n → ∞. Thus we have
V (∞) = N · e ( xs , us )
Theorem 4 (ii) is proved by substituting Equations (22) and (23) into Equation (21).
48

(23)

Mathematics 2018, 6, 65

Remark 6. The tuning parameters M and α in Algorithm 1 may have signiﬁcant impacts shaping the
modiﬁed target zone. The parameter α can be thought of as the instantaneous acceptable performance loss
and M · α the total transient economic performance loss in the modiﬁed target zone. Under the same M,
larger α may, but not necessarily, result in larger modiﬁed target zone. The parameter α is useful only if
α ≤ max{e ( x, u) | ( x, u) ∈ Zt }. Similarly, under the same α, larger M may result in larger modiﬁed target
zone. It is possible that the modiﬁed target zone is ﬁnitely determined. That is, for some K ∈ I0N , Z M = ZK
for all M ≥ K. In this case Algorithm 1 may be stopped after K steps. In the extreme case where M = 1,
the modiﬁed target zone is a singleton of the optimal steady state ( xs , us ). The proposed approach becomes the
conventional set-point tracking MPC. On the other hand if both M and α are sufﬁciently large then the modiﬁed
target zone equals or approaches the maximal control invariant set in the target zone. We note that the modiﬁed
target zone based on the tuning parameters M and α essentially provides a means to make parameter tuning of
the original problem more transparent.
Remark 7. Note that step (3) of Algorithm 1 involves set projection and set intersection operations.
These operations could be computationally difﬁcult for generic nonlinear systems. For linear systems with
polyhedral target set Zt and polyhedral performance level set {( x, u) : e ( x, u) ≤ α}, Equation (20) can be
computed using Fourier–Motzkin elimination as well as the redundancy removal method in ([21]). Note also
that large M or a large number of system states may result in complex representations of the modiﬁed target zone
(a set characterized by many inequalities) in Algorithm 1. Therefore computation complexity of the modiﬁed
EMPC also needs to be taken into consideration while choosing parameters M and α.
5. Simulation
5.1. Example 1
The ﬁrst example is a linear scalar system:
x (n + 1) = 1.25x (n) + u(n)
With state and input constraints X = [−5, 5], U = [−5, 5] respectively. The target set is
Zt = {( x, u) | x ∈ [−5, 5], u ∈ [−1, 1]}. The economic cost is e = (u − 0.9)2 which corresponds
to an optimal steady state ( xs , us ) = (−3.6, 0.9). Two different initial states: x (0) = −5 and x (0) = 5
are considered to indicate the asymmetric closed-loop performance. The control horizon is N = 20
when not speciﬁed. The simulations and discussions are carried out as follows: ﬁrst, we will simulate
the EMPC in Section 3 which tracks the original target zone. Exact zone tracking penalty is used and
special attention is paid to the difﬁculties in parameter tunning. Then we will simulate EMPC with
modiﬁed target zone in Section 4 to demonstrate the advantage of the proposed approach.
5.1.1. EMPC Tracking the Original Target Zone
Figure 1 shows the closed-loop input trajectories of the EMPC of Equation (10) with c1 = 104 and
c2 = 102 , 103 , 104 , 105 respectively. The corresponding economic performances are shown in Figure 2.
It is seen that all closed-loop trajectories reach the target zone in ﬁnite steps and asymptotically
converge to the optimal value us = 0.9. As the quadratic zone tracking penalty c2 increases, the control
action gets milder, the magnitude of zone tracking violation becomes smaller but it takes longer to
reach the target zone.

49

Mathematics 2018, 6, 65

[   



XQ






[   












Q
Figure 1. Closed-loop input trajectories of EMPC of Equation (10) with c1 = 104 and c2 = 102 (solid),
c2 = 103 (dotted), c2 = 104 (dashed), c2 = 105 (dash dotted), respectively. Shaded area depicts the input
target zone. The upper and lower part correspond to initial state x (0) = −5 and x (0) = 5, respectively.

Another interesting observation is the target boundary riding. That is, the closed-loop input
trajectories reach the target zone and stay on the zone boundary (at u = −1 or u = 1) for some time
before approaching the optimal steady state value. Similar phenomena of zone boundary riding due
to l1 norm penalty was observed in [7]. The occurrence of boundary riding is due to the exact zone
tracking penalty and inconsistency between the zone tracking and economic objective (which also
includes setpoint tracking).




OH Q
















Q
Figure 2. Closed-loop economic performance of EMPC of Equation (10) with c1 = 104 and c2 = 102
(solid), c2 = 103 (dotted), c2 = 104 (dashed), c2 = 105 (dash dotted), respectively. The upper and lower
part correspond to initial state x (0) = 5 and x (0) = −5, respectively.

50

Mathematics 2018, 6, 65

Comparing the trajectories emitting from x (0) = −5 and x (0) = 5 with the same zone tracking
penalty, we can see that they are (almost) symmetric outside or on the zone boundary, and asymmetric
inside the target zone. Again, this is due to the large zone tracking penalty. The transient economic
performance of different trajectories are summarized in Table 1. From Figure 2 and Table 1, we can see
that economic performance is less of concern if the initial state is x (0) = −5. In this case we may pick
the zone tracking penalty regardless of the transient economic performance. If smaller zone tracking
violation is desirable, a large quadratic penalty, c2 = 105 , may be picked. However, if the initial state is
x (0) = 5, transient performance varies signiﬁcantly under different quadratic penalties. In this case it
might be desirable to pick smaller quadratic zone tracking penalty to achieve better transient economic
performance. This shows that the difﬁculty of parameter tuning is intrinsic to the system.
50

Table 1. Transient economic performance ∑ e ( x (n), u(n)) of EMPC of Equation (10).
n =0

x (0) = −5
x (0) = 5

c2 = 102

c2 = 103

c2 = 104

c2 = 105

2.0195
76.1218

2.0225
79.5542

1.2560
86.5742

1.2465
103.0781

Figure 3 shows the input trajectories under different control horizons N = 10, 20, 30, 40. It is
seen that with poor choices of the penalties c1 and c2 , increasing the control horizon N may result in
longer duration of target boundary riding and deteriorated economic performance. This also indicates
difﬁculty in parameter tuning and controller design since one would expect larger control horizon to
result in better performance.




XQ






















Q
Figure 3. Closed-loop input trajectories of EMPC in Equation (10) with x (0) = 5, c1 = 104 and c2 = 104 ,
N = 10 (solid), N = 20 (dotted), N = 30 (dashed), N = 40 (dash dotted), respectively.

5.1.2. EMPC Tracking the Modiﬁed Target Zone
Apply Algorithm 1 to the example with M = 10 and α = 1, the modiﬁed target zone is obtained
as follows:
Zt = {( x, u) | Ex + Fu ≤ G }
(24)

51

Mathematics 2018, 6, 65

where E = [1.25, −1.25, 0, 0] T , F = [1, −1, 1, −1] T , G = [−0.7436, 3.9571, 1.0000, 0.1000]. The constraint
set Z, target zone Zt and modiﬁed target zone Zt are illustrated in Figure 4.



 









Figure 4. The constraint set Z (box), target zone Zt (shaded rectangle) and modiﬁed target zone Zt
(parallelogram). The circle indicates the optimal steady state ( xs , us ).

Figures 5 and 6 show the closed-loop input trajectories and economic performances of the
EMPC tracking the modiﬁed target zone Zt in Equation (24). Comparing Figures 5 and 6 with
Figures 1 and 2, we can see that EMPC tracking the modiﬁed target zone Zt leads to more balanced
economic performance in the target zone while accomplishing fast zone tracking for the target zone Zt .
Boundary riding takes place at the boundary of the modiﬁed target zone Zt which corresponds to the
economic performance bound speciﬁed by e ( x, u) ≤ α = 1. This makes α a good tuning parameter.




XQ




















Q
Figure 5. Closed-loop input trajectories of EMPC of Equation (10) with modiﬁed zone Zt in
Equation (24), with c1 = 104 and c2 = 102 (solid), c2 = 103 (dotted), c2 = 104 (dashed), c2 = 105 (dash
dotted), respectively. Shaded area depicts the input target zone. The upper and lower part correspond
to initial state x (0) = −5 and x (0) = 5, respectively.

52

Mathematics 2018, 6, 65



OH Q
















Q
Figure 6. Closed-loop economic performance of EMPC of Equation (10) with modiﬁed zone Zt in
Equation (24), with c1 = 104 and c2 = 102 (solid), c2 = 103 (dotted), c2 = 104 (dashed), c2 = 105
(dash dotted), respectively. The upper and lower part correspond to initial state x (0) = 5 and
x (0) = −5, respectively.

Table 2 compares the transient economic performance of the EMPC tracking the target zone Zt
and EMPC tracking the modiﬁed target zone Zt . It is seen that both EMPCs achieve almost the same
economic performance for the initial state x (0) = −5. When x (0) = 5, EMPC tracking the modiﬁed
target zone Zt results in improved transient economic performance with less variations under different
tuning parameter c2 . This implies that we can now use c2 to tune for zone tracking (magnitude versus
duration) and use α and M associated with the modiﬁed target zone to tune for economic performance.
Tracking the modiﬁed target zone effectively decomposes the zone tracking and economic objectives.
50

Table 2. Comparison of the transient economic performance ∑ e ( x (n), u(n)) of EMPC tracking the
target zone Zt and EMPC tracking the modiﬁed zone Zt .

n =0

Tracking Zt

c2 = 102

c2 = 103

c2 = 104

c2 = 105

x (0) = −5
x (0) = 5

2.0195
76.1218

2.0225
79.5542

1.2560
86.5742

1.2465
103.0781

Tracking Zt

c2 = 102

c2 = 103

c2 = 104

c2 = 105

x (0) = −5
x (0) = 5

2.0195
57.4483

2.0225
52.7305

1.2560
54.9608

1.2465
64.2366

5.2. Example 2
The second example is a building heating control system taken from [22]. The heating system is
modeled as the following discrete-time linear system:
x k +1
yk

=

Axk + Buk + Edk

= Cxk

53

(25)

Mathematics 2018, 6, 65

where x = [ Tr T f Tw ] T , u = Wc and d = [ Ta φs ] T are the state, input and disturbance vectors,
respectively. The process variables are described in Table 3. The sampling time of the system is 0.5 h.
The system matrices are
⎡

⎤
0.6822 0.3028 0.0007
⎢
⎥
A = ⎣ 0.0740 0.9213 0.0040 ⎦
0.0007 0.0159 0.9834

B=

0.6822 0.3028 0.0007

T

⎡

⎤
143.1277 4.6253
⎢
⎥
E = ⎣ 6.9283 0.3671 ⎦ × 10−4
0.0401 0.0025

× 10−4


C=


1

0

0

Table 3. Building heating control system variable description.
Variable

Unit

Description

Tr
Tf
Tw
Wc
Ta
φs

◦C

Room air temperature
Floor temperature
Water temperature in ﬂoor heating pipes
Heat pump compressor input power
Ambient temperature
Solar radiation power

◦C
◦C

W

◦C

W

The control objective is to keep the room temperature between 20 ◦ C and 21 ◦ C while reducing
energy consumption from the heat pump compressor. The target zone is thus Zt = { x1 | 20 ≤ x1 ≤ 21},
the economic cost is e = p · u where p is the electricity price. Without loss of generality in the
simulation results, we assume that the electricity price p = 0.1 USD/kW·h. We assume constant
ambient temperature and solar radiation d = [5 0] T . The control input is subject to the constraint
0 ≤ u ≤ 2000 W. The optimal steady state which solves Equation (3) is: xs = [20.0 20.7 35.7] T ,
us = 140.0.
In the simulation, we compare three different control schemes: (i) a set-point tracking MPC which
tracks the optimal steady state with a stage cost t =  x − xs 2Q + u − us 2R where Q = diag(106 , 1, 1)
and R = 1; (ii) the EMPC of Equation (10) with c1 = 104 and c2 = 0 which is equivalent to the EMPC
in [22] with a large zone tracking penalty; and (iii) EMPC with modiﬁed target zone by Algorithm 1
with α = 200 and M = 12. The initial state is x (0) = [19.00, 19.64, 33.89] T . The control horizons of all
controllers are N = 96 (48 h). The room temperature and heat input proﬁles are shown in Figure 7,
the phase space plot of the system is shown in Figure 8, transient economic performances or the
additional electricity cost ∑72
n=0 e ( x ( n ), u ( n )) − e ( xs , us ) of the three control schemes are summarized
in Table 4. It is seen that EMPC with prioritized zone tracking is able to reach the desired room
temperature zone in the shortest period of time of 10 h but at a higher electricity cost of $411.1 with a
signiﬁcant overshoot. The conventional setpoint tracking MPC has the slowest response and reaches
the desired temperature in 24 h with an additional electricity cost of $363.3. EMPC with the modiﬁed
target zone yields a balanced solution which reaches the desired room temperature in 16 h with an
additional electricity cost of $369.8.

54

Mathematics 2018, 6, 65





























WLPH K
















WLPH K
Figure 7. Room temperature and heat input proﬁles under different control schemes.
Table 4. Additional electricity cost of the three control schemes.

Additional electricity cost (USD)

MPC Tracking ( xs , us )

EMPC Tracking Zt

EMPC Tracking Zt

363.3

411.1

369.8

Moreover, we investigated the closed-loop performance of the EMPC with modiﬁed target zones
under varying parameters α and M in Algorithm 1. It was found that in this example, the closed-loop
behavior is more sensitive to M than to α. Figure 9 shows the room temperature and heat input
proﬁles of EMPC with modiﬁed target zone Zt by Algorithm 1 with α = 2000 and M = 1, 6, 12, 18. It is
seen that as M increases, the time to reach the desired room temperature deceases from 24 to 15 h,
which suggests that M is a good tuning parameter.

55

Mathematics 2018, 6, 65




[





















[

[

Figure 8. Phase space plot of different control schemes. The polyhedron depicts the modiﬁed target
zone Zt .

































WLPH K

0 



0 



0 



0 













WLPH K

Figure 9. Room temperature and heat input proﬁles of EMPC with modiﬁed target zone Zt by
Algorithm 1 with α = 2000 and M = 1, 6, 12, 18.

6. Conclusions
In this work, we proposed an EMPC framework with integrated zone control. The proposed EMPC
design is essentially a multi-objective optimization problem in which the magnitude and duration
of zone objective violation as well as the economic performance are traded off. Asymptotic stability
of the optimal steady state and prioritized zone tracking with exact penalty function were discussed.
An algorithm to modify the target zone is proposed which simpliﬁes the parameter tuning procedure
and decouples the zone tracking and economic objective. Future research will consider the proposed
approach for time-varying and uncertain systems.
Author Contributions: Su Liu and Jinfeng Liu conceived the idea of the proposed controller design. Su developed
the theory, carried out the simulations and wrote the paper. Jinfeng Liu supervised the research ﬁndings and
reviewed the manuscript.

56

Mathematics 2018, 6, 65

Conﬂicts of Interest: The authors declare no conﬂict of interest.

References
1.
2.
3.

4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20.

21.
22.

Lu, J.Z. Challenging control problems and emerging technologies in enterprise optimization. Control Eng. Pract.
2003, 11, 847–858. [CrossRef]
Mayne, D.Q.; Rawlings, J.B.; Rao, C.V.; Scokaert, P.O.M. Constrained model predictive control: Stability and
optimality. Automatica 2000, 36, 789–814. [CrossRef]
Rawlings, J.B.; Angeli, D.; Bates, C.N. Fundamentals of economic model predictive control. In Proceedings
of the 51th IEEE Conference on Decision and Control, Grand Wailea, HI, USA, 10–13 December 2012;
pp. 3851–3861.
Grüne, L. Economic receding horizon control without terminal constraints. Automatica 2013, 49, 725–734.
[CrossRef]
Ellis, M.; Durand, H.; Christoﬁdes, P.D. A tutorial review of economic model predictive control methods.
J. Process Control 2014, 24, 1156–1178. [CrossRef]
Liu, S.; Liu, J. Economic model predictive control with extended horizon. Automatica 2016, 73, 180–192.
[CrossRef]
Scokaert, P.; Rawlings, J.B. Feasibility issues in linear model predictive control. AIChE J. 1999, 45, 1649–1659.
[CrossRef]
Kerrigan, E.C.; Maciejowski, J.M. Soft constraints and exact penalty functions in model predictive control.
In Proceedings of the UKACC International Conference Control, Cambridge, UK, 4–7 October 2000.
De Oliveira, N.M.C.; Biegler, L.T. Constraint handing and stability properties of model-predictive control.
AIChE J. 1994, 40, 1138–1155. [CrossRef]
Zeilinger, M.N.; Morari, M.; Jones, C.N. Soft Constrained Model Predictive Control With Robust Stability
Guarantees. IEEE Trans. Autom. Control 2014, 59, 1190–1202. [CrossRef]
Askari, M.; Moghavvemi, M.; Almurib, H.A.F.; Haidar, A.M.A. Stability of Soft-Constrained Finite Horizon
Model Predictive Control. IEEE Trans. Ind. Appl. 2017, 53, 5883–5892. [CrossRef]
Ferramosca, A.; Limon, D.; González, A.H.; Odloak, D.; Camacho, E. MPC for tracking zone regions.
J. Process Control 2010, 20, 506–516. [CrossRef]
Lez, A.H.G.; Marchetti, J.L.; Odloak, D. Robust model predictive control with zone control. IET Control
Theory Appl. 2009, 3, 121–135.
González, A.H.; Odloak, D. A stable MPC with zone control. J. Process Control 2009, 19, 110–122. [CrossRef]
Blanchini, F. Set invariance in control. Automatica 1999, 35, 1747–1767. [CrossRef]
Amrit, R.; Rawlings, J.B.; Angeli, D. Economic optimization using model predictive control with a terminal
cost. Annu. Rev. Control 2011, 35, 178–186. [CrossRef]
Diehl, M.; Amrit, R.; Rawlings, J.B. A Lyapunov function for economic optimizing model predictive control.
IEEE Trans. Autom. Control 2011, 56, 703–707. [CrossRef]
Rao, C.V.; Rawlings, J.B. Linear programming and model predictive control. J. Process Control 2000, 10, 283–289.
[CrossRef]
Fletcher, R. Practical Methods of Optimization; John Wiley & Sons: New York, NY, USA, 2013.
Kerrigan, E.C.; Maciejowski, J.M. Invariant sets for constrained nonlinear discrete-time systems with
application to feasibility in model predictive control. In Proceedings of the 39th IEEE Conference on Decision
and Control, Sydney, Australia, 12–15 December 2000; Volume 5, pp. 4951–4956.
Keerthi, S.; Gilbert, E. Computation of minimum-time feedback control laws for discrete-time systems with
state-control constraints. IEEE Trans. Autom. Control 1987, 32, 432–435. [CrossRef]
Halvgaard, R.; Poulsen, N.K.; Madsen, H.; Jørgensen, J.B. Economic model predictive control for
building climate control in a smart grid. In Proceedings of the IEEE Innovative Smart Grid Technologies,
Washington, DC, USA, 16–20 January 2012; pp. 1–6.
c 2018 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access

article distributed under the terms and conditions of the Creative Commons Attribution
(CC BY) license (http://creativecommons.org/licenses/by/4.0/).

57

mathematics
Article

Safeness Index-Based Economic Model Predictive
Control of Stochastic Nonlinear Systems
Zhe Wu 1 , Helen Durand 2 and Panagiotis D. Christoﬁdes 1,3, *
1
2
3

*

Department of Chemical and Biomolecular Engineering, University of California,
Los Angeles, CA 90095-1592, USA; wuzhe@g.ucla.edu
Department of Chemical Engineering and Materials Science, Wayne State University, Detroit, MI 48202, USA;
helen.durand@wayne.edu
Department of Electrical and Computer Engineering, University of California, Los Angeles, CA 90095-1592, USA
Correspondence: pdc@seas.ucla.edu

Received: 28 March 2018; Accepted: 27 April 2018; Published: 3 May 2018

Abstract: Process operational safety plays an important role in designing control systems for
chemical processes. Motivated by this, in this work, we develop a process Safeness Index-based
economic model predictive control system for a broad class of stochastic nonlinear systems with input
constraints. A stochastic Lyapunov-based controller is ﬁrst utilized to characterize a region of the
state-space surrounding the origin, starting from which the origin is rendered asymptotically stable
in probability. Using this stability region characterization and a process Safeness Index function that
characterizes the region in state-space in which it is safe to operate the process, an economic model
predictive control system is then developed using Lyapunov-based constraints to ensure economic
optimality, as well as process operational safety and closed-loop stability in probability. A chemical
process example is used to demonstrate the applicability and effectiveness of the proposed approach.
Keywords: process operational safety; economic model predictive control; Safeness Index; nonlinear
systems; chemical processes; probabilistic uncertainty

1. Introduction
Process operational safety has become crucially important in the chemical industry since the
failure of process safety devices/human error often leads to disastrous incidents causing human
and capital loss [1]. Motivated by this, recently, a new class of economic model predictive control
systems (EMPC), in which the cost function penalizes process economics instead of the distances
from the steady-state in a general quadratic form, was utilized to account for process operational
safety and economic optimality based on a function called the Safeness Index [2,3]. These new EMPC
methods complement previous efforts on economic model predictive control (e.g., [4–7]), which were
not concerned explicitly with process operational safety. Speciﬁcally, in [2], a Safeness Index function
that indicates the level of safety of a given state was utilized to characterize a safe operating region
and used as a constraint in the EMPC design such that the closed-loop state of a nonlinear process
is guaranteed to be driven into the safe operating region in ﬁnite time in the presence of sufﬁciently
small bounded disturbances and, if the Safeness Index takes a special form related to a Lyapunov
function used in the EMPC design, to never again exit that safe operating region while maximizing
the economics of the process. However, in general, the Safeness Index does not have to take this
special form and may therefore leave the safe operating region for ﬁnite periods of time (this may be
acceptable depending on how the notion of a “safe” region of operation is selected; e.g., perhaps a
“safe” region of operation means it is safe to operate in for all times, but that if the state is not in that
region for short periods of time, there is not an immediate concern). Therefore, with a general form
of the Safeness Index, the hard constraint on this function in the EMPC design of [2] with a Safeness
Mathematics 2018, 6, 69; doi:10.3390/math6050069

58

www.mdpi.com/journal/mathematics

Mathematics 2018, 6, 69

Index-based constraint may not be feasible. Due to the potential infeasibility issue caused by the
hard constraint, the potential for the state to leave the safe operating region unless the Safeness Index
has a speciﬁc form and the fact that disturbances may not be sufﬁciently small to guarantee that the
closed-loop state re-enters this safe operating region, the EMPC design with a Safeness Index-based
constraint may be limited in terms of its applicability to stochastic nonlinear systems.
On the other hand, MPC and EMPC of stochastic nonlinear systems have received a lot of
attention recently (e.g., [8,9]). Uncertainty in the process model may be considered to have a worst-case
upper and lower bound, or it may be considered to have unbounded variation and therefore be
treated in a probabilistic manner. Since the variation of disturbances is not bounded in a stochastic
nonlinear system, the Lyapunov-based economic model predictive control (LEMPC) framework [4]
developed for nonlinear systems with small bounded disturbances is unable to guarantee closed-loop
stability (i.e., the state of the closed-loop system stays within a well-characterized region of the
state-space); instead, probabilistic closed-loop stability results are expected in this case. To that end,
in [10], the Markov-chain Monte Carlo technique was used to derive the probabilistic convergence to a
near-optimal solution for a constrained stochastic optimization problem. In [9], a Lyapunov-based
model predictive control (LMPC) method was proposed for stochastic nonlinear systems to drive the
state to a steady-state within an explicitly characterized region of attraction in probability. Recently, the
work [11] developed a Lyapunov-based EMPC method for stochastic nonlinear systems by utilizing the
probability distribution of the disturbance term to derive closed-loop stability and recursive feasibility
results in probability.
In the same direction, this work focuses on the design of Safeness Index-based economic model
predictive control systems for a broad class of stochastic nonlinear systems with input constraints.
Speciﬁcally, under the assumption of the stabilizability of the origin of the stochastic nonlinear system
via a stochastic Lyapunov-based control law, a process Safeness Index function and the level sets of
multiple Lyapunov functions are ﬁrst utilized to characterize a safe operating region in state-space,
starting from which recursive feasibility and process operational safety are derived in probability
for the stochastic nonlinear system under an economic model predictive controller. This economic
model predictive control method is then designed that utilizes stochastic Lyapunov-based constraints
to achieve economic optimality, as well as feasibility and process operational safety in probability in
the well-characterized safe operating region.
The rest of the manuscript is organized as follows: in the Preliminaries, the notation, the class
of systems and the stabilizability assumptions are given. In the Main Results, the process Safeness
Index and the Safeness Index-based LEMPC are introduced. Subsequently, the Safeness Index-based
LEMPC using multiple level sets of Lyapunov functions (to broaden the state-space set for which it is
recursively feasible) is developed for the nominal system. Based on this, the corresponding stochastic
Safeness Index-based LEMPC and its probabilistic process operational safety and feasibility properties
are developed for the nonlinear stochastic system. Finally, a nonlinear chemical process example is
used to demonstrate the application of the proposed stochastic Safeness Index-based LEMPC.
2. Preliminaries
2.1. Notations
Throughout the paper, we use the notation (Ω, F , P) to denote a probability space. The notation
|·| is used to denote the Euclidean norm of a vector, and the notation |·|Q denotes the weighted
Euclidean norm of a vector (i.e., | x |Q = x T Qx where Q is a positive deﬁnite matrix). x T denotes the
transpose of x. R+ denotes the set [0, ∞). The notation L f V ( x ) denotes the standard Lie derivative
∂V ( x )

L f V ( x ) := ∂x f ( x ). Given a set D , we denote the boundary of D by ∂D , the closure of D by D and
the interior of D by D o . Set subtraction is denoted by “\”, i.e., A\ B := { x ∈ Rn : x ∈ A, x ∈
/ B }.
A continuous function α : [0, a) → [0, ∞) is said to be a class K function if α(0) = 0 and it is strictly
increasing. The function f ( x ) is said to be a class C k function if the i-th derivative of f exists and is

59

Mathematics 2018, 6, 69

continuous for all i = 1, 2, ..., k. Consider a stochastic process x (t, w) : [0, ∞) × Ω → Rn on (Ω, F , P).
For each w ∈ Ω, x (·, w) is a realization or trajectory of the stochastic process, and we abbreviate
x (t, w) as xw (t). E( A), P( A), E( A | ·) and P( A | ·) are the expectation, the probability, the conditional
expectation and the conditional probability of the occurrence of the event A, respectively. The hitting
time τX of a set X is the ﬁrst time that the state trajectory hits the boundary of X. Additionally, we
deﬁne τX,T (t) = min{τX , T, t}, where T is the operation time.
2.2. Class of Systems
Consider a class of continuous-time stochastic nonlinear systems described by the following
system of stochastic differential equations:
dx (t) = f ( x (t))dt + g( x (t))u(t)dt + h( x (t))dw(t)

(1)

where x ∈ Rn is the stochastic state vector and u ∈ Rm is the input vector. The available control action
is deﬁned by U := {u ∈ Rm | umin
≤ u ≤ umax
, i = 1, 2, ..., m}. The disturbance w(t) is a standard
i
i
q-dimensional independent Wiener process deﬁned on the probability space (Ω, F , P). f (·), g(·),
and h(·) are sufﬁciently smooth vector and matrix functions of dimensions n × 1, n × m and n × q,
respectively. It is assumed that the steady-state of the system with w(t) ≡ 0 is ( xs∗ , u∗s ) = (0, 0).
The initial time t0 is deﬁned as zero (t0 = 0). We also assume that h(0) = 0 such that the disturbance
term h( x (t))dw(t) of Equation (1) vanishes at the origin.
Deﬁnition 1. Given a C2 Lyapunov function V : Rn → R+ , the inﬁnitesimal generator (LV) of the system of
Equation (1) is deﬁned as follows:
1
∂2 V
LV ( x ) = L f V ( x ) + L g V ( x )u + Tr {h( x ) T 2 h( x )}
2
∂x

(2)

2

We assume that L f V ( x ), L g V ( x ) and h( x ) T ∂∂xV2 h( x ) are locally Lipschitz throughout the work.
Deﬁnition 2. Assuming that the equilibrium of the uncontrolled system dx (t) = f ( x (t))dt + h( x (t))dw(t)
is at the origin, then the origin is said to be asymptotically stable in probability, if for any  > 0, the following
conditions hold ([12]):
lim P( lim x (t) = 0) = 1
(3a)
x (0)→0

t→∞

lim P(sup | x (t)| > ) = 0

x (0)→0

t ≥0

(3b)

Proposition 1. Given the uncontrolled system dx(t) = f (x(t))dt + h(x(t))dw(t), if for all x ∈ D0 ⊂ Rn ,
where D0 is an open neighborhood of the origin, LV < 0 holds ∀t ∈ (0, ∞), then E(V ( x (t))) < V ( x (0)),
∀t ∈ (0, ∞), and the origin of the uncontrolled system is asymptotically stable in probability ([12]).
2.3. Stabilizability Assumptions
We assume there exists a stochastic stabilizing feedback control law u = Φs ( x ) ∈ U (e.g., [13,14])
such that the origin of the system of Equation (1) can be rendered asymptotically stable in probability
for all x ∈ D ⊂ Rn , where D is an open neighborhood of the origin, in the sense that there exists a
positive deﬁnite C2 stochastic control Lyapunov function V that satisﬁes the following inequality:
1
∂2 V
LV = L f V ( x ) + L g V ( x )Φs ( x ) + Tr {h T 2 h}
2
∂x
≤ −α1 (| x |)
where α1 (·) is a class K function.

60

(4)

Mathematics 2018, 6, 69

Based on the controller Φs ( x ), we characterize the set φd := { x ∈ Rn | LV + κV ( x ) ≤ 0, u =
Φs ( x ) ∈ U, κ > 0}. We also choose a level set Ωρ := { x ∈ φd | V ( x ) ≤ ρ} of V ( x ) inside φd as the
stability region for the system of Equation (1). Therefore, the origin of the system of Equation (1) is
rendered asymptotically stable via the controller Φs ( x ) in probability if x (0) = x0 ∈ Ωρ .
In this work, we develop an economic MPC design that takes advantage of the Safeness Index
function [2] in its design to achieve probabilistic process operational safety in the following sense:
Deﬁnition 3. Consider the system of Equation (1) with input constraints u ∈ U. If there exists a control law
u = Φ ∈ U such that the state trajectories of the system for any initial state x (0) = x0 ∈ S satisfy x (t) ∈ S ,
∀ t ≥ 0 with the probability p, where S is a safe operating region in state-space that excludes the unsafe region D,
we say that the control law Φ maintains the process state within a safe operating region S with probability p.
Remark 1. In general, the safe operating region S is characterized as a subset of the stability region (because
process operation is safe provided that the system is operated within a closed-loop stability region) for the
closed-loop system of Equation (1) to account for the additional safety constraints. Therefore, if there exists a
control law u = Φ( x ) ∈ U that maintains the process state within S with the probability p, it also maintains
the process state within the stability region at least with probability p. This implies that the probability of process
operational safety of the system of Equation (1), which we will discuss in the following sections, also gives a
lower bound on probabilistic closed-loop stability.
3. Main Results
In this section, the process Safeness Index and the optimization problem of Safeness Index-based
LEMPC designed for the nominal system of Equation (1) with w(t) ≡ 0 are ﬁrst presented. Based on
that, the Safeness Index-based LEMPC using multiple level sets of Lyapunov functions is developed
for the nominal system of Equation (1) to guarantee recursive feasibility and to guarantee that the
closed-loop state does not enter an unsafe operating region D . Subsequently, the stochastic Safeness
Index-based LEMPC is developed for the system of Equation (1) to account for the disturbances w(t)
with unbounded variation. The stochastic safety and feasibility in probability of the closed-loop system
of Equation (1) are ﬁnally investigated under the sample-and-hold implementation of the proposed
stochastic Safeness Index-based LEMPC.
3.1. Process Safeness Index
In [2], the Safeness Index function S( x ) was developed to indicate the level of safety of a given
state, through which process operational safety was integrated with process control system design to
account for the process operational safety considerations resulting from multivariable interactions or
interactions between units. There are various methods of determining the functional form of S( x ), for
example by utilizing ﬁrst-principles process models or using systematic safety analysis tools such as
HAZOP and fault tree analysis.
Based on the functional form of S( x ), the closed-loop state predictions are required to be
maintained within a safe region S (where S( x ) is below the threshold on the Safeness Index STH ) by
using the Safeness Index-based constraint within the process control design. Additionally, the safety
systems (e.g., the alarm, emergency shut-down and relief systems) can be triggered if the threshold
STH is sufﬁciently exceeded, which implies that the process operation becomes unsafe and further
actions are required.
3.2. Safeness Index-Based LEMPC
Safeness Index-based LEMPC optimizes an economic cost function Le (·, ·) and maintains the
closed-loop state of the nominal system of Equation (1) with w(t) ≡ 0 in a safe operating region by

61

Mathematics 2018, 6, 69

utilizing the Safeness Index function as a hard constraint within the LEMPC design. Speciﬁcally, the
formulation of the Safeness Index-based LEMPC is as follows:
max

 t +τP Δ
k

u(t)∈ST (Δ) tk

Le ( x̃ (τ ), u(τ )) dτ

(5a)

s.t. x̃˙ (t) = f ( x̃ (t)) + g( x̃ (t))u(t)

(5b)

u(t) ∈ U, ∀ t ∈ [tk , tk + τP Δ)

(5c)

x̃ (tk ) = x (tk )

(5d)

V ( x̃ (t)) < ρe , ∀ t ∈ [tk , tk + τP Δ)
if x (tk ) ∈ Ωoρ

(5e)

e

S( x̃ (t)) ≤ STH , ∀ t ∈ [tk , tk + τP Δ)
if S( x (tk )) ≤ STH

(5f)

V̇ ( x (tk ), u(tk )) ≤ V̇ ( x (tk ), Φn ( x (tk ))),
if x (tk ) ∈ Ωρ \Ωoρ or S( x (tk )) > STH

(5g)

e

where x̃ is the predicted state trajectory, ST(Δ) is the set of piecewise constant functions with sampling
period Δ, τP is the number of sampling periods of the prediction horizon and V̇ = L f V (x) + Lg V (x)u.
Φn (x) is the stabilizing feedback control law designed for the nominal system of Equation (1) with w(t) ≡ 0
such that the origin of the system of Equation (1) can be rendered asymptotically stable. Under the controller
Φn (x), we first characterize the set φn := {x ∈ Rn | V̇ + κV (x) ≤ 0, u = Φn (x) ∈ U, κ > 0} and choose
the level set Ωρ := { x ∈ φn | V ( x ) ≤ ρ } inside φn as the stability region. Ωρe := { x ∈ Rn | V ( x ) ≤ ρe }
where 0 < ρe < ρ is further designed to make the region Ωρ a forward invariant set in the presence of
sufﬁciently small bounded disturbances.
The constraint of Equation (5e) allows the cost function of Equation (5a) to be maximized while
keeping the predicted closed-loop state within Ωoρ if x (tk ) ∈ Ωoρ . The safety constraint of Equation (5f)
e
e
is applied to maintain the predictions of the closed-loop state within the safe operating region
S := {x ∈ Rn | S(x) ≤ STH } if x(tk ) ∈ S . On the other hand, if x(tk ) ∈ Ωρ \Ωoρ or x(tk ) is outside of S ,
e

the constraint of Equation (5g) is activated to decrease V (x) such that x(t) will move towards the origin
within the current sampling period.
Remark 2. Since the safe operating region S is not necessarily a forward invariant set based on the formulation
of the Safeness Index function, the threshold STH set on the Safeness Index may deﬁne a region that is irregularly
shaped, for example the grey region in Figure 1 [2] corresponding to a chemical reactor example similar to the
one in the section “Application to a Chemical Process Example” of this manuscript. Therefore, the existence of
feasible solutions (i.e., the satisfaction of the constraints of Equation (5)) of the Safeness Index-based LEMPC is
not guaranteed in S due to the constraint of Equation (5f). Additionally, S( x (t)) may not even decrease under
the constraint of Equation (5g) due to the same reason (that S is not an invariant set). Considering the above
feasibility issue in the formulation of the Safeness Index-based LEMPC, a new Safeness Index-based LEMPC is
developed in the following subsection by using multiple Lyapunov functions to characterize the safe operating
region S .

62

Mathematics 2018, 6, 69
S( x) ≤ S TH
Safe ne ss Inde x-base d LEMPC
Ωρ'







x2





í

í

í

í
í

í

í



í









x1
Figure 1. A schematic representing the safe operating region S (the gray region) with an example
closed-loop trajectory under the Safeness Index-based Lyapunov-based economic model predictive
control (LEMPC) design of Equation (5) for the initial condition (0, 0).

3.3. Safeness Index-Based LEMPC Using Multiple Level Sets
The improved Safeness Index-based LEMPC for the nominal system of Equation (1) with w(t) ≡ 0
is developed utilizing the level sets of two Lyapunov functions V1 and V2 to characterize the safe
and unsafe operating regions. Throughout this work, we assume that the shape of the stability
regions, D , and their intersection are amenable to the treatment in this work, such as the use of only
two Lyapunov functions in the LEMPC design and also the types of overlap of the stability regions
described. Speciﬁcally, as shown in Figure 2, we deﬁne two level sets: Ωρ := { x ∈ φn | V1 ( x ) ≤ ρ } and
Us := { x ∈ φn | V2 ( x ) ≤ s } inside φn := { x ∈ Rn | V̇i + κVi ( x ) ≤ 0, i = 1, 2, u = Φn ( x ) ∈ U, κ > 0},
from which the origin of the nominal system of Equation (1) is rendered asymptotically stable.

D



[

U s

S1






S2







[



Ω ρ





Figure 2. A schematic representing the unsafe region D (dark gray) and the safe operating region
S := S1 ∪ S2 (light gray).

63

Mathematics 2018, 6, 69

Ωρ represents the stability region as it is in the Safeness Index-based LEMPC of Equation (5),
and Us is designed to exclude the unsafe region D where S( x ) > STH . Therefore, the safe operating
region S becomes the union of S1 := Ωρ ∩ Us and S2 := Ωρ \(S1 ∪ D) in Figure 2. This new Safeness
Index-based LEMPC design is formulated by the following optimization problem:
max

 t +τP Δ
k

u∈ST (Δ) tk

Le ( x̃ (t), u(t)) dt

(6a)

s.t. x̃˙ (t) = f ( x̃ (t)) + g( x̃ (t))u(t)

(6b)

x̃ (tk ) = x (tk )

(6c)

u(t) ∈ U,

(6d)

∀ t ∈ [tk , tk + τP Δ)

V1 ( x̃ (t)) < ρe ,
if x (tk ) ∈ Ωoρ ,

∀t ∈ [tk , tk + τP Δ)

(6e)

V2 ( x̃ (t)) < se ,
if x (tk ) ∈ Uso ,
e

∀t ∈ [tk , tk + τP Δ)

(6f)

e

V̇i ( x (tk ), u(tk )) ≤ V̇i ( x (tk ), Φn ( x (tk ))), i = 1, 2
if x (tk ) ∈ Ωρ \Ωoρ , or x (tk ) ∈ Us \Uso
e

(6g)

e

where the notation follows that in Equation (5). Ωρe and Use are again chosen as the level sets inside φn
to make Ωρ and Us forward invariant sets, respectively. In the optimization problem of Equation (6),
the objective function of Equation (6a) is the integral of Le ( x̃ (t), u(t)) over the prediction horizon.
The constraint of Equation (6b) is the nominal system of Equation (1) with w(t) ≡ 0 that is used to
predict the states of the closed-loop system. Equation (6c) deﬁnes the initial condition x̃ (tk ) of the
optimization problem determined from a state measurement x (tk ) at t = tk . Equation (6d) represents
the input constraints applied over the entire prediction horizon. The constraint of Equation (6e)
maintains the predicted states in Ωoρ when the current state x (tk ) ∈ Ωoρ . Similarly, the constraint of
e

e

Equation (6f) maintains the predicted states in Uso when x (tk ) ∈ Uso . The contractive constraint of
e
e
Equation (6g) is activated to decrease both V1 and V2 such that the closed-loop state enters the smaller
level sets of V1 and V2 (i.e., towards the interior of S1 ). Therefore, under the Safeness Index-based
LEMPC of Equation (6), if x (tk ) ∈ S1 , the constraints of Equations (6e)–(6g) maintain the closed-loop
state in S1 . If x (tk ) ∈ S2 , the constraints of Equations (6e) and (6g) are applied to maintain the
closed-loop state in Ωρ , under which x (t) will stay in S2 or enter S1 in some time.

Remark 3. Based on the Safeness Index function S( x ) and its threshold STH , the level set Us of the Lyapunov
function V2 is chosen to exclude the unsafe region D that is originally in the level set Ωρ of the Lyapunov
function V1 as shown in Figure 2. Since Us and Ωρ are both forward invariant sets for the nominal system
(or the system with sufﬁciently small bounded disturbances) of Equation (1) under the controller Φn ( x ) ∈ U that
satisﬁes V̇i + κVi ( x ) ≤ 0, i = 1, 2, κ > 0, it follows that under the corresponding constraint of Equation (6g),
the overlapping region S1 is also an invariant set. Therefore, the infeasibility problem caused by the Safeness
Index constraint of Equation (5f) is solved by introducing the second level set Us into the LEMPC design.
For the remaining part of the safe operating region S2 , the constraints of Equations (6e) and (6g) are utilized
to ensure that the closed-loop state stays in Ωρ all the time, which is similar to closed-loop stability under
the traditional LEMPC [4]. Since the sampling period Δ has to be sufﬁciently small in the sample-and-hold
implementation of the Safeness Index-based LEMPC of Equation (6), we can utilize a sufﬁciently small Δ such
that x (tk+1 ) is unable to jump into D within one sampling period if x (tk ) ∈ S2 . This implies that at the next
sampling time, the state x (tk+1 ) either stays in S2 or enters S1 via the boundary between S1 and S2 . In both
cases, it is considered that the state is maintained in the safe operating region according to Deﬁnition 3.

64

Mathematics 2018, 6, 69

Remark 4. Besides the above development of Safeness Index-based LEMPC using multiple Lyapunov functions,
there are also other methods that can guarantee the feasibility of the Safeness Index-based constraint in the
LEMPC design. For example, in the optimization problem of Equation (5), we can choose a more conservative
level set of V ( x ) (i.e., a small level set inside Ωρ that excludes D ) as the safe operating region. However, if the
unsafe region characterized by the Safeness Index function is a set of points inside the stability region and is
difﬁcult to exclude by a single level set like Us , we may want to use control Lyapunov barrier functions to design
the constraints that account for the unsafe region in state-space [15] and overcome the infeasibility problem.
3.4. Stochastic Safeness Index-Based LEMPC
Inspired by the Safeness Index-based LEMPC design of Equation (6), the stochastic Safeness
Index-based LEMPC design is given by the following optimization problem:
max

 t +τP Δ
k

u∈ST (Δ) tk

Le ( x̃ (t), u(t)) dt

s.t. x̃˙ (t) = f ( x̃ (t)) + g( x̃ (t))u(t)

(7a)
(7b)

x̃ (tk ) = x (tk )

(7c)

u(t) ∈ U,

(7d)

∀ t ∈ [tk , tk + τP Δ)

V1 ( x̃ (t)) < ρe ,
if x (tk ) ∈ Ωoρe ,

∀t ∈ [tk , tk + τP Δ)

(7e)

∀t ∈ [tk , tk + τP Δ)

(7f)

V2 ( x̃ (t)) < se ,
if x (tk ) ∈ Usoe ,

LVi ( x (tk ), u(tk )) ≤ LVi ( x (tk ), Φs ( x (tk ))), i = 1, 2
if x (tk ) ∈ Ωρ \Ωoρe , or x (tk ) ∈ Us \Usoe

(7g)

where the notation follows that in Equation (6) except using ρ, ρe , s, se , Φs ( x ) and LV to replace ρ , ρe ,
s , se , Φn ( x ) and V̇, respectively. For the system of Equation (1) with multiple Lyapunov functions,
φd is characterized as: φd = { x ∈ Rn | LVi + κVi ( x ) ≤ 0, i = 1, 2, u = Φs ( x ) ∈ U, κ > 0}. Ωρ , Ωρe , Us
and Use are level sets of V1 and V2 inside φd , where 0 < ρe < ρ and 0 < se < s. Similar to the LEMPC
designs of Equations (5) and (6), the optimal input trajectory determined by the optimization problem
of the stochastic Safeness Index-based LEMPC is denoted by u∗ (t), which is calculated over the entire
prediction horizon t ∈ [tk , tk + τP Δ). The control action computed for the ﬁrst sampling period of
the prediction horizon u∗ (tk ) is sent to the actuators to be applied over the sampling period, and the
optimization problem of Equation (7) is re-solved at the next sampling time.
The constraint of Equation (7e) maintains the predicted state in Ωoρe when the current state
x (tk ) ∈ Ωoρe and the constraint of Equation (7f) maintains the predicted state in Usoe when the current
state x (tk ) ∈ Usoe . However, if x (tk ) ∈ Ωρ \Ωoρe or x (tk ) ∈ Us \Usoe , the constraint of Equation (7g) is
activated to decrease V1 ( x ) and V2 ( x ) such that it is possible that x (t) moves back to Ωoρe ∩ Usoe .
Since there exists a disturbance w(t) with unbounded variation dw(t) in the system of Equation (1),
process operational safety (i.e., the closed-loop state is bounded in the safe operating region S ) can only be
ensured in probability. Therefore, in the following sections, we will establish the probabilities of process
operational safety of the system of Equation (1) under the stochastic Safeness Index-based LEMPC of
Equation (7).
3.5. Sample-And-Hold Implementation
We ﬁrst investigate the impact of the sample-and-hold implementation of Equation (7) on the
stability of the closed-loop system of Equation (1) following similar arguments to those in [9,11].
Speciﬁcally, the probabilities of the sets Ωρ and Us remaining invariant under the sample-and-hold

65

Mathematics 2018, 6, 69

implementation of the Safeness Index-based LEMPC of Equation (7) with a sampling period Δ are
given as follows.
Theorem 1. Consider the system of Equation (1) with Ωρ and Us inside φd under the control actions u
computed by the LEMPC of Equation (7). Let u(t) = u(tk ), ∀t ∈ [tk , tk + Δ). Then, given any probability
λ ∈ (0, 1], there exist positive real numbers ρs < ρe < ρ and ρs < se < s where Ωρs and Uρs are level sets of V1
and V2 , respectively, around the origin where LVi , i = 1, 2 are not required to remain negative for the nominal
system of Equation (1) under the sample-and-hold implementation of u(t), and there also exists a sampling
period Δ∗ := Δ∗ (λ), such that if Δ ∈ (0, Δ∗ ], then:
P( sup V1 ( x (t)) < ρ) ≥ 1 − λ, ∀ x (0) ∈ Ωoρe

(8)

P( sup V2 ( x (t)) < s) ≥ 1 − λ, ∀ x (0) ∈ Usoe

(9)

t∈[0,Δ]

t∈[0,Δ]

P( sup LVi ( x (t)) < − < 0) ≥ 1 − λ, i = 1, 2,
t∈[0,Δ]

(10)

∀ x (0) ∈ (Ωρ ∪ Us )\(Ωoρs ∩ Uρos )
Proof. Let A B := {w : supt∈[0,Δ∗ ] |w(t)| ≤ B}. Using the results for standard Brownian motion [16],
given any probability λ ∈ (0, 1], there exists a sufﬁciently small B, s.t. P( A B ) = 1 − λ. For each
realization xw (t) with x (0) ∈ Ωρ ∪ Us and w ∈ A B , there almost surely exists a positive real number
k1 , s.t. supt∈[0,Δ∗ ] | xw (t) − x (0)| ≤ k1 (Δ∗ )r , where r < 1/2, according to the local Hölder continuity.
Therefore, the probability of the event AW := {w : supt∈[0,Δ∗ ] | x (t) − x (0)| ≤ k1 (Δ∗ )r } is:
P ( AW ) ≥ 1 − λ

(11)

We ﬁrst prove that the probabilities of Equations (8) and (9) hold for the ﬁrst sampling period.
It should be noted that the probabilities of Equations (8)–(10) can be generalized to any sampling
period t ∈ [tk , tk + Δ] with the measurement of x (tk ) playing the role of x (0) in Equations (8)–(10).
Since Vi (x), i = 1, 2 satisfies the local Lipschitz condition, there exist positive real numbers
k2i , i = 1, 2, such that |Vi (x(t)) − Vi (x(0))| ≤ k2i |x(t) − x(0)|, i = 1, 2. Therefore, for all w ∈ AW , if
1
ρ−ρ
Δ∗ < Δ1 = ( k k e )( r ) , it follows that |V1 (xw (t)) − V1 (x(0))| < ρ − ρe , ∀t ≤ Δ∗ . Furthermore, ∀x(0) ∈ Ωoρe ,
21 1
it is obtained that V1 ( xw (t)) < ρ, ∀t ≤ Δ∗ since −(ρ − ρe ) < V1 ( x (t)) − V1 ( x (0)) < ρ − ρe and
supx(0)∈Ωoρ V1 ( x (0)) = ρe . Therefore, if x (0) ∈ Ωoρe , the probability of x (t) staying inside Ωρ is
e

P(supt∈[0,Δ∗ ] V1 ( x (t)) < ρ) ≥ 1 − λ. Similarly, if Δ∗ < Δ2 = ( ks−kse )( r ) , for any x (0) ∈ Usoe , the
22 1
probability of x (t) staying inside Us is P(supt∈[0,Δ∗ ] V2 ( x (t)) < s) ≥ 1 − λ.
We now prove the probability of Equation (10) by using the equation LVi ( x (t)) = LVi ( x (0)) +
(LVi ( x (t)) − LVi ( x (0))), ∀t ∈ [0, Δ∗ ], i = 1, 2. It is shown that there exists a positive real number
 such that LVi ( x (t)) < − holds ∀ x (0) ∈ (Ωρ ∪ Us )\(Ωoρs ∩ Uρos ) for the nominal system of
Equation (1) based on the deﬁnition of the value of LVi in φd . However, LVi ( x (t)) < − only
holds in probability for the system in the presence of the disturbances w(t). Based on the local Lipschitz
1

∂2 V (x(t))

i
conditions of L f Vi (x), Lg Vi (x) and h(x(t))T ∂x
h(x(t)), there exist positive real numbers k3 , k4 , k5 ,
2
such that | L f Vi ( x (t)) − L f Vi ( x (0))| ≤ k3 | x (t) − x (0)|, | L g Vi ( x (t)) − L g Vi ( x (0))| ≤ k4 | x (t) − x (0)|,

| 12 Tr {h( x (t)) T ∂

2 V ( x ( t ))
i
∂x2

∂2 Vi ( x (0))
h( x (0))}| ≤ k5 | x (t) − x (0)|, i =
∂x2
1)
κρs −
(
r
( k (k +k +k ) ) . It follows from LVi ( x (t)) ≤
5
1 3
4

h( x (t))}− 12 Tr {h( x (0)) T
Δ∗

1, 2.

Let 0 <  < κρs and
< Δ3 =
LVi ( x (0)) +
|LVi ( x (t)) − LVi ( x (0))| < LVi ( x (0)) + κρs −  (which follows from the application of the Lipschitz
properties of the components of LVi with Δ∗ < Δ3 ) and the fact that x (0) ∈ (Ωρ ∪ Us )\(Ωoρs ∩ Uρos ) and
LVi ( x0 ) < −κVi ( x (0)), that ∀w ∈ AW , LVi ( xw (t)) < − < 0, ∀t ≤ Δ∗ , i = 1, 2 holds. Therefore, by
choosing the sampling period Δ ∈ (0, Δ∗ ], given any initial condition x (0) ∈ (Ωρ ∪ Us )\(Ωoρs ∩ Uρos ),

66

Mathematics 2018, 6, 69

the probability that LVi ( x (t)) < − is as follows: P(supt∈[0,Δ∗ ] LVi ( x (t)) < −, i = 1, 2) ≥ 1 − λ.
Finally, let Δ∗ ≤ min{Δ1 , Δ2 , Δ3 }, and the probabilities of Equations (8)–(10) are all satisﬁed for
Δ ∈ (0, Δ∗ ].
3.6. Stability in Probability
Based on the results from the above section, the probabilistic process operational safety of the
closed-loop system of Equation (1) under the Safeness Index-based LEMPC of Equation (7) applied in
a sample-and-hold fashion is established by the following theorem.
Theorem 2. Consider the system of Equation (1) under the stochastic Safeness Index-based LEMPC of
Equation (7) applied in a sample-and-hold implementation (i.e., u(t) = u(iΔ), ∀ iΔ ≤ t < (i + 1)Δ,
i = 0, 1, 2, ...). Then, given ρe ∈ (0, ρ), se ∈ (0, s) and probability λ ∈ (0, 1], there exist a sampling time
Δ ∈ (0, Δ∗ (λ)] and probabilities β, β , γ, γ ∈ [0, 1]:
supx∈∂Ωρ V1 ( x )
e

infx∈Rn \Ωρ V1 ( x )
supx∈∂Us V2 ( x )
e

infx∈Rn \Us V2 ( x )

(12a)

≤ β

(12b)

V1 ( x (0))
, β} ≤ γ
ρ

(12c)

V2 ( x (0)) 
, β } ≤ γ
s

(12d)

max{
max{

≤β

such that the following probabilities hold:
P( sup V1 ( x (t)) < ρ,
t∈[0,Δ)

sup V2 ( x (t)) < s)

t∈[0,Δ)

≥ (1 − β)(1 − β )(1 − λ), ∀ x (0) ∈ S1e

(13)

P( sup V1 ( x (t)) < ρ)
t∈[0,Δ)

(14)

≥ (1 − β)(1 − λ), ∀ x (0) ∈ S2e
P(τRn \S1e (Δ) ≤ τS1 (Δ))
o
≥ (1 − γ)(1 − γ )(1 − λ), ∀ x (0) ∈ S1 \S1e

(15)

where Se := S1e ∪ S2e is a subset of S that subtracts the risk margins ρ − ρe and s − se . The relationship
among the sets S1e := Ωρe ∩ Use and S2e := Se \S1e and the unsafe region D are shown in Figure 3.

67

Mathematics 2018, 6, 69



D
Us

[

Use



S1e

S2e



Ωρe











Ωρ





[
Figure 3. A schematic representing the unsafe region D (dark gray) and the region Se := S1e ∪ S2e
(light gray), which is the safe operating region S subtracting the risk margins ρ − ρe and s − se .

Proof. The proof consists of three parts. We ﬁrst show that under the Safeness Index-based LEMPC of
Equation (7), any state trajectory initiated from x (0) ∈ S1e has the probability deﬁned by Equation (13)
of staying in S1 := Ωρ ∩ Us . However, if x (0) ∈ S2e , we prove that under the Safeness Index-based
LEMPC of Equation (7), there exists the probability of Equation (14) for the state of the closed-loop
system to stay in Ωρ and with a sufﬁciently small Δ to stay in the part of Ωρ that excludes D . Finally, if
o , we can show that the closed-loop state trajectory reaches the boundary of S
x (0) is inside S1 \S1e
1e
ﬁrst before it leaves S1 (implying it does not enter D ) with the probability of Equation (15). However, if
x (0) ∈ Ωρ \Ωoρe and x (0) ∈
/ (Us ∪ D) (i.e., the white risk margin around S2e in Figure 3), we show
that it does not enter D , ∀t ∈ [0, Δ) in probability, as well. Additionally, for the sake of simplicity,
we denote the probabilities and expectations conditional on the event of AW given in the section
“Sample-And-Hold Implementation” as P∗ (·) and E∗ (·).
o
Part 1: To show that Equation (13) holds for all x(0) ∈ S1e , we consider both the case that x(0) ∈ S1e
o ,
and that x (0) ∈ ∂S1e . The former case is handled by Equations (8) and (9). Speciﬁcally, if x (0) ∈ S1e
then both x (0) ∈ Ωoρe and also x (0) ∈ Usoe . Then, P(supt∈[0,Δ) V1 ( x (t)) < ρ, supt∈[0,Δ) V2 ( x (t)) < s) ≥
1 − λ (Equations (8) and (9) for Δ∗ ≤ min{Δ1 , Δ2 }). Since (1 − λ) ≥ (1 − β)(1 − β )(1 − λ) for β ∈ [0, 1],
o . When x (0) ∈ ∂ S , Equation (13) is also satisﬁed.
β ∈ [0, 1], Equation (13) holds when x (0) ∈ S1e
1e
To show this, we ﬁrst assume x (0) ∈ ∂Ωρe and prove that the probability of x (t) staying in Ωρ within
one sampling period conditioned on the event of AW is (1 − β). When x (0) ∈ ∂Ωρe , Equation (7g)
will be utilized in the LEMPC of Equation (7). Under the constraint of Equation (7g), the optimization
problem of Equation (7) is solved such that LV1 is forced to be negative for any x (tk ) ∈ Ωρ \Ωoρe , which
implies that Equation (10) holds (i.e., LV1 < − for t ∈ [0, Δ] with the probability of the event AW ).
Using Dynkin’s formula [17], the following equation can be derived:
E∗ (V1 ( x (τΩρ \Ωoρe (t))))

= V1 ( x (0)) + E∗ (

 τ
(t)
Ω ρ \ Ωo
ρ
e

0

68

LV1 ( x (s))ds)

(16)

Mathematics 2018, 6, 69

The following probability is derived using similar arguments as in [11], for all x (0) ∈ ∂Ωρe :
P∗ (V1 ( x (t)) ≥ ρ, for some t ∈ [0, Δ))

≤

(17)

V1 ( x (0))
infx∈Rn \Ωρ V1 ( x )

Bounding Equation (17) with Equation (12a) and taking the complementary events, the following
probability is obtained:
inf

x (0)∈∂Ωρe

P∗ (V1 ( x (t)) < ρ, ∀t ∈ [0, Δ)) ≥ (1 − β)

(18)

Using the same steps as performed above, we can prove that ∀ x (0) ∈ ∂Use , the probability of x (t)
staying in Us within one sampling period conditioned on the event of AW is as follows:
inf

x (0)∈∂Use

P∗ (V2 ( x (t)) < s, ∀t ∈ [0, Δ)) ≥ (1 − β )

(19)

Since the set of initial conditions x (0) ∈ S1e is the intersection of Ωρe and Use , by combining
the probabilities of Equations (18) and (19) together and using Equation (10), the probability of
Equation (13) is obtained via the deﬁnition of conditional probability.
Part 2: If x (0) ∈ S2e ⊂ Ωρe , then either x (0) ∈ Ωoρe or x (0) ∈ ∂Ωρe . If x (0) ∈ S2e and Ωoρe ,
then Equation (8) holds and P(supt∈[0,Δ) V1 ( x (t)) < ρ) ≥ 1 − λ ≥ (1 − β)(1 − λ) for β ∈ [0, 1], and
Equation (14) therefore holds. If instead x (0) ∈ S2e and ∂Ωρe , then the results of Part 1 indicate that
Equation (18) holds. Applying the deﬁnition of conditional probability, this also gives that Equation (14)
holds. Moreover, we show that x (t) is maintained inside the safe operating region S within one
sampling period with the probability of Equation (14) (i.e., ∀t ∈ [0, Δ), x (t) will not jump into D
in probability). It is shown in the section “Sample-And-Hold Implementation” that ∀t ∈ [0, Δ), the
change of Vi ( x ) is limited (i.e., |V1 ( x (t)) − V1 ( x (0))| < k1 k21 Δ∗ , ∀t ≤ Δ∗ and |V2 ( x (t)) − V2 ( x (0))| <
k1 k22 Δ∗ , ∀t ≤ Δ∗ ) with a sufﬁciently small sampling period Δ∗ (maybe smaller than the one derived
by Δ∗ ≤ min{Δ1 , Δ2 , Δ3 }). Therefore, if x (0) ∈ S2e ⊂ Ωρe , x (t) cannot move across the entire level set
Us and jump into D within a sufﬁciently small Δ with the probability (1 − λ). Instead, the closed-loop
state at the next sampling time either stays in S2e or moves into S1e in probability. If x (t) enters S1e , the
probability of Equation (13) will be used to estimate the probability of closed-loop process operational
safety thereafter. Because (1 − λ) ≥ (1 − β)(1 − λ), for β, λ ∈ (0, 1], Equation (14) establishes the
probability of x (t) staying in the safe operating region S within one sampling period ∀ x (0) ∈ S2e .
o , we show that it is possible that the closed-loop state trajectory hits the
Part 3: If x (0) ∈ S1 \S1e
o
boundary of S1e before it hits the boundary of S1 . If both hitting times τRn \S1e (Δ) and τS1 (Δ) are longer
than a sampling period Δ, Equation (15) is trivially satisﬁed. However, if one of them or both occur
within one sampling period, we show that the probability of Equation (15) holds by ﬁrst showing
that the extreme case that x (0) ∈ (Ωρ \Ωoρe ) ∩ (Us \Usoe ) (which are the corners where the risk margins
ρ − ρe and s − se overlap in Figure 3) satisﬁes Equation (15). We ﬁrst show that the probability of the
event A T := {τRn \Ωoρe > τΩρ } can be given as follows ∀ x (0) ∈ Ωρ \Ωoρe :
P∗ (τRn \Ωoρe > τΩρ ) ≤ P∗ (

V1 ( x (τΩρ \Ωoρe ))
ρ

≥ 1) ≤

V1 ( x (0))
ρ

(20)

The event A T indicates that the state of the closed-loop system of Equation (1) reaches the
boundary of Ωρ before it reaches the boundary of Ωρe . The probability of Equation (20) is determined
via Equation (17) and the fact that the event {τRn \Ωoρe > τΩρ } belongs to the event {

69

V1 ( x (τΩρ \Ωo ))
ρ

ρe

≥ 1}.

Mathematics 2018, 6, 69

Assuming x (0) ∈ ∂Ωρc , where Ωρc := { x ∈ φd | V1 ( x ) ≤ ρc } and ρc ∈ [ρe , ρ], the following probability
is derived by bounding Equation (20) by Equation (12c):
sup

x (0)∈Ωρc \Ωoρe

P∗ (τRn \Ωoρe > τΩρ ) ≤ γ

(21)

Using the same steps as performed above, we can prove that ∀ x (0) ∈ Us \Usoe , the probabilities
similar to Equations (20) and (21) are derived as follows:
V2 ( x (0))
s
> τUs ) ≤ γ

P∗ (τRn \Uso > τUs ) ≤
sup

x (0)∈Usc \Usoe

∗

P (τRn \Usoe

(22a)
(22b)

where Usc := { x ∈ φd | V2 ( x ) ≤ sc } and sc ∈ [se , s]. Hence, the probability P(τRn \S1e (Δ) ≤ τS1 (Δ))
o is obtained by taking the
(i.e., Equation (15)) for the case where x (0) ∈ (Ωρ \Ωoρe ) ∩ (Us \Usoe ) ⊂ S1 \S1e
complementary event of Equations (21) and (22b) and using the deﬁnition of conditional probability.
o besides x (0) ∈ ( Ω \ Ωo ) ∩ (U \U o ),
We now address the other two possibilities for x (0) ∈ S1 \S1e
ρ
s
ρe
se
which are: (1) x (0) ∈ (Ωρ \Ωoρe ) ∩ Usoe and (2) x (0) ∈ (Us \Usoe ) ∩ Ωoρe . Consider the case where
x (0) ∈ (Ωρ \Ωoρe ) ∩ Usoe . If x (t) ∈ Usoe , ∀t ∈ [0, Δ), then P∗ (τRn \S1e (Δ) ≤ τS1 (Δ))=P∗ (τRn \Ωoρe (Δ) ≤
τΩρ (Δ)). If x (t) enters Us \Usoe before it leaves Ωρ \Ωoρe , for some t ∈ [0, Δ), then for sure it holds
that τRn \S1e (Δ) < τS1 (Δ) because the closed-loop state trajectory crosses the boundary of S1e ﬁrst.
Therefore, Equation (15) holds for both cases. The same analysis can be performed for the case
/ (Us ∪ D), it is readily shown
where x (0) ∈ (Us \Usoe ) ∩ Ωoρe . However, if x (0) ∈ Ωρ \Ωoρe and x (0) ∈
that Equation (21) holds due to the fact that x (0) ∈ Ωρ \Ωoρe . Additionally, since it is demonstrated
in Part 2 that the change of Vi ( x ) within one sampling period is limited in probability, it follows
that ∀ x (0) ∈ Ωρ \Ωoρe and x (0) ∈
/ (Us ∪ D), x (t) does not enter D in one sampling period with the
probability of 1 − λ, which implies that the closed-loop state either stays in S2 or moves into S1
in probability.
Remark 5. The Safeness Index-based LEMPC of Equation (7) is unable to ensure process operational safety
for the closed-loop system of Equation (1) because of stochastic disturbances with unbounded variation.
Additionally, in order to achieve process operational safety with higher probability, we should characterize
the safe operating region S well and design large enough risk margins (i.e., ρ − ρe and s − se ) to avoid frequent
activations of backup safety systems. Speciﬁcally, in Theorem 2, it is shown that as ρe and se decrease, the
probabilities of Equations (13)–(15) become larger, which implies that if we want to improve process operational
safety, the Safeness Index-based LEMPC design of Equation (7) should be designed with more conservatism
(i.e., choosing smaller ρe and se ). However, an operating region with smaller ρe and se in turn leads to less
economic beneﬁts, which is undesired for the Safeness Index-based LEMPC of Equation (7). Therefore, the
uncertain process operational safety caused by stochastic disturbances with unbounded variation is essentially a
trade-off between economic benefits and probabilistic process operational safety (i.e., in practice, we will choose
a conservative operating region to make the process sufficiently safe with respect to the unbounded disturbances,
especially considering the other safety systems online and the risks involved, while also optimizing process economics).
3.7. Feasibility in Probability
Recursive feasibility for the nominal system of Equation (1) with w(t) ≡ 0 under the Safeness
Index-based LEMPC of Equation (6) is guaranteed since there always exists a solution (e.g., the
Lyapunov-based controller Φn ( x ) in sample-and-hold) that satisﬁes all the constraints of Equation (6).
Now, consider the system of Equation (1) that has disturbance w(t) with unbounded variation.
Recursive feasibility under the stochastic Safeness Index-based LEMPC of Equation (7) can only
be guaranteed in probability over the operation period t ∈ [0, τN Δ). The probability is established as
follows, from which it is shown that the probabilistic bounds on recursive feasibility for the remainder
70

Mathematics 2018, 6, 69

of the entire time of operation decrease as the operation period becomes longer (however, this does not
necessarily mean the closed-loop system will not remain recursively feasible because at every sampling
time, the remaining time of operation decreases and therefore the probability that the LEMPC will
remain recursively feasible for the remaining time of operation increases at the next sampling time if
the closed-loop state was maintained within S throughout the prior sampling period).
Theorem 3. Consider the system of Equation (1) under the stochastic Safeness Index-based LEMPC of Equation (7)
applied in a sample-and-hold fashion. Then, if x(0) ∈ S , let V1 (x(t + iΔ)) = ρi < ρ, V2 (x(t + iΔ)) = si <
s, i = 0, 1, ..., τN − 1, and let A F represent the event that the optimization problem of Equation (7) is solved with
the satisfaction of recursive feasibility for time t ∈ [0, τN Δ). The probability of A F can be calculated as follows:
P( A F ) ≥ (1 − λ)τN

∏

i =0,1,...,τN −1

(1 − β i )(1 − βi )

(23)

where β i and βi are given as follows:
β i = max{ β,
βi = max{ β ,

supx∈∂Ωρ V1 ( x )
i

infx∈Rn \Ωρ V1 ( x )
supx∈∂Us V2 ( x )
i

infx∈Rn \Us V2 ( x )

}

(24a)

}

(24b)

Proof. We can derive the probability of Equation (23) following similar arguments to those in [11].
Since the deterministic prediction model of Equation (7b) is used in the stochastic Safeness Index-based
LEMPC of Equation (7), it follows that there always exists a solution u(t) = Φs ( x̃ (tq )) ∈ U,
∀t ∈ [tq , tq+1 ), q = k, . . . , k + τP − 1 that satisﬁes the constraints of Equation (7d–g) over the
prediction horizon provided that x (tk ), tk ≥ 0 is inside the safe operating region S . Therefore, this
implies that the probability of recursive feasibility (i.e., Equation (23)) is equal to the probability
of closed-loop process operational safety over t ∈ [0, τN Δ), which can be obtained via the recursive
application of Equation (13) with β i and βi of Equation (24) and the deﬁnition of conditional probability.
Additionally, it should be noted that if x (0) ∈ S2e , the state is not in ∂Usi in Equation (24). In this case,
βi simply takes the value of β , and the probability of Equation (23) still holds since it is shown in
the proof of Theorem 2 that the state either stays in S2 or moves into S1 with the probability of 1 − λ
(i.e., Equation (23) gives a conservative result in this case).
Remark 6. In Theorem 3, probabilistic process operational safety and probabilistic recursive feasibility over
the operation period t ∈ [0, τN Δ) are established for the closed-loop system of Equation (1) under the Safeness
Index-based LEMPC of Equation (7). Due to the disturbance w(t) with unbounded variation, the closed-loop
state x (t) may leave S at any sampling step, and thus, closed-loop process operational safety and recursive
feasibility of the Safeness Index-based LEMPC of Equation (7) can only be derived in a probabilistic manner
(i.e., ∀t ∈ [0, τN Δ), these properties hold with the probability of Equation (23)). Since the existence of a
feasible control action is only guaranteed in the safe operating region S , backup safety systems should be
designed to handle the process if the state exits the safe operating region. Additionally, since the probabilities of
Equations (13)–(15) are less than one if ρe < ρ and se < s, the probabilities of recursive feasibility and process
operational safety for t ∈ [0, τN Δ) decrease as the operation period τN Δ becomes longer. However, it should
be noted that this dependence is not unique to the MPC, but to all control designs that try to keep the process
state within a speciﬁc region in state-space in the presence of stochastic disturbances with unbounded variation
(i.e., the probability to keep the closed-loop state in S for all the remaining time of operation goes to zero at t0 as
the process operation time τN → ∞).

71

Mathematics 2018, 6, 69

4. Application to a Chemical Process Example
A chemical process example is used to illustrate the application of the stochastic Safeness
Index-based LEMPC of Equation (7) to maintain the closed-loop state within a safe operating region in
state-space in probability. Speciﬁcally, a well-mixed, non-isothermal continuous stirred tank reactor
(CSTR) where an irreversible second-order exothermic reaction takes place is considered. The reaction
transforms a reactant A to a product B (A → B). The inlet concentration of A, the inlet temperature
and the feed volumetric ﬂow rate of the reactor are C A0 , T0 and F, respectively. The CSTR is equipped
with a heating jacket that supplies/removes heat at a rate Q. The CSTR dynamic model is described
by the following material and energy balance equations:
dC A =

F
(C − C A )dt − k0 e−E/RT C2A dt
VL A0

+ σ1 (C A − C As )dw1 (t)
dT =

(25a)

F
ΔHk0 − E/RT 2
Q
( T0 − T )dt −
e
C A dt +
dt
VL
ρL Cp
ρ L C p VL

+ σ2 ( T − Ts )dw2 (t)

(25b)

where C A is the concentration of reactant A in the reactor, VL is the volume of the reacting liquid in
the reactor, T is the temperature of the reactor and Q denotes the heat input rate. The concentration
of reactant A in the feed is C A0 . The feed temperature and the volumetric ﬂow rate are T0 and F,
respectively. The reacting liquid has a constant density of ρ L and a heat capacity of C p . ΔH, k0 , E
and R represent the enthalpy of reaction, pre-exponential constant, activation energy and ideal gas
constant, respectively. Process parameter values are given in Table 1. The disturbance terms dw1 and
dw2 in Equation (25) are independent standard Gaussian white noise with the standard deviations
σ1 = 2.5 × 10−3 and σ2 = 0.15, respectively. It is noted that the disturbance terms of Equation (25)
vanish at the steady state.
Table 1. Parameter values of the continuous stirred tank reactor (CSTR).
T0 = 300 K

F = 5 m3 /h

VL = 1 m3

E = 5 × 104 kJ/kmol

k0 = 8.46 × 106 m3 /kmol h

ΔH = −1.15 × 104 kJ/kmol

C p = 0.231 kJ/kg K

R = 8.314 kJ/kmol K

ρ = 1000 kg/m3

C A0s = 4 kmol/m3

Qs = 0.0 kJ/h

C As = 1.22 kmol/m3

Ts = 438 K

The initial steady-state of the CSTR is at (C As , Ts ) = (1.22 kmol/m3 , 438 K), and (C A0s Qs )
= (4 kmol/m3 , 0 kJ/h). The manipulated inputs are the inlet concentration of species A and the heat
input rate, which are represented by the deviation variables u1 = ΔC A0 = C A0 − C A0s and u2 = ΔQ =
Q − Qs , respectively. The manipulated inputs are bounded as follows: |ΔC A0 | ≤ 3.5 kmol/m3 and
|ΔQ| ≤ 5 × 105 kJ/h. Therefore, the states and the inputs of the closed-loop system are represented by
x T = [C A − C As T − Ts ] and u T = [ΔC A0 ΔQ], respectively.
The control objective of the stochastic Safeness Index-based LEMPC of Equation (7) is to maximize
the production rate of B, while maintaining the closed-loop state trajectories in the safe operating region S
in probability. The objective function of Equation (7a) is the production rate of B: Le (x̃, u) = k0 e−E/RT C2A .
The Lyapunov functions are designed
quadratic
form Vi (x ) = x T Pi x, i = 1, 2, where

 using the standard

1060 22
1060 10
the positive deﬁnite matrices P1 =
and P2 =
are chosen to characterize
22
0.52
10
5
72

Mathematics 2018, 6, 69

T − Ts (K)

the set φd for the stochastic system of Equation (25). The nonlinear feedback controllers in [13,18] are
utilized as Φn ( x ) and Φs ( x ), respectively. The level sets of the Lyapunov functions V1 ( x ) and V2 ( x )
are chosen as ρ = 368 and s = 8100 to create a safe operating region S . The explicit Euler method
with an integration time step of hc = 10−4 h is applied to numerically simulate the dynamic model of
Equation (25). The nonlinear optimization problem of the stochastic Safeness Index-based LEMPC of
Equation (7) is solved using the IPOPT software package [19] with the sampling period Δ = 10−2 h.
With the ﬁxed sampling period Δ = 10−2 h, ρ = 368 and s = 8100, we focus on the impact of ρe and se
on probabilistic process operational safety in the following simulations.
It is ﬁrst shown in Figure 4 that under the Safeness Index-based LEMPC of Equation (6) designed
for the nominal system of Equation (25), the closed-loop state of the nominal system of Equation (25)
stays in the safe operating region S within the entire operation period ts = 1 h. Additionally, the
Safeness Index-based LEMPC of Equation (6) is solved successfully in each iteration to obtain a feasible
control action u(t) that is applied in the next sampling period.

Ωρ
Us










CA − CAs (kmol/m )
3

Figure 4. Closed-loop trajectory under the Safeness Index-based LEMPC of Equation (6) for the initial
t
condition (0, 0) (in deviation variable form) with the additional material constraint: t1s 0 s u1 (τ )dτ =
3
0 kmol/m .

It follows that under the stochastic Safeness Index-based LEMPC of Equation (7), the state of
the closed-loop system of Equation (25) stays in S with different probabilities for different ρe and se .
To better understand the relationship between probabilistic process operational safety and the choices
of ρe and se , we derived the experimental probabilities via 500 simulation runs for the same initial
condition (ΔC As , ΔTs ) = (0 kmol/m3 , 0 K) and different choices of ρe and se (without the material
constraint applied for the nominal system). Let AV denote the event that the closed-loop state stays in
S over the operation period ts = 1 h. The results are reported in Table 2.
Table 2. Experimental probability for different values of ρe and se .
ρe /ρ

se /s

P ( AV )

0.98
0.95
0.92
0.92
0.92
0.92

0.99
0.99
0.99
0.97
0.95
0.92

14.0%
63.1%
82.0%
82.8%
83.6%
85.8%

73

Mathematics 2018, 6, 69

T − Ts (K)

From Table 2, it is observed that with ﬁxed se , P( AV ) becomes larger as ρe decreases.
Likewise, with ﬁxed ρe , P( AV ) increases as se decreases. It is demonstrated that a higher probability
of closed-loop process operational safety of the system of Equation (25) is achieved when ρe and se
are more conservative. Let ρe = 320 and se = 6800. It is obtained that the probability of the states
of the closed-loop system of Equation (25) remaining in the safe operating region S reaches 97.4%.
Additionally, the averaged total economic beneﬁt (i.e., the time integral of the stage cost Le over the
operation period ts = 1 h) is 24.3 under the Safeness Index-based LEMPC of Equation (7), which has
an improvement of 81% compared to 13.4 under steady-state operation. Therefore, in this example,
the closed-loop system of Equation (25) under the Safeness Index-based LEMPC achieves a relatively
high probability of process safety and a satisfactory process economic performance simultaneously
with ρe = 320 and se = 6800. For an actual process, additional work should likely be performed,
which can use techniques like those demonstrated here, to increase the probability of the states of the
closed-loop system remaining within the safe operating region to higher values considered acceptable
for the process at hand given its design, hazards and the backup measures (alarms/operators, safety
systems, relief systems) in place.
On the other hand, it is observed from Table 2 that decreasing ρe increases the probability
P( AV ). By looking at unsafe closed-loop trajectories (i.e., trajectories that leave the safe operating
region S under the Safeness Index-based LEMPC of Equation (7) during the operation period ts ) in
500 simulation runs (one of them is shown in Figure 5), it is observed that almost all of the unsafe
trajectories leave S through the boundary of Ωρ (i.e., the right edge of Ωρ in Figure 5). The reason for
this behavior is that the local optimum value of Le is calculated to be at the right edge of Ωρ , which
is shown as the yellow region in Figure 6. Therefore, under the Safeness Index-based LEMPC of
Equation (7), the closed-loop trajectory is optimized to approach this high production rate region and
begin circling back due to the disturbances, which leads to a higher probability of leaving the safe
operating region S from Ωρ . Additionally, it is observed in Figure 6 that the production rate decreases
as the safe operating region shrinks (i.e., the color becomes darker), which is consistent with the fact
that smaller ρe and se lead to safer process operation, at the cost of lower economic performance.

Ωρ
Us










CA − CAs (kmol/m )
3

Figure 5. An example closed-loop trajectory under the Safeness Index-based LEMPC of Equation (7)
for the initial condition (0, 0) that leaves the safe operating region S , in which ρe = 320 and se = 6800.

74

Mathematics 2018, 6, 69

Figure 6. The production rate Le = k0 e− E/RT C2A within the safe operating region S .

5. Conclusions
In this work, a Safeness Index-based LEMPC design was developed for stochastic nonlinear
systems. Under the assumption of stabilizability of the origin of the stochastic nonlinear system via
a stochastic Lyapunov-based control law, an economic model predictive controller was developed
to account for process operational safety by utilizing Lyapunov-based constraints to maintain the
closed-loop state in a safe operating region deﬁned by a Safeness Index function. Under the stochastic
Safeness Index-based LEMPC, economic optimality may be achieved with respect to the objective
function and sampling period. Additionally, recursive feasibility and process operational safety
of the closed-loop stochastic nonlinear system were derived in probability for a well-characterized
safe operating region. A chemical reactor example was used to demonstrate the effectiveness of the
proposed control method.
Author Contributions: Zhe Wu developed the main results, performed the simulation studies and prepared
the initial draft of the paper. Helen Durand contributed to the theory of probabilistic process operational safety
and revised this manuscript. Panagiotis D. Christoﬁdes developed the idea of Safeness Index-based LEMPC for
stochastic nonlinear systems, oversaw all aspects of the research and revised this manuscript.
Acknowledgments: Financial support from the National Science Foundation and the Department of Energy is
gratefully acknowledged.
Conﬂicts of Interest: The authors declare no conﬂict of interest.

References
1.
2.
3.
4.
5.

Sanders, R.E. Chemical Process Safety: Learning from Case Histories; Butterworth-Heinemann: Oxford, UK, 2015.
Albalawi, F.; Durand, H.; Christoﬁdes, P.D. Process operational safety using model predictive control based
on a process Safeness Index. Comput. Chem. Eng. 2017, 104, 76–88. [CrossRef]
Albalawi, F.; Durand, H.; Alanqar, A.; Christoﬁdes, P.D. Achieving operational process safety via model
predictive control. J. Loss Prev. Process Ind. 2018, 53, 74–88. [CrossRef]
Heidarinejad, M.; Liu, J.; Christoﬁdes, P.D. Economic model predictive control of nonlinear process systems
using Lyapunov techniques. AIChE J. 2012, 58, 855–870. [CrossRef]
Angeli, D.; Amrit, R.; Rawlings, J.B. On average performance and stability of economic model predictive
control. IEEE Trans. Autom. Control 2012, 57, 1615–1626. [CrossRef]

75

Mathematics 2018, 6, 69

6.
7.
8.
9.
10.

11.
12.
13.
14.
15.

16.
17.
18.
19.

Müller, M.A.; Angeli, D.; Allgöwer, F. Economic model predictive control with self-tuning terminal cost.
Eur. J. Control 2013, 19, 408–416. [CrossRef]
Ellis, M.; Durand, H.; Christoﬁdes, P.D. A tutorial review of economic model predictive control methods.
J. Process Control 2014, 24, 1156–1178. [CrossRef]
Van Hessem, D.; Bosgra, O. Stochastic closed-loop model predictive control of continuous nonlinear chemical
processes. J. Process Control 2006, 16, 225–241. [CrossRef]
Mahmood, M.; Mhaskar, P. Lyapunov-based model predictive control of stochastic nonlinear systems.
Automatica 2012, 48, 2271–2276. [CrossRef]
Maciejowski, J.M.; Visintini, A.L.; Lygeros, J. NMPC for complex stochastic systems using a Markov chain
Monte Carlo approach. In Assessment and Future Directions of Nonlinear Model Predictive Control; Springer:
Berlin/Heidelberg, Germany, 2007, 269–281.
Wu, Z.; Zhang, J.; Zhang, Z.; Albalawi, F.; Durand, H.; Mahmood, M.; Mhaskar, P.; Christoﬁdes, P.D.
Economic Model Predictive Control of Stochastic Nonlinear Systems. AIChE J. 2018. [CrossRef]
Khasminskii, R. Stochastic Stability of Differential Equations; Springer Science & Business Media:
Berlin/Heidelberg, Germany, 2011; Volume 66.
Florchinger, P. A universal formula for the stabilization of control stochastic differential equations.
Stoch. Anal. Appl. 1993, 11, 155–162. [CrossRef]
Deng, H.; Krstic, M.; Williams, R. Stabilization of stochastic nonlinear systems driven by noise of unknown
covariance. IEEE Trans. Autom. Control 2001, 46, 1237–1253. [CrossRef]
Wu, Z.; Albalawi, F.; Zhang, Z.; Zhang, J.; Durand, H.; Christoﬁdes, P.D. Contro Lyapunov-Barrier
Function-Based Model Predictive Control of Nonlinear Systems. In Proceedings of the American Control
Conference, Milwaukee, WI, USA, 27–29 June 2018; in press.
Ciesielski, Z.; Taylor, S.J. First passage times and sojourn times for Brownian motion in space and the exact
Hausdorff measure of the sample path. Trans. Am. Math. Soc. 1962, 103, 434–450. [CrossRef]
Øksendal, B. Stochastic differential equations. In Stochastic Differential Equations; Springer: Berlin/Heidelberg,
Germany, 2003; pp. 65–84.
Sontag, E.D. A ‘universal’ construction of Artstein’s theorem on nonlinear stabilization. Syst. Control Lett.
1989, 13, 117–123. [CrossRef]
Wächter, A.; Biegler, L.T. On the implementation of an interior-point ﬁlter line-search algorithm for large-scale
nonlinear programming. Math. Progr. 2006, 106, 25–57. [CrossRef]
c 2018 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access

article distributed under the terms and conditions of the Creative Commons Attribution
(CC BY) license (http://creativecommons.org/licenses/by/4.0/).

76

Article

Enhancing Strong Neighbor-Based Optimization for
Distributed Model Predictive Control Systems
Shan Gao 1,2 , Yi Zheng 1,2, * and Shaoyuan Li 1,2, *
1

Department of Automation, Shanghai Jiao Tong University, Shanghai 200240, China;
gaoshan1117@sjtu.edu.cn
2
Key Laboratory of System Control and Information Processing, Ministry of Education of China,
Shanghai 200240, China
* Correspondence: yizheng@sjtu.edu.cn (Y.Z.); syli@sjtu.edu.cn (S.L.)
Received: 1 April 2018; Accepted: 8 May 2018; Published: 22 May 2018

Abstract: This paper considers a class of large-scale systems which is composed of many interacting
subsystems, and each of them is controlled by an individual controller. For this type of system,
to improve the optimization performance of the entire closed-loop system in a distributed framework
without the entire system’s information or too-complicated network information, connectivity is
always an important topic. To achieve this purpose, a distributed model predictive control (DMPC)
design method is proposed in this paper, where each local model predictive control (MPC) considers
the optimization performance of its strong coupling subsystems and communicates with them.
A method to determine the strength of the coupling relationship based on the closed-loop system’s
performance and subsystem network connectivity is proposed for the selection of each subsystem’s
neighbors. Finally, through integrating the steady-state calculation, the designed DMPC is able to
guarantee the recursive feasibility and asymptotic stability of the closed-loop system in the cases of
both tracking set point and stabilizing system to zeroes. Simulation results show the efﬁciency of the
proposed DMPC.
Keywords: model predictive control; distributed model predictive control; large-scale systems;
neighborhood optimization

1. Introduction
There is a class of complex large-scale industrial control systems which are composed of many
interacting and spatially distributed subsystems, and each subsystem is controlled by an individual
controller (e.g., large-scale chemical process [1], smart micro-grid [2,3] systems, distributed generation
systems [4]), where the controllers exchange information with each other through a communication
network. The objective is to achieve a good global performance of the entire closed-loop system or a
common goal of all subsystems by the controller network. This objective is usually to track setpoints
with minimized total error or to stabilize the entire system to zeroes in the dynamic control layer.
Distributed model predictive control (DMPC) controls each subsystem by an individual local
model predictive control (MPC), and is one of the most important distributed control or optimization
algorithms [1,5–8], since it not only inherits MPC’s ability to get good optimization performance and
explicitly accommodate constraints [9,10], but also has the advantages of a distributed framework
of fault-tolerance, less computation, and being ﬂexible to system structure [7,11–14]. However,
compared with the centralized control scheme, its performance is still not as good as that of centralized
MPC for coupling systems in a peer-to-peer distributed control framework.
Many algorithms and design methods have appeared in the literature for different types of
systems and for different problems in the design of DMPCs. For example, the design of DMPC
for nonlinear systems [15,16], DMPC for uncertain systems [15,17], DMPC for networked systems
Mathematics 2018, 6, 86; doi:10.3390/math6050086

77

www.mdpi.com/journal/mathematics

Mathematics 2018, 6, 86

with time delay [18], a decentralized optimization algorithm for solving DMPC [19], the design of
cooperative strategies for improving the performance of DMPC [20], the design of an event-based
communication DMPC for reducing the load on the communication network [21], as well as the
design of a DPMC control structure [22]. Among these algorithms, several DMPC algorithms
relate to the purpose of improving the closed-loop optimization performance while considering
the information connectivity [5,21,23–26]. Information connectivity is considered because it directly
affects the structural ﬂexibility and error tolerance ability. Reference [27] proposed a DMPC where
each subsystem-based MPC only communicates with its directly-impacted neighbors and uses an
iterative algorithm to obtain the “Nash optimality”. References [20,28,29] proposed cooperative DMPC,
where each MPC considers the cost of the entire system and communicates with all the other MPCs
to obtain “Pareto optimality”. To reduce the information connectivity and increase the structural
ﬂexibility, Reference [30] proposed that each subsystem optimize all the subsystems impacted by it
over the optimization horizon. The solution of this method is equal to the cooperative DMPC, while its
communication efforts are less than the cooperative DMPC, especially for sparse systems. References
[31,32] gave a strategy to dynamically adjust the weighting of performance index in cooperative MPC
to avoid bad performance occurring in some subsystems. In an effort to achieve a trade-off between
the optimization performance of the entire system and the information connectivity, an intuitively
appealing strategy, called impacted-region cost optimization-based DMPC, is proposed in [33–35],
where each subsystem-based MPC only considers the cost of its own subsystem and those of the
subsystems directly impacted by it. Consequently, each MPC only communicates with its neighboring
MPCs. In addition, in some papers, the control ﬂexibility and information connectivity are paid
more attention by researchers. References [14,36] provide a tube-based DMPC where all interactions
are considered as disturbances and each subsystem-based MPC is solved independently. It does
not exchange the state and input trajectory, but the interaction constraints, to avoid the interaction
consistency problem. This method is able to improve the ﬂexibility and fault tolerance ability of the
control network [37]. References [25,37] proposed reconﬁgurable DMPC and plug-and-play DMPC
based on dissipative theory, which focus on the problem of how to design a DMPC which allows the
addition or deletion of subsystems without any change in existing controllers. It can be seen that
the optimization performance of the entire system and structural ﬂexibility are two conﬂicting key
points in DMPC design. The selection of the range of each subsystem’s neighbors to be optimized in
each subsystem-based MPC is important in the design of DMPC in order to obtain good optimization
performance without unnecessary information connections. Thus, the aim of this paper is to design an
algorithm to determine the range of each subsystem optimized from the point of view of enlarging
each subsystem MPC’s feasible region, then to improve the entire system’s optimization performance
without too-complicated network connectivity. Then, based on the result of this algorithm, we aim to
design a stabilized neighborhood optimization-based DMPC that handles state constraints and is able
to be used in target tracking.
As for target tracking, the difﬁculty in DMPC is to guarantee the recursive feasibility.
References [38–40] provide a tracking algorithm for a series of MPC systems, where a steady-state
target optimizer (SSTO) is integrated in the design of the cost function. The proposed controller is
able to drive the whole system to any admissible setpoint in an admissible way, ensuring feasibility
under any change of setpoint. As for distributed systems, [38] gives a DMPC for tracking based on
the method introduced in [39] and a cooperative DMPC strategy. Reference [41] proposes another
method based on global calculations of targeting tracking. It does not require a feasible starting point
of each distributed predictive controller. These methods provide good references and possible methods
for designing a tracking DMPC that considers optimization performance improvement and network
connectivity.
In this paper, strong coupling neighbor-based optimization DMPC is proposed. With this method,
each local MPC coordinates and communicates with its strong coupling neighbors. It takes its
strongly-coupling downstream subsystems cost function into account in its cost function to improve

78

Mathematics 2018, 6, 86

the performance of the entire closed-loop system. To reduce the unnecessary network connectivity, the
interaction terms of weak coupling upstream neighbors are ignored in its predictive model and are
considered as bounded disturbances. In addition, the closed-loop optimization performance is used
to determine which interaction should be regarded as strong coupling and be considered in DMPC.
The strategy proposed in [38] is used to guarantee the recursive feasibility and stability in the target
tracking problem. An asymptotically-stable closed-loop system with state constraints is guaranteed.
The remainder of this paper is organized as follows. Section 2 describes the problem to be solved.
Section 3 describes the design of the proposed DMPC. Section 4 analyzes the stability of the closed-loop
system. Section 5 presents the simulation results to demonstrate the effectiveness of the proposed
algorithm. Finally, a brief conclusion to the paper is drawn in Section 6.
2. Problem Description
Considering a large-scale discrete-time linear system which is composed of many interacting
subsystems, the overall system model is:


x + = Ax + Bu,
y = Cx,

(1)

where x ∈ Rnx is the system state, u ∈ Rnu is the system current control input, y ∈ Rny is the
controlled output, and x + is the successor state. The state of the system and control input applied at
sample time t are denoted as x (t),u(t), respectively. Moreover, there are hard constraints in the system
state and control input. That is, for ∀t ≥ 0:
x (t) ∈ X , u(t) ∈ U ,

(2)

where X ⊂ Rnx and U ⊂ Rnu are compact convex polyhedra containing the origin in their interior.
Given Model (1), without loss of generality, the overall system is divided in to m subsystems,
denoted as Si , i ∈ I0:m . Thus, u = (u1 , u2 , ..., um ) and x = ( x1 , x2 , ..., xm ), then the subsystem model for
Si , ∀i ∈ I0:m is:
xi+ = Aii xi + Bii ui + ∑ j∈N Bij u j ,
i

(3)

where Ni is the set of subsystems that send inputs to the current subsystem Si . For subsystem S j , j ∈ Ni ,
S j couples with Si by sending control input ui to Si . In particular, j ∈ Ni if Bij = 0. Given the overall
system constraints set X , U , xi , ui ﬁt hard constraints xi (t) ∈ Xi , ui (t) ∈ Ui .
In this paper, for ease of analysis, here the deﬁnitions of neighbor (upstream-neighbor) and
downstream neighbor are given.
Deﬁnition 1. Given subsystem Si with state evolution Equation (3), deﬁne S j , S j ∈ Ni , which send input
information to Si as the neighbor (upstream neighbor) of Si . Moreover, for arbitrary S j , S j ∈ Ni , since Si
receives input information from S j , Si is deﬁned as a downstream neighbor of S j .
Denote the tracking target as yt . Assume that ( A, B) is stabilizable and the state is measurable.
The aim of a tracking problem given a target yt is to design a controller which enables y(t) → yt in an
admissible way when t → ∞. Hence, the origin control objective function of the overall system is:
N −1

VNorigin ( x, yt ; u) =

∑

k =0

(Cx (k) − ŷt 2Qo + u(k) − ût 2R ) + Cx ( N ) − ŷt 2Po ,

(4)

where Po > 0, Qo > 0, and R > 0 is the weighting coefﬁcients matrix, and ut is steady input
corresponding to yt .

79

Mathematics 2018, 6, 86

The problem considered here is to design a DMPC algorithm to control a physical network, which
coordinate with each other considering the following performance indicators:
•
•
•

to achieve a good optimization performance of the entire closed-loop system.
to guarantee the feasibility of target tracking.
to simplify the information connectivity among controllers to guarantee good structural ﬂexibility
and error-tolerance of the distributed control framework.

To solve this problem, in this paper, an enhanced strong neighbor-based optimization DMPC is
designed, and is detailed in the next section.
3. DMPC Design
In an interacting distributed system, the state evolution of each subsystem is affected by the
optimal control decisions of its upstream neighbors. Each subsystem considers if these effects will help
to improve the performance of entire closed-loop system. On the other hand, these impacts have
different strengths for different downstream subsystems. Some of the effects are too small and can
be ignored. If these weakly-coupling downstream subsystems’ cost functions are involved in each
subsystem’s optimization problem, additional information connections arise with little improvement
of the performance of the closed-loop system. The increase of information connections will hinder
the error tolerance and ﬂexibility of the distributed control system. Thus, each subsystem-based
MPC takes the cost functions of its strongly-interacting downstream subsystems into account
to improve the closed-loop performance of the entire system and receive information from its
strong-coupling neighbors.
3.1. Strong-Coupling Neighbor-Based Optimization for Tracking
Given that the coupling degrees between different subsystems differ substantially, here we enable
the subsystem to cooperate with strong-coupling neighbors while treating the weak-coupling ones as
disturbance. Deﬁne Ni(strong) as a set of strong-coupling neighboring subsystems and Ni(weak) as set of
weak-coupling neighbors. The rule for deciding strong-coupling systems is detailed in Section 3.4.
Then, for Si , we have:
xi+ = Aii xi + Bii ui + ∑ j∈N
where
wi =

i (strong)

Bij u j + wi ,

(5)

∑ j∈Ni(weak) Bij u j ,

wi ∈ Wi , Wi = (⊕ Bij U j ),

Ni(weak) ∪ Ni(strong) = Ni = { j| Bij = 0, j = i }.
The deviation wi represents the inﬂuence collection of weak-coupling upstream neighbors in Ni,(weak) .
wi is contained in a convex and compact set Wi which contains the origin.
If the weak coupling inﬂuence wi is neglected, a simpliﬁed model based on Si is acquired. That is:
x̄i+ = Aii x̄i + Bii ūi + ∑ j∈N

i (strong)

Bij ū j .

(6)

Here x̄i , ūi , and ū j , j ∈ Ni(strong) represent the state and input of a simpliﬁed subsystem model
which neglects weak-coupling upstream neighbors’ inﬂuence wi .
The simpliﬁed overall system model with new coupling relation matrix B̄ is:
x̄ + = A x̄ + B̄ū,

(7)

where x̄ = ( x̄1 , x̄2 , ..., x̄m ) and ū = (ū1 , ū2 , ..., ūm ) represent states and inputs in this simpliﬁed model.
80

Mathematics 2018, 6, 86

Considering the target-tracking problem of the simpliﬁed model, in order to ensure the output
track, given target yt , constraints are given for terminal state prediction. If the current target yt is set as
the tracking target through the controller optimization, when yt changes, the terminal constraints need
to change immediately. The optimal solution at a previous time may not ﬁt the terminal constraints
brought by the changed yt . This violates the recursive feasibility of the system. Thus, here a steady
state optimization is integrated in the MPC for tracking where an artiﬁcial feasible tracking goal ys is
proposed as a medium variable. This variable works as an optimized variable. With setting tracking
point ys equal to the previous target, the recursive feasibility will not be violated by the target change.
The medium target ys and its state x̄S and input ūs should satisfy the simpliﬁed system’s steady
state equations. It has


A − Inx
C

B̄
0

⎡ ⎤
 x̄
 
s
0
0 ⎢ ⎥
,
⎣ūs ⎦ =
−I
0
ys


x̄s ūs = My ys .

(8)
(9)

Here My is a suitable matrix. That is, target ys ’s corresponding inputs ūs and states x̄s in the
simpliﬁed model can be expressed by ys . The equation
 is based
 on the premise of Lemma 1.14 in [42].

If Lemma 1.14 does not hold, a Mθ and θ which ﬁts x̄s ūs = Mθ θ can be found, which can replace
the ys as a variable to be solved.
For the manual tracking target ys for the overall system, we have ys = {y1,s , . . . , yi,s , . . . , ym,s }.
That is, given ys , arbitrary subsystem Si gets a subtracking target ys,i . Similar to (9), x̄s,i , ūs,i are solved.
With the simpliﬁed model and artiﬁcial tracking target ys,i , according to (9), in the strong-coupling
neighbor-based optimization MPC algorithm, the objective function optimized in subsystem
 (x , y ; x , u
Si , ∀i ∈ [1, m] is set as ViN
i t i i,0:N −1 , ys ) as follows:

ViN
( xi , yt ; xi , ui,0:N −1 , ys ) =

N −1

∑

k =0

( xi (k) − x̄i,s 2Qi + ui (k) − ūi,s 2Ri ) +  xi ( N ) − x̄i,s 2Pi + V0 (yi,s , yt,i )

N −1

+

∑ ∑

k =0 h∈Hi





 xh (k ) − x̄s,h 2 +  xh ( N ) − x̄s,h  ,
Q
P
h

h

(10)

where xi , yt is the given initial state and target, ui,0:N −1 are input predictions in 0 : N − 1 sample time
ahead. ys is the admissible target. Qi = Ci Qo,i Ci > 0 and

Hi = {h|i ∈ Nh(strong) , ∀Sh , h ∈ [1, m], h = i }.

(11)

Here, Si ’s controller design takes the strong-coupling downstream neighbors’ performances as
part of its optimized objective. That is, the current subsystem Si ’s optimal solution is decided by its
own and downstream neighbors in set Hi , which is strongly impacted by Si .
Next, we will use the simpliﬁed model in (6) with only strong couplings to solve the tracking
problem (10) for each subsystem. To guarantee control feasibility and stability, the following deﬁnitions
and assumptions are given.
One important issue is to deal with the deviation caused by neglecting weak-coupling neighbor
inputs. Here robust positively invariantt sets are adopted to enable the deviation of states to be
bounded and the real system’s states to be controlled in X .
Deﬁnition 2. (Robust positively invariant set control law) Given e = ( x − x̄ ) which represents the dynamics
of the error between the origin plant and the simpliﬁed model:
e+ = Ak e + w,

81

(12)

Mathematics 2018, 6, 86

with Ak = ( A + BK ). A set φ is called a robust positively invariant set for system (12) if Ak φ ⊕ W ⊆ φ, and
the control law is called a robust positively invariant set control law.
The deﬁnition of a robust positively invariant set illustrates that for system x = Ax + Bu + w if φ
and robust positively invariant set control law K exist, then for e(0) = x (0) − x̄ (0), the trajectories of
the original system at arbitrary time t denoted as x (t) can be controlled in x (t) = x̄ (t) ⊕ φ.
Based on this deﬁnition, in this paper the dynamics of deviation ( xi − x̄i ) introduced by neglecting
weak-coupling neighbors can be solved. For subsystem Si proposed as (5), the deviation is written as:
ei+ = Aii ei + Bii ui,e + wi ,
where ei = xi − x̄i is the deviation from the simpliﬁed model to the original model and ui,e is the
control law. There exists the set φi as a robust positively invariant set for Si if ( Aii + Bii Ki )ei ∈ φi
for all ei ∈ φi and all wi ∈ Wi . Here ui,e = Ki ei is a feedback control input and we denote Ki as the
robust positively invariant set control law for Si . Then, it is easy to obtain xi (t) = x̄i (t) ⊕ φi for time t.
Let ( x̄i (t), ūi (t)) ∈ Fi , where Fi = (Xi × Ui )  (φi × Ki φi ), the origin system state and input satisfy
( xi (t), Ki ( xi (t) − x̄i (t)) + ūi (t)) ∈ Xi × Ui . Thus, with the help of a robust positively invariant set, the
original system optimization is transferred to a simpliﬁed model. For the overall system, we have
K = diag(K1 , K2 , ..., Km ).
With Deﬁnition 2, if the deviation brought by omitting weak-coupling neighbors is controlled in
a robust positively invariant (RPI) set φi with control law Ki and simpliﬁed model in (7) has control
law and state ūi , x̄i conﬁned in Ui  Ki φi , Xi  φi , respectively, the local subsystem will have a feasible
solution for the optimization.
As for the manually-selected tracking target ys , based on the overall simpliﬁed model in (7),
the following deﬁnition is given:
Deﬁnition 3. (Tracking invariant set control law). Consider that overall system (7) is controlled by the
following control law:
ū = K̄ ( x̄ − x̄s ) + ūs = K̄ x̄ + Lys .

(13)

Let A + B̄K̄ be Hurwitz, then this control law steers system (7) to the steady state and input ( x̄s , ūs ) =
My ys . K̄ is denoted as the tracking invariant set control law.
Denote the set of initial state and steady output that can be stabilized by control law (13) while
fulﬁlling the system constraints throughout its evolution as an invariant set for tracking ΩK̄ . For any
( x (0), ys ) ∈ ΩK̄ , the trajectory of the system x̄ + = A x̄ + Bū controlled by ū = K̄x + Lys is conﬁned in
ΩK̄ and tends to ( xs , us ) = My ys .
Under Deﬁnitions 2 and 3, before introducing the enhancing strong neighbor-based optimization
DMPC, some assumptions for the closed-loop system feasibility and stability are given as follows.
The concrete theorem and an analysis of stability and feasibility are given in Section 4.
Assumption 1. The eigenvalues of Aii + Bii Ki are in the interior of the unitary circle. φi is an admissible
robust positively invariant set for Si ’s deviation ( xi − x̄i ) subject to constraints Fi , and the corresponding
feedback control law is ui,e = Ki ei .
Assumption 2. Let ΩK̄ be a tracking invariant set for the simpliﬁed system (7) subject to constraints F =
{{( x̄1 , ū1 ), ..., ( x̄m , ūm )}|∀i, ( x̄i , ūi ) ∈ (Xi × Ui )  (φi × K̄i φi )} , and the corresponding feedback gain matrix
is K̄ = {K̄1 , K̄2 , . . . , K̄m }.

82

Mathematics 2018, 6, 86

Assumption 3. For Q = block-diag{ Q1 , Q2 , . . . , Qm }, R = block-diag{ R1 , R2 , . . . , Rm } and P =
block-diag( P1 , P2 , . . . , Pm ), it has:

( A + B̄K̄ ) P( A + B̄K̄ ) − P = −( Q + K̄  RK̄ ).

(14)

Assumption 1 ensures that with the feedback control law ui,e = Ki ei , i ∈ I0:m , the state estimated
by the simpliﬁed model (7) is near to the real system’s trajectory before the system reaches the target.
In Assumption 2, Ωk̄ is set as a terminal constraint of DMPC. Assumption 3 is used in the proof of the
convergence of system presented in the Appendix A.
So far, the strong-coupling neighbor-based optimization DMPC algorithm, which is solved
iteratively, can be deﬁned as follows:
Firstly, denote the optimal objective of subsystem Si as ViN . According to (10), at iterating step p,
ViN ﬁts:
ViN ( xi , yt , p; x̄i , ūi,0:N −1 , yi,s )
N −1

=

∑

k =0

( x̄i (k) − x̄i,s 2Qi + ūi (k) − ūi,s 2Ri ) +  x̄i ( N ) − x̄i,s 2Pi + V0 (yi,s , yi,t )

N −1

+

∑ ∑

k =0 h∈Hi





[ p −1]  2
[ p −1] 


 x̄h (k) − x̄h,s  +  x̄h ( N ) − x̄h,s 
Qh

Ph

.

(15)

Compute the optimization solution

( x̄i (0), ūi,0:N −1  , yi,s  ) = arg min ViN ( xi , yt , p; x̄i , ūi,0:N −1 , yi,s ),

(16)

Subject to constraints:
x̄hi (k + 1) = Ahi hi x̄hi (k ) + ∑h ∈N
j

[ p]

h(strong)

Bh j ūh (k ) + Bhi hi ūhi (k ),
j

( x̄hi (k) ūhi (k)) ∈ F , F : (Xhi , Uhi )  (Whi , Khi Wi ),

(17a)

( x̄ ( N ), ys ) ∈ ΩK̄ ,

(17b)

x̄i (0) ∈ xi − φi ,

(17c)

My yi,s = ( x̄i,s , ūi,s ),

(17d)

with hi ∈ Hi ∪ {i }, and φi , Ωk̄ deﬁned in Assumptions 2 and 3, respectively. The optimization
function (16) updates Si ’s initial state, inputs in N steps ūi,0:N −1 and current tracking target yi,s based
on the information from subsystems in H.
Secondly, set
[ p −1]


ūi,0:N −1 = γi ūi,0:N
−1 + (1 − γi ) ūi,0:N −1 ,
[ p]

(18)

[ p]
[ p −1]

yi,s = γi yi,s
+ (1 − γi )yi,s ,
[ p]
[ p −1]
x̄i (0) = γi xi (0) + (1 − γi ) x̄i
(0),
m

(19)
(20)

∑ γi = 1, γi > 0.

(21)

i =1

γi ∈ R, 0 < γi < 1 is to guarantee the consistency of the optimization problem. That is, at the end of
the current sample time, all shared variables converge.
After that, we take
p = p+1
[ p]

[ p]

[ p]

∗ =y
to iterate until the solutions convergence. Then, we have x̄i∗ = x̄i , ūi∗ = ūi,0:N −1 , yi,s
i,s .

83

Mathematics 2018, 6, 86

Finally, when the solution converges, according to Assumption 1, take the control law of Si as
∗
∗
ui,0
= ūi,0
+ Ki ( xi − x̄i∗ ),

(22)

∗ is the ﬁrst element of ū∗ . For better
where Ki is the robust positively invariant set control law. ūi,0
i
understanding, the algorithm is also presented in Algorithm 1.

Algorithm 1: Enhancing Strong Neighbor-Based Optimization DMPC
Data: initial time t0 , inital state xi (t0 ), and tracking target ytarget (target can be changed with
time according to production demand) for subsystem Si
Result: the control law ui∗ (t) for t = t0 : +∞
1

2

3
4
5

Firstly, determine the strong-coupling neighbors set Ni(strong) by solving Ci,(d∗ ) ’s optimization
in 3.4.
Secondly, conﬁrm Si ’s downstream neighbor set Hi which is the set of subsystems that SSi
has control inﬂuence on.
Set t = t0 .
while True do
Select Warm Start (reference solution at iteration p = 0, details in Section 3.2) :
[0]

[0]

[0]

[0]

vi (t) = ( x̄i (0|t), ūi,0:N −1 (t), ȳi,s (t))
6
7
8
9

Set xi = xi (t), yt = ytarget , p = 1.
while True do
Set ( x̄i (0), ūi,0:N −1  , yi,s  ) = arg min{ViN ( xi , yt , p; x̄i , ūi,0:N −1 , yi,s ) : s.t(17)}
Get optimization solution at p:
[ p −1]


ūi,0:N −1 = γi ūi,0:N
−1 + (1 − γi ) ūi,0:N −1
[ p]

[ p −1]


yi,s = γi yi,s
+ (1 − γi )yi,s
[ p]

[ p −1]

x̄i (0) = γi xi (0) + (1 − γi ) x̄i
[ p]

(0)

m

∑ γi = 1, γi > 0

i =1
10
11
12
13
14
15
16
17

[ p −1]

[ p]

if ||ūi − ūi
|| ≤ 1e−6 then
Break
end
Set p = p + 1
end
[ p]

[ p]

[ p]

∗ = y . u∗ = ū∗ + K ( x − x̄ ∗ )
Set x̄i∗ = x̄i (0), ūi∗ = ūi,0:N −1 , yi,s
i i
i,0
i,0
i
i,s

Get

ui∗ (t)

=

∗ .
ui,0

Set t = t + 1.

end

In this algorithm, we use an iterative strategy to guarantee the distributed control solution
( x̄ (0), ū0:N −1 , ys ) is consistent. Next, the selection of warm start, the given solution for each subsystem
at initial iterative step 0, is proposed in the next section.

84

Mathematics 2018, 6, 86

3.2. Warm Start
Considering a new sample time, with updated system states, the choice of a warm start is based
on the principle that it ﬁts the simpliﬁed system’s constraints in (17), so that real subsystem solution’s
feasibility is guaranteed. The warm start is designed as the following algorithm:
Algorithm 2: Warm Start for Iterative Algorithm
∗
∗
Data: x (t + 1), yt , ūi,0:N
−1 ( t ), yi,s ( t )
[0]

[0]

[0]

[0]

Result: the warm start vi (t + 1) = ( x̄i (0|t + 1), ūi,0:N −1 (t + 1), ȳi,s (t + 1))
1
2
3
4
5

For control inputs, two options are given:
∗ ( t ), ..., ū∗
Option 1: ũi,0:N −1 (t + 1) = (ūi,1
i,N −1 ( t ), ūi ( N ))
where ū( N ) = (ū1 ( N ), ..., ūm ( N )) = K̄ x̄ ∗ ( N ) + Ly∗s (t).
Option 2:
ûi,0:N −1 (t + 1) = (ûi (0), ..., ûi ( N − 1)), where
x̂i (0) = x̄i∗ (1, t), and x̂i (k + 1) ﬁts

x̂ (k + 1) = ( x̂1 (k + 1), ..., x̂m (k + 1)) = ( A + BK̄ ) x̂ (k ) + BLy∗s (k), k ∈ I0:N −1

ûi (k ) = K̄ x̂ (k ) + Ly∗s (t), k ∈ I0:N −1

6

[0]

[0]

As for x̄i (0|t + 1), yi,s (t + 1). To ensure feasibility, denote:
x̄i (0|t + 1) = x̄i∗ (1|t)
[0]

∗
yi,s (t + 1) = yi,s
(t)
[0]

7

Warm Start

8

if ( x̄i (t + 1), yi,s (t + 1)) in tracking invariant set, and

[0]

[0]

[0]

[0]

[0]

[0]

ViN ( xi (t + 1), yt , 0; x̄i (0|t + 1), ûi,0:N −1 (t + 1), yi,s (t + 1)

≤ViN ( xi (t + 1), yt , 0; x̄i (0|t + 1), ũi,0:N −1 (t + 1), yi,s (t + 1)
then
9
10
11
12
13

[0]

[0]

[0]

[0]

vi (t + 1)[0] = ( x̄i (0|t + 1), ûi,0:N −1 (t + 1), yi,s (t + 1))
end
else
vi (t + 1)[0] = ( x̄i (0|t + 1), ũi,0:N −1 (t + 1), yi,s (t + 1))
end

The algorithm illustrates that two choices are provided for the warm start. One is acquiring
a solution from the tracking invariant set control law K̄, with the simpliﬁed model prediction
∗ ( t )) as initial state and tracking target, respectively. The other is taking a solution from the
( x̄i∗ (1|t), yi,s
simpliﬁed model prediction at time t. Both of them ﬁt the constraints of (17). Note that the second
option will only be considered when the subsystem enters the tracking invariant set.

85

Mathematics 2018, 6, 86

3.3. RPI Control Law and RPI Set
Here one constraint coupling subsystem is considered. Given that for Si we have xi ∈ Xi and
ui ∈ Ui , express the constraints in inequalities: Xi = { xi |liT xi | ≤ 1} and Ui = {ui | hiT ui | ≤ 1}.
The robust positively invariant set φi is denoted as φi = { xi : xiT Pi xi ≤ 1}.
With the deﬁnition a of robust positively invariant set in Deﬁnition 2, φi should ensure that
∀ xi ∈ φi , xi ∈ Xi . That is:

|hiT xi | ≤ 1, ∀ xi ∈ φi .

(23)

Based on deﬁnitions of Ni(strong) and Ni(weak) , Wi is decided according to the constraints of
Ni(weak) . For deviation caused by neglecting the subsystem in Ni(weak) , a minimization of robust
positive invariant set φi by introducing a parameter γi ∈ [0, 1] can be obtained.
The parameter γi controls the size of the robust positive invariant set φi by further minimizing φi
√
in φi ⊆ γi X . That is:

s.t.

minγi
√
γi , ∀ xi ∈ φi .

|hiT xi | ≤

(24)

We should also consider the input constraint Ui :

|liT Ki xi | ≤ 1, ∀ xi ∈ φi ,

(25)

and the constraint brought by the property of robust positive invariant set φi itself should be considered.
Based on the above analysis, referring to [43], we can obtain γi and Ki by solving the following
linear matrix inequality optimization problem:

⎡
⎢
⎣

min γi ,
⎤
∗
∗
⎥
1 − λi ∗ ⎦ > 0, ∀wi ∈ vert(Wi ),
wi
Wi


1
∗
> 0,
YiT li Wi


γi
∗
> 0,
Wi hi Wi
Wi ,Yi ,γi

λi Wi
0
Aii Wi + Bi Yi

(26)

(27)

(28)
(29)

and Ki = Yi Wi−1 . Thus, we get RPI control law Ki and γi , which illustrates the size of φi . To get φi , we
use the procedure in Reference [43].
3.4. Determination of Strong Coupling
There are many measurements to measure the strength of interactions among subsystems.
Different measurements lead to different optimization performance. This paper focuses on
the performance and connectivity of subsystems. Thus, the determination of strong-coupling neighbors
is based on the inﬂuence on the size of current subsystem’s robust positively invariant (RPI) set and
subsystem connectivity.
On the one hand, as deﬁned in Deﬁnition 2, φi is a robust positively invariant set for subsystem
Si described as xi+ = Aii xi + Bii ui + ∑ j∈Ni Bij u j when u j is set to zero. Given that φi deals with
deviation caused by neglecting some of the inputs u j , j ∈ Ni , the size of φi is expected to be sufﬁciently
small. The beneﬁt is that the solution in (15) can get a larger feasible domain. Here we consider
that a sufﬁciently large domain means the solution has more degrees of freedom and brings better

86

Mathematics 2018, 6, 86

subsystem performance. Based on the idea above, to decide to omit the weak-coupling neighbor set
Ni(weak) , we choose a neighbor collection which results in a small size of robust positively invariant
set φi . The basis of measuring the robust positively invariant set φi by introducing γi is mentioned
in the previous section. On the other hand, connectivity, as the measurement of subsystem topology
complexity, is easy to obtain. Next, we give the numerical analysis.
Denote an arbitrary option for deciding the strong-, weak-coupling neighbors as Ci,(d) , d ∈ Di .
Di = {1, ..., dmax } ∈ I is the label set of ways of Si ’s neighbors’ distribution. dmax represents the size
of feasible distribution methods which ﬁts dmax ≤ 2size(Ni ) . For better understanding of Ci,(d) , here
we take an arbitrary neighbor set Ni = { j1 , j2 , j3 } as an example. If we treat ji as a strong-coupling
neighbor and j2 , j2 as weak, we have ∃d ∈ Di , Ci,(d) , satisfying:

Ci,(d) = {(Ni(strong) , Ni(weak) )|Ni(strong) = { j1 }, Ni(weak) = { j2 , j3 }}.
Option Ci,(d) results in a speciﬁed connectivity amount (normalized) ci,(d) ∈ [0, 1] and an RPI set
√
denoted as φ(i,d) ⊆ γi,(d) Xi . Here ci,(d) ∈ [0, 1] are deﬁned as:
ci,(d) =

size(Ni(strong) )
size(Ni )

∈ [0, 1].

(30)

To ﬁnd the optimal distribution Ci,(d∗ ) of strong- and weak-coupling neighbors, here we take:

Ci,(d∗ ) =

argmin

Ci,(d) ,Wi,(d) ,Yi,(d) ,γi,(d)

((γi,(1) + μi ci,(1) ), ..., (γi,(d) + μi ci,(d) ), ..., (γi,(dmax ) + μi ci,(dmax ) )),

where for d ∈ Di ,
⎡

⎤
∗
∗
⎥
1 − λi
∗ ⎦ > 0, ∀wi ∈ vert(Wi,(d) ),
wi
Wi,(d)


1
∗
> 0,
Yi,T(d) li Wi,(d)


γi,(d)
∗
> 0,
Wi,(d) hi Wi,(d)

λi Wi,(d)
⎢
0
⎣
Aii Wi,(d) + Bi Yi,(d)

0 ≤ γi,(d) ≤ 1.

(31)

(32)
(33)
(34)

In this equation, μi is a weight coefﬁcient for the optimization. γi,(d) , Wi,(d) , Yi,(d) , Xi,(d) represent
the γi , Wi , Yi , Xi under distribution Ci,(d) . Moreover, Ci,(d∗ ) is the optimal solution.
This optimization means that in order to make the optimal decision on strong-coupling
neighbors and weak-coupling neighbors while taking both connectivity and performance into account,
the optimization that minimizes the combination of subsystem connectivity and size of φi should be
solved. To decide whether a neighbor S j , j ∈ Ni is a strong-coupling neighbor or a weak one, the size
of φi is expected to be small so that the solution in (15) can get a larger feasible domain. At the same
time, the connectivity is expected to be small to reduce the system’s topological complexity.
The optimization achieves the goal of choosing neighbors which result in smaller size of robust
positively invariant set φi and connectivity. Solution Ci,(d∗ ) reﬂects the consideration of inﬂuence on
RPI set φi and connectivity. With this method, even though “weak-coupling” neighbors are omitted
and deviation is brought, the simpliﬁed model has a large degree of freedom to design the control law
of tracking and reduces the connectivity at the same time. Thus, a good system performance and error
tolerance can be obtained.

87

Mathematics 2018, 6, 86

4. Stability and Convergence
In this section, the feasibility and stability theorem of strong-coupling neighbor-based DMPC are
given. Denote

X N = { x ∈ X |∃v = ( x, u0:N −1 , ys ), u(k) ∈ U , k ∈ I0:N −1 , ys ∈ Ys , s.t.v ∈ Z N },
Z N = {v|u(k) ∈ U , k ∈ I0:N −1 , ys ∈ Ys , x (k; x, u) ∈ X , k ∈ I0:N −1 , x ( N; x, u) ∈ ΩK̄ }.
x (k; x, u) represents the current time’s state prediction after k sample time. Ys is the feasible tracking
set based on hard constraints of x and u.
Theorem 1. Assume that Assumptions 1–3 hold. Then, for all initial state x (0) with tracking target yt if
v(0) ∈ Z N , the closed-loop system based on a strong-coupling neighbor-based DMPC algorithm is feasible and
asymptotically stable and converges to ŷs ⊕ Cφk , where ŷs = (ŷ1,s , ..., ŷm,s ), ŷi,s = argminV0 (yi,s , yi,t ) among
feasible targets.
Proof. Feasibility is proved by Lemmas A1, A2. Stability’s proofs are in Lemmas A3, A4 in
the Appendix A.
5. Simulation
The simulation takes an industrial system model with ﬁve subsystems interacting with each
other as an example. Between different subsystems, the coupling degrees vary substantially.
The relationships of subsystems and the designed MPC are shown in Figure 1.
In Figure 1, dotted lines are used to represent weak coupling, while solid lines are used to
represent strong coupling. With the strategy we have deﬁned in our paper, weak couplings are
neglected. As a result, it can be seen in Figure 1 that only parts of the subsystems are joint in
cooperation. Subsystem models are also given as follows:


S1 : x1,t+1 =

y1,t = 0


S2 : x2,t+1 =

y1,t = 0


S3 : x3,t+1 =

y1,t = 0


S4 : x4,t+1 =

y1,t = 0


S5 : x5,t+1 =

y1,t = 0

0.5
0

0.6
0.66


1 x1,t ,

0.6
0



0.1
0.71

1 x1,t ,
0.7
0.1



0.2
0.4

1 x1,t ,
0.9
0

0.7
0.6


1 x1,t ,

0.8
0.5



0
0.78




x1,t +




x2,t +




x3,t +




x4,t +




x5,t +



0.1
0.7



0.5
1


u2,t +



0.9
1


u3,t +



0.4
0.4

0
1


u1,t +


u4,t +



1 x1,t .


u5,t +



0
0.04



0
0.3

0
0.4

0.3
0.6

0.4
0.2

u2,t ,


u1,t +




u2,t +




u3,t +

0
0.01

0
0.05

0
0.01

(35a)


u3,t ,

(35b)


u4,t ,

(35c)


u5,t ,

(35d)


u4,t ,

(35e)

88

Mathematics 2018, 6, 86

By the strong-coupling neighbor-based DMPC, connections including S2 → S1 , S3 → S2 ,
S4 → S3 , S5 → S4 are neglected. For the ﬁve subsystems in the given model, γ1 , γ2 , γ3 , γ4 , and
γ5 , which evaluate the system performance, are obtained by optimization in Section 3.4, they are:

(γ1 , γ2 , γ3 , γ4 , γ5 ) = (0.54, 0.66, 0.72, 0.53, 0).

(36)

Among them, γ5 = 0 illustrates that subsystem S5 has no weak-coupling upstream neighbors.
Additionally, the robust positively invariant set feedback control laws are

{K1 , K2 , K3 , K4 } = {[−0.119 − 0.762]T , [−0.171 − 0.434]T , [−0.316 − 0.251]T , [−0.724 − 0.966]T }.
The optimization horizon N is 10 sample time. Take Q = I10×10 and R = I5×5 . To accelerate
the iterative process, in both of these iterative algorithms, the terminal conditions of iteration are
[ p]

[ p −1]

||ui − ui

||2 ≤ 10−3 or p > 100. If either of these two conditions is satisﬁed, iteration terminates.

Figure 1. An illustration of the structure of a distributed system and its distributed control framework.
MPC: model predictive control; DMPC: distributed MPC.

The following shows the system performance when the strong-coupling neighbor-based DMPC
algorithm is applied. Here we chose different set-points to detect the system stability. Three groups
of setpoints were given to verify the system’s feasibility and stability. For a better understanding,
cooperative DMPC strategy control results which cooperate with all neighbors are also introduced to
make a comparison. The simulation took a total of 74.3 seconds for 90 sampling times. The performance
comparison of strong-coupling neighbor-based DMPC (SCN-DMPC) with cooperative DMPC where
each subsystem used the full system’s information in their controller is shown in Figures 2–4.
Figure 2 shows the state evolution of each subsystem. The two curves of SCN-DMPC and
cooperative are close to each other. This is because the weak couplings in the given example are tiny
compared with the strong couplings and thus do not have much of an impact on system dynamics.
Besides, SCN-DMPC optimization algorithm was always feasible and was able to keep stable with
a changing tracking target. Figure 3 shows the input difference between these two algorithms. The
control laws of these two algorithms are almost the same. Tracking results are shown in Figure 4.
There was a small off-set in subsystem S1 , S3 , which could be eliminated by adding an observer. All
other subsystems could track the steady-state target without steady-state off-set. From the simulation
results of Figures 2–4, the stability and good optimization performance of the closed-loop system using
SCN-DMPC is veriﬁed.

89

Mathematics 2018, 6, 86

Figure 2. States of each subsystem under the control of strong-coupling neighbor-based DMPC (SCN-DMPC) and
cooperative DMPC.

Figure 3. Inputs of each subsystem under the control of SCN-DMPC and cooperative DMPC.

90

Mathematics 2018, 6, 86

Figure 4. Output of each subsystem under the control of SCN-DMPC and cooperative DMPC.

In Figures 2–4, the curves of SCN-DMPC and cooperative DMPC are close to each other. The
reason is that the weak couplings in the given example were tiny compared with the strong couplings,
and thus they did not have much of an impact on system dynamics, even though a small difference
existed. Speciﬁcally, given the state equation input weight coefﬁcients in each subsystem, the deviations
of the ﬁve subsystems ﬁt w1  ≤ 0.04, w2  ≤ 0.01, w3  ≤ 0.05, w4  ≤ 0.01. The effects of these
disturbances were very small compared with those of each subsystem’s inputs. Under robust feedback
control law, they do not have much of an inﬂuence on system dynamics. Besides, the performance of
the simpliﬁed model under SCN-DMPC equals to that under the control law optimizing the global
performance of simpliﬁed system. As a result, the system performance under SCN-DMPC was close to
that in cooperative DMPC. Under circumstances where the weak interactions are close to the impact of
each subsystem’s inputs (which sacriﬁces part of the performance to achieve less network connectivity),
omitting weak couplings may result in a greater inﬂuence on system dynamics, and the simulation
results can differ.
Moreover, mean square errors between the closed-loop systems with strong-coupling
neighbor-based optimization DMPC and cooperative DMPC outputs are listed in Table 1. The
total error of ﬁve subsystems was only 3.5, which illustrates the good optimization performance
of SCN-DMPC.
Table 1. Mean square error (MSE) of outputs between SCN-DMPC and cooperative DMPC.
Item

S1

S2

S3

S4

S5

MSE

0.5771

1.1512

0.7111

0.1375

0.9162

Connectivities are compared in the following table.

91

Mathematics 2018, 6, 86

Table 2 shows that when strong-coupling neighbor-based DMPC was applied, the total
information connections reduced to eight, which means that ﬁve connections were avoided compared
with cooperative DMPC.
Table 2. Comparison of system connectivity with different control methods.
System

SCN-DMPC

Cooperative DMPC

S1
S2
S3
S4
S5
S

1
2
2
2
1
8

2
3
4
3
1
13

Above all, the simulation results show that the proposed SCN-DMPC achieved a good
performance close to the cooperative DMPC with a signiﬁcant reduction of information connectivity.
6. Conclusions
In this paper, a strong-coupling neighbor-based optimization DMPC method is proposed to
decide the cooperation among subsystems, where each subsystem’s MPC considers the optimization
performance and evolution of its strong-coupling downstream subsystems and communicates with
them. For strongly-coupled subsystems, the inﬂuence on state and objective function are considered.
For weakly-coupled subsystems, inﬂuence is neglected in the cooperative design. A closed-loop
system’s performance and network connectivity-based method is proposed to determine the strength of
coupling relationships among subsystems. The feasibility and stability of the closed-loop system in the
case of target-tracking are analyzed. Simulation results show that the proposed SCN-DMPC was able
to achieve similar performance in comparison to the DMPC which did not neglect the information or
inﬂuence of weakly coupling subsystems. At the same time, connectivity was signiﬁcantly decreased.
Author Contributions: Shan Gao developed the main algorithm, contributed to the stability analysis, designed the
simulation and prepared the draft of the paper. Yi Zheng and Shaoyuan Li proposed the idea of Enhancing Strong
Neighbor-based coordination strategy. They contributed to the main theory of the work and gave the inspiration
and guidance of the strong-coupling neighbors’ determination, the algorithm design and stability analysis.
Acknowledgments: This work is supported by the National Nature Science Foundation of China (61673273, 61590924).
Conﬂicts of Interest: The authors declare no conﬂict of interest.

Appendix
In the strong-coupling neighbor-based optimization DMPC algorithm proposed in this paper, the
optimal solution of each subsystem equals to the solution of optimizing the overall system objective
function. That is:
arg min VN ( xi , yt , ∞; x̄i , ūi,0:N −1 , ys ) = arg min ViN ( xi , yt ; x̄i , ūi,0:N −1 , ys ),

(A1)

where
N −1

VN ( xi , yt ; x̄i , ūi,0:N −1 , ys ) =

∑ ( x(k) − x̄s 2Q + u(k) − ūs 2R ) +  x( N ) − x̄s 2P + V0 (ys , yt ).

k =0

92

(A2)

Mathematics 2018, 6, 86

Thus, for easy analysis, here we take the overall objective function VN to prove the feasibility and
stability, and deﬁne:
[ p]

[ p]

Denote vi
[ p]

vi

[ p]

[ p]

[ p]

[ p]

[ p]

v[ p] = { x̄1 , ..., x̄m , ū1,0:N −1 , ..., ūm,0:N −1 , y1,s , ..., y1,m },

(A3)

∗
∗
∗
∗
∗
v∗ = { x̄1∗ , ..., x̄m
, ū1,0:N
−1 , ..., ūm,0:N −1 , y1,s , ..., y1,m }.

(A4)

as
[ p −1]

=( x̄1

[ p]

[ p −1]

, ..., x̄i , ..., x̄m

[ p −1]

[ p]

[ p −1]

[ p −1]

, ū1,0:N , ..., ūi,0:N , ..., ūm,0:N , y1,s

[ p]

[ p −1]

, ..., yi,s , ..., ym,s ).

(A5)

Lemma A1. Feasibility. Feasibility can be proved by assuming v(t) ∈ Zn . Then, we get v(t + 1) ∈ Zn .
Proof. The feasibility of the model is proved by analyzing the simpliﬁed model.
[0]

Refer to the warm start algorithm. At time t + 1, the warm start for arbitrary Si : v̄i (t + 1) =

[0]
[0]
[0]
( x̄i (0|t + 1), ūi,0:N (t + 1), yi,s (t + 1)). With the
th
th
From p to ( p + 1) iterations, given that
[ p+1]

( v1

warm start, all constraints in (17) are satisﬁed.

[ p+1]

, v2

[ p+1]

, ..., vm

)

are feasible, obviously their convex sum v[ p+1] is feasible. As a result, the converged simpliﬁed solution
v∗ (t + 1) is feasible. Based on this, the real system solution is around the invariant set of v∗ (t + 1), and
ﬁts the system constraints. That is, ( x (t + 1), v(t + 1)) ∈ Zn .
Lemma A2. Convergence. Here we have
VN ( x (t), yt ; v[ p+1] (t)) ≤ VN ( x (t), yt ; v[ p] (t)).
Proof. Since it has
[ p+1]

VN ( x, yt , v[ p+1] ) ≤ γ1 VN ( x, yt ; v1

[ p+1]

) + ... + γm VN ( x, yt ; vm

)

≤ γ1 VN ( x, yt ; v ) + ... + γm VN ( x, yt ; v )
[ p]

[ p]

= VN ( x, yt , v[ p] ),

(A6)

convergence is proved.
According to the Lemma above, we have:
VN ( x (t), yt ; v[ p+1] (t)) ≤ VN ( x (t), yt ; v[0] (t)).
[0]

Lemma A3. Local Bounded. When ( x (t), ys (t) ∈ ΩK̄ , then

2


[0]
[0]
VN ( x (t), yt ; v[ p] (t)) ≤ x (t) − x̄s (t) + V0 (ys (t), yt ).
P

Proof. Firstly,


2


[0]
[0]
VN ( x (t), yt ; v[0] (t)) ≤ x (t) − x̄s (t) + V0 (ys (t), yt )
P

will be proved.

93

(A7)

Mathematics 2018, 6, 86

According to the deﬁnition of warm start and Assumption 3, here we have:
VN ( x (t), yt ; v[0] (t))




2
N −1 






[0]
[0]
[0]
[0]
≤ ∑ x (k; t) − x̄s (t) + u(k) − ūs (t) + x ( N ) − x̄s (t) + V0 (ys (t), yt )
k =0

Q

=

∑




[0]
x (k; t) − x̄s (t)

R

N −1 
k =0

Q+K̄  RK̄

P


2


[0]
[0]
+ x ( N ) − x̄s (t) + V0 (ys (t), yt )
P


2


[0]
[0]
= x ( N ) − x̄s (t) + V0 (ys (t), yt ).

(A8)

P

Thus, we have:
VN ( x (t), yt ; v[ p] (t)) ≤ VN ( x (t), yt ; v[0] (t))

2


[0]
[0]
≤ x (t) − x̄s (t) + V0 (ȳs (t), yt ).
P

(A9)

Lemma A4. Convergence. Let Assumption 3 hold, for any feasible solution z(0) = ( x (0), v(0)) ∈ Z N , the
system converges to equilibrium point zs . That is,
VN ( x (t + 1), yt ; v̄∗ (t + 1)) − VN ( x (t), yt ; v̄∗ (t)) ≤  x (t) − x̄s (t)2Q .

(A10)

The ﬁnal tracking points of the simpliﬁed system (the optimal solution of VN ) are ( x̄ ∗ ( xs , yt ), ū∗ ( xs , yt )) =
( xs , us ), which are the centralized optimal solution.
Proof. For simpliﬁed system optimization, we have
VN ( x (t + 1), yt , v∗ (t + 1)) ≤ VN ( x (t + 1), yt ; v(0; t + 1)),

(A11)

and also
VN ( x (t + 1), yt ; v(0; t + 1)) ≤ VN ( x (t), yt , v∗ (t)) −  x (t) − x̄s (t)2Q − u(t) − ūs (t) R .

(A12)

According to (A11) and (A12), we have
VN ( x (t + 1), yt ; v∗ (t + 1)) − VN ( x (t), yt ; v∗ (t))

≤ −  x (t) −
≤ −  x (t) −

(A13)

x̄s (t)2Q − u(t) − ūs (t) R
x̄s (t)2Q .

Since the robust positively invariant set feedback control law K = diag(K1 , K2 , ..., Km ) ensures the
real states in the invariant set of the simpliﬁed model, the real system’s stability is proved.
References
1.
2.
3.

Christoﬁdes, P.D.; Scattolini, R.; Muñoz de la Peña, D.; Liu, J. Distributed model predictive control: A tutorial
review and future research directions. Comput. Chem. Eng. 2013, 51, 21–41. [CrossRef]
Del Real, A.J.; Arce, A.; Bordons, C. Combined environmental and economic dispatch of smart grids using
distributed model predictive control. Int. J. Electr. Power Energy Syst. 2014, 54, 65–76. [CrossRef]
Zheng, Y.; Li, S.; Tan, R. Distributed Model Predictive Control for On-Connected Microgrid Power
Management. IEEE Trans. Control Syst. Technol. 2018, 26, 1028–1039. [CrossRef]

94

Mathematics 2018, 6, 86

4.
5.
6.
7.
8.
9.
10.
11.
12.

13.
14.
15.
16.
17.
18.
19.
20.
21.
22.
23.
24.
25.
26.
27.
28.

29.

Yu, W.; Liu, D.; Huang, Y. Operation optimization based on the power supply and storage capacity of an
active distribution network. Energies 2013, 6, 6423–6438. [CrossRef]
Scattolini, R. Architectures for distributed and hierarchical model predictive control-a review. J. Process Control
2009, 19, 723–731. [CrossRef]
Du, X.; Xi, Y.; Li, S. Distributed model predictive control for large-scale systems. In Proceedings of the 2001
American Control Conference, Arlington, VA, USA, 25–27 June 2001; Volume 4, pp. 3142–3143.
Li, S.; Yi, Z. Distributed Model Predictive Control for Plant-Wide Systems; John Wiley & Sons: Hoboken, NJ,
USA, 2015.
Mota, J.F.C.; Xavier, J.M.F.; Aguiar, P.M.Q.; Püschel, M. Distributed Optimization With Local Domains:
Applications in MPC and Network Flows. IEEE Trans. Autom. Control 2015, 60, 2004–2009. [CrossRef]
Qin, S.; Badgwell, T. A survey of industrial model predictive control technology. Control Eng. Pract. 2003,
11, 733–764. [CrossRef]
Maciejowski, J. Predictive Control: With Constraints; Pearson Education: London, UK, 2002.
Vaccarini, M.; Longhi, S.; Katebi, M. Unconstrained networked decentralized model predictive control.
J. Process Control 2009, 19, 328–339. [CrossRef]
Leirens, S.; Zamora, C.; Negenborn, R.; De Schutter, B. Coordination in urban water supply networks
using distributed model predictive control. In Proceedings of the American Control Conference (ACC),
Baltimore, MD, USA, 30 June–2 July 2010; pp. 3957–3962.
Wang, Z.; Ong, C.J. Distributed Model Predictive Control of linear discrete-time systems with local and
global constraints. Automatica 2017, 81, 184–195. [CrossRef]
Trodden, P.A.; Maestre, J. Distributed predictive control with minimization of mutual disturbances.
Automatica 2017, 77, 31–43. [CrossRef]
Al-Gherwi, W.; Budman, H.; Elkamel, A. A robust distributed model predictive control algorithm.
J. Process Control 2011, 21, 1127–1137. [CrossRef]
Kirubakaran, V.; Radhakrishnan, T.; Sivakumaran, N. Distributed multiparametric model predictive control
design for a quadruple tank process. Measurement 2014, 47, 841–854. [CrossRef]
Zhang, L.; Wang, J.; Li, C. Distributed model predictive control for polytopic uncertain systems subject to
actuator saturation. J. Process Control 2013, 23, 1075–1089. [CrossRef]
Liu, J.; Muñoz de la Peña, D.; Christoﬁdes, P.D. Distributed model predictive control of nonlinear systems
subject to asynchronous and delayed measurements. Automatica 2010, 46, 52–61. [CrossRef]
Cheng, R.; Fraser Forbes, J.; Yip, W.S. Dantzig–Wolfe decomposition and plant-wide MPC coordination.
Comput. Chem. Eng. 2008, 32, 1507–1522. [CrossRef]
Zheng, Y.; Li, S.; Qiu, H. Networked coordination-based distributed model predictive control for large-scale
system. IEEE Trans. Control Syst. Technol. 2013, 21, 991–998. [CrossRef]
Groß, D.; Stursberg, O. A Cooperative Distributed MPC Algorithm With Event-Based Communication and
Parallel Optimization. IEEE Trans. Control Netw. Syst. 2016, 3, 275–285. [CrossRef]
Walid Al-Gherwi, H.B.; Elkamel, A. Selection of control structure for distributed model predictive control in
the presence of model errors. J. Process Control 2010, 20, 270–284. [CrossRef]
Camponogara, E.; Jia, D.; Krogh, B.; Talukdar, S. Distributed model predictive control. IEEE Control
Syst. Mag. 2002, 22, 44–52.
Conte, C.; Jones, C.N.; Morari, M.; Zeilinger, M.N. Distributed synthesis and stability of cooperative
distributed model predictive control for linear systems. Automatica 2016, 69, 117–125. [CrossRef]
Tippett, M.J.; Bao, J. Reconﬁgurable distributed model predictive control. Chem. Eng. Sci. 2015, 136, 2–19.
[CrossRef]
Zheng, Y.; Wei, Y.; Li, S. Coupling Degree Clustering-Based Distributed Model Predictive Control Network
Design. IEEE Trans. Autom. Sci. Eng. 2018, 1–10. doi:10.1109/TASE.2017.2780444. [CrossRef]
Li, S.; Zhang, Y.; Zhu, Q. Nash-optimization enhanced distributed model predictive control applied to the
Shell benchmark problem. Inf. Sci. 2005, 170, 329–349. [CrossRef]
Venkat, A.N.; Hiskens, I.A.; Rawlings, J.B.; Wright, S.J. Distributed MPC Strategies with Application to
Power System Automatic Generation Control. IEEE Trans. Control Syst. Technol. 2008, 16, 1192–1206.
[CrossRef]
Stewart, B.T.; Wright, S.J.; Rawlings, J.B. Cooperative distributed model predictive control for nonlinear
systems. J. Process Control 2011, 21, 698–704. [CrossRef]
95

Mathematics 2018, 6, 86

30.
31.
32.
33.
34.
35.
36.
37.

38.
39.
40.
41.
42.
43.

Zheng, Y.; Li, S. N-Step Impacted-Region Optimization based Distributed Model Predictive Control.
IFAC-PapersOnLine 2015, 48, 831–836. [CrossRef]
de Lima, M.L.; Camponogara, E.; Marruedo, D.L.; de la Peña, D.M. Distributed Satisﬁcing MPC. IEEE Trans.
Control Syst. Technol. 2015, 23, 305–312. [CrossRef]
de Lima, M.L.; Limon, D.; de la Pena, D.M.; Camponogara, E. Distributed Satisﬁcing MPC With Guarantee
of Stability. IEEE Trans. Autom. Control 2016, 61, 532–537. [CrossRef]
Zheng, Y.; Li, S.; Wang, X. Distributed model predictive control for plant-wide hot-rolled strip laminar
cooling process. J. Process Control 2009, 19, 1427–1437. [CrossRef]
Zheng, Y.; Li, S.; Li, N. Distributed model predictive control over network information exchange for
large-scale systems. Control Eng. Pract. 2011, 19, 757–769. [CrossRef]
Li, S.; Zheng, Y.; Lin, Z. Impacted-Region Optimization for Distributed Model Predictive Control Systems
with Constraints. IEEE Trans. Autom. Sci. Eng. 2015, 12, 1447–1460. [CrossRef]
Riverso, S.; Ferrari-Trecate, G. Tube-based distributed control of linear constrained systems. Automatica 2012,
48, 2860–2865. [CrossRef]
Riverso, S.; Boem, F.; Ferrari-Trecate, G.; Parisini, T. Plug-and-Play Fault Detection and Control-Reconfiguration
for a Class of Nonlinear Large-Scale Constrained Systems. IEEE Trans. Autom. Control 2016, 61, 3963–3978.
[CrossRef]
Ferramosca, A.; Limon, D.; Alvarado, I.; Camacho, E. Cooperative distributed MPC for tracking. Automatica
2013, 49, 906–914. [CrossRef]
Limon, D. MPC for tracking of piece-wise constant references for constrained linear systems. In Proceedings
of the 16th IFAC World Congress, Prague, Czech Republic, 3–8 July 2005; p. 882.
Limon, D.; Alvarado, I.; Alamo, T.; Camacho, E.F. Robust tube-based MPC for tracking of constrained linear
systems with additive disturbances. J. Process Control 2010, 20, 248–260. [CrossRef]
Shao, Q.M.; Cinar, A. Coordination scheme and target tracking for distributed model predictive control.
Chem. Eng. Sci. 2015, 136, 20–26. [CrossRef]
Rawlings, J.B.; Mayne, D.Q. Model Predictive Control: Theory and Design; Nob Hill Publishing:
Madison, WI, USA, 2009; pp. 3430–3433.
Alvarado, I. On the Design of Robust Tube-Based MPC for Tracking. In Proceedings of the 17th World
Congress The International Federation of Automatic Control, Seoul, Korea, 6–11 July 2008; pp. 15333–15338.
c 2018 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access

article distributed under the terms and conditions of the Creative Commons Attribution
(CC BY) license (http://creativecommons.org/licenses/by/4.0/).

96

mathematics
Article

Model Predictive Control of Mineral Column
Flotation Process
Yahui Tian 1,2 , Xiaoli Luan 1 , Fei Liu 1 and Stevan Dubljevic 2, *
1

2

*

Key Laboratory of Advanced Process Control for Light Industry (Ministry of Education),
Institute of Automation, Jiangnan University, Wuxi 214122, China; tian894@hotmail.com (Y.T.);
xlluan@jiangnan.edu.cn (X.L.); ﬂiu@jiangnan.edu.cn (F.L.)
Department of Chemical and Materials Engineering, University of Alberta, Edmonton, AB T6G 2V4, Canada
Correspondence: stevan.dubljevic@ualberta.ca; Tel.: +1-(780)-248-1596

Received: 28 April 2018; Accepted: 4 June 2018; Published: 13 June 2018

Abstract: Column ﬂotation is an efﬁcient method commonly used in the mineral industry to separate
useful minerals from ores of low grade and complex mineral composition. Its main purpose is to
achieve maximum recovery while ensuring desired product grade. This work addresses a model
predictive control design for a mineral column ﬂotation process modeled by a set of nonlinear coupled
heterodirectional hyperbolic partial differential equations (PDEs) and ordinary differential equations
(ODEs), which accounts for the interconnection of well-stirred regions represented by continuous
stirred tank reactors (CSTRs) and transport systems given by heterodirectional hyperbolic PDEs,
with these two regions combined through the PDEs’ boundaries. The model predictive control
considers both optimality of the process operations and naturally present input and state/output
constraints. For the discrete controller design, spatially varying steady-state proﬁles are obtained
by linearizing the coupled ODE–PDE model, and then the discrete system is obtained by using the
Cayley–Tustin time discretization transformation without any spatial discretization and/or without
model reduction. The model predictive controller is designed by solving an optimization problem
with input and state/output constraints as well as input disturbance to minimize the objective
function, which leads to an online-solvable ﬁnite constrained quadratic regulator problem. Finally,
the controller performance to keep the output at the steady state within the constraint range is
demonstrated by simulation studies, and it is concluded that the optimal control scheme presented in
this work makes this ﬂotation process more efﬁcient.
Keywords: model predictive control; column ﬂotation; coupled PDE–ODE; Cayley–Tustin
discretization; input/state constraints

1. Introduction
Since its ﬁrst commercial application in the 1980s [1], column ﬂotation has attracted the attention
of many researchers. As a result of its industrial relevance and importance, the modeling and control
of mineral column ﬂotation has gradually become a popular research ﬁeld. In general, column ﬂotation
methods are based on different physical properties of the particle surface and the ﬂotability for
mineral separation [2,3]. Column ﬂotation has many advantages compared to conventional mechanical
ﬂotation processes, such as simplicity of construction, low energy consumption, higher recovery and
product grade, and so forth [4]. It has been claimed that appropriate process regulation could improve
recovery and product grades or process operations for greater beneﬁts [5,6].
The column ﬂotation process uses a complex distributed parameter system (DPS) that is highly
nonlinear, and various important parameters are highly interrelated. The whole process consists
of water, solid, and gas three-phase ﬂows with multiple inputs as well as the occurrence of various
sub-processes, such as particle–bubble attachment, detachment, and bubble coalescence, making
Mathematics 2018, 6, 100; doi:10.3390/math6060100

97

www.mdpi.com/journal/mathematics

Mathematics 2018, 6, 100

the process more complex and difﬁcult to predict. After several decades of research and development,
the process is still not fully understood; the process control of column ﬂotation has proven to be a great
challenge and remains a very important topic for the research community.
The process control for column ﬂotation consists of three to four interconnected levels [6–8],
but according to the control effects, it can be divided into stability control and optimal control [9,10].
At present, most ﬂotation control systems are based on stability control, and the traditional control
method uses PID control to achieve automatic control of the froth depth as well as other easily
measurable variables to keep the ﬂotation process as close as possible to the steady state [11,12].
A growing number of scholars have begun to apply advanced control methods, such as model
predictive control, fuzzy control, expert systems, and neural network control, to regulate the column
ﬂotation process and/or combine these novel control methods to achieve better ﬂotation column
regulation [13–16].
Model predictive control is the most widely used multivariable control algorithm in current
industrial practice. One of its major advantages is that it can explicitly handle constraints while
dealing with multiple-input multiple-output process setting [17]. This ability comes from its
model-based prediction of the future dynamic behaviour of the system. By adding constraints to future
inputs, outputs, or state variables, constraints can be explicitly accounted for in an online quadratic
programming problem realization. This paper proposes and develops a model predictive control design
for the column ﬂotation process, considering the process state/output and input control constraints.
For the model predictive controller design, a three-phase column ﬂotation dynamic model was
developed. A typical column ﬂotation process can be divided into two regions [3]: the collection region
and the froth region (a schematic representation of the column ﬂotation process is given in Figure 1).
This work considers the collection region as a model given by the continuous stirred tank reactor
(CSTR) and considers the froth region as a plug ﬂow reactor (PFR) model. According to the mass
balance laws, the overall column ﬂotation system is described by a set of nonlinear heterodirectional
coupled hyperbolic partial differential equations (PDEs) and ordinary differential equations (ODEs)
that are connected through the PDEs’ boundaries. The steady-state proﬁles are utilized to linearize
the original nonlinear system, and then the discrete model is realized by the Cayley–Tustin time
discretization transformation [18–20]. By using this method, the continuous linear inﬁnite-dimensional
PDE system can be mapped into a discrete inﬁnite-dimensional system without spatial discretization;
the discretized model is structure-preserving and does not imply any model reduction [21]. Finally,
the model predictive controller is designed on the basis of the inﬁnite-dimensional discrete model.
The paper is organized as follows: Section 2 develops the model of the column ﬂotation process,
and the discrete version of the system is obtained by using the Cayley–Tustin time discretization
transformation. Section 3 addresses the model predictive controller design for the coupled PDE–ODE
model with the consideration of input disturbance rejection and input and state/output constraints.
Simulation results are shown in Section 4 to demonstrate the controller performance. Finally, Section 5
provides the conclusions.

98

Mathematics 2018, 6, 100

Figure 1. Schematic representation of a ﬂotation column.

2. Model Formulation of Column Flotation
2.1. Model Description
Column ﬂotation utilizes the principle of countercurrent ﬂow, in which air is introduced
into the column at the bottom through a sparger or in the form of externally generated bubbles
and rises through the downward-ﬂowing slurry that contains mineral, locked, and gangue particles.
By countercurrent ﬂow, contact, and collision, hydrophobic particles (minerals) attach to the bubbles
forming bubble–particle aggregates and reach the top of the column; they are subsequently removed at
the top as a valuable product. Above the overﬂowing froth, there is a ﬁne spray of water, washing down
the undesired particles that could have been entrained by the bubbles from the froth region [22,23].
Meanwhile, rising bubbles entrain some water ﬂow together through bubble coalescence, and the
interaction of wash water and particles also simultaneously occurs. Therefore, the essential process
step in column ﬂotation is the transfer of particles between the water phase and air phase as well as
between the upward and downward water phases.
On the basis of the above description and by making appropriate mass balances, the following
equations are obtained to describe the column ﬂotation process.
2.1.1. Model for Collection Region
Under the assumption of perfect mixing, the collection region can be considered as a CSTR,
which means that the material properties are uniform throughout the reactor. Therefore, the model for
the collection region is described by coupled ODEs. The state variables for the process of the collection

99

Mathematics 2018, 6, 100

region are mass concentrations of solid particles (mineral, locked, and gangue) with the air phase (Ca )
and water phase (Cw ):
d( Ha VCa (t))
= αAv f Hw VCw (t) − βHa VCa (t) − Q a Ca (t)
dt
d( Hw VCw (t))
= −αAv f Hw VCw (t) + βHa VCa (t) + Q F CF − Q T Cw (t)
dt
+ Qwd Cwd (0, t) − Qwu Cw (t),

(1)

(2)

where f = 1 − CC∗a is the fractional free surface area of the bubbles; Qi = Ui Ac is the ﬂow rate of i-th
a
phase; Q a is the air ﬂow rate; Qwu is the upward water ﬂow rate; Qwd is the downward water ﬂow rate;
Q F is the feed ﬂow rate; Q T is the tailing ﬂow rate; Ua , Uwu , Uwd , UF , UT are the velocities of particles
with air, upward water, downward water, feed, and tailing phase, respectively. Ac is the cross-sectional
area of the column, V is the volume of the collection region, Ha is the holdup of the air phase, Hw is the
holdup of the water phase, α is the particle–bubble attachment-rate parameter, β is the particle–bubble
detachment rate parameter, and Av is the air–water interfacial area per unit volume of the column.
The initial conditions for the ODE model of the collection region are given by
Ca (0) = Ca0 ,

Cw (0) = Cw0 .

(3)

2.1.2. Model for Froth Region
The froth region can be considered as a PFR, which means that the material is perfectly mixed
perpendicular to the direction of ﬂow but is not mixed along the ﬂow direction. This region is modeled
by a set of transport hyperbolic PDEs. An upward water phase is added in this region because of the
bubble entrainment. The state variables for the process of the froth region are mass concentrations
of solid particles (mineral, locked, and gangue) with the air phase (CaF ), downward water phase (Cwd ),
and upward water phase (Cwu ).
∂( Ha CaF (z, t))
∂t
∂( Hwd Cwd (z, t))
∂t
∂( Hwu Cwu (z, t))
∂t

∂(Ua CaF (z, t))
+ αAv f Cwd (z, t) + σAv f Cwu (z, t) − βCaF (z, t),
(4)
∂z
∂[(Uwd + Hwd Us )Cwd (z, t)]
− αAv f Cwd (z, t) + ρCwu (z, t) + kβCaF (z, t), (5)
∂z
∂(Uwu Cwu (z, t))
−
− σAv f Cwu (z, t) − ρCwu (z, t) + (1 − k) βCaF (z, t).
(6)
∂z

= −
=
=

The letter F is marked in the upper right corner of the parameter Ca to indicate that it is a froth
region parameter that can be easily distinguished from the collection region parameter. The term
αAv f Cwd represents the transfer of particles from the downward water ﬂow to the bubble, σAv f Cwu
represents the transfer of particles from the upward water ﬂow to the bubble, βCa represents the
particles’ detachment from the bubble, and ρCwu represents the transfer of particles from the upward
water ﬂow to the downward water ﬂow. This transport-reaction model belongs to the class of fully
state-coupled heterodirectional transport systems (transporting velocities have opposite signs).
The boundary and initial conditions for the PED model of the froth region are given by the following:
CaF (0, t) = Ca (t),

Cwu (0, t) = Cw (t),

CaF (z, 0) = f a (z),

Cwu (z, 0) = f wu (z),

Cwd (h, t) = 0.
Cwd (z, 0) = f wd (z).

(7)
(8)

In the system given by Equations (1)–(8), the ODE system provides boundary conditions for
the PDE system. The froth overﬂow (production) is controlled by the velocity of the feed; that is,
the velocity of the feed UF is the control input and the mass concentration of solid particles with the
air phase of froth overﬂow CaF (h, t) is the output.

100

Mathematics 2018, 6, 100

2.2. Linearized Model
The system described by Equations (1)–(8) is nonlinear, and it is essential for it to be linearized for
further analysis (taking the mineral, e.g., the steady-state proﬁles of the mineral within three phases are
illustrated in Figure 2). Cas , Cwd s , Cwu s , and UF0 are deﬁned at steady state. With the consideration of
steady-state conditions, deﬁning the variables Ca (t) = Cas (0) + x ab (t), Cw (t) = Cwu s (0) + xwb (t),
CaF (z, t) = Cas (z) + x a (z, t), Cwd (z, t) = Cwd s (z) + xwd (z, t), Cwu (z, t) = Cwu s (z) + xwu (z, t),
and UF = UF0 + u(t), one can obtain the following linear coupled PDE–ODEs:

Figure 2. Steady-state proﬁle of mineral.

⎡
⎤
⎡
⎤⎡
⎤
∂
−m1 ∂z
x a (z, t)
x a (z, t)
+J11 (z)
J12 (z)
J13 (z)
∂ ⎢
⎥
⎢
⎥
⎢
⎥
∂
J21 (z)
m2 ∂z
+J22 (z)
J23 (z)
⎣ xwd (z, t) ⎦ = ⎣
⎦ ⎣ xwd (z, t) ⎦ ,
∂t
∂
xwu (z, t)
J31 (z)
J32 (z)
−m3 ∂z
+J33 (z)
xwu (z, t)



 




0
0
d
b11 b12
x ab (t)
x ab (t)
u(t) + Uwd
xwd (0, t),
=
+
CF
dt xwb (t)
b21 b22
xwb (t)
Hw l
H l

(9)

(10)

w

with the following boundary conditions and initial conditions:
x a (0, t) = x ab (t),
x ab (0) = x ab0 ,
V
Ac ,

where l =
b12 =

αAvHw
Ha b

−

xwu (0, t) = xwb (t),

xwb (0) = xwb0 ,

m1 =

Ua
Ha ,

m2 =

αAvHw
Hab Ca∗ Cas (0), b21

=

x a (z, 0) = x a0 ,
Uwd + Hwd Us
,
Hwd

βHab
Hw

+

xwu (z, 0) = xwu 0 ,

m3 =

αAv
Ca∗ Cwu s (0),

xwd (h, t) = 0;

Uwu
Hwu ,

(11)
xwd (z, 0) = xwd 0 ;

(12)

Ua b
αAvHw
Hab l − Hab Ca∗ Cwu s (0),
Uwu
UT
αAv
Hw l − Hw l + Ca∗ Cas (0).

b11 = − β −

and b22 = −αAv −

Jij (z) (i = 1, 2, 3; j = 1, 2, 3) is the Jacobian of the nonlinear term evaluated at steady state.
⎡

⎤
J11 (z) J12 (z) J13 (z)
⎢
⎥
J : = ⎣ J21 (z) J22 (z) J23 (z) ⎦
J31 (z) J32 (z) J33 (z)
⎡ β
σAv
− Ha − HαAv
∗ Cwd s ( z ) − H C ∗ Cwu s ( z )
a Ca
a a
⎢
kβ
αAv
⎢
+
C
=⎣
Hwd
Hwd Ca∗ wd s ( z )
(1− k ) β
+ HσAv
∗ Cwu s ( z )
Hw
w C
u

u

αAv
αAv
Ha − Ha Ca∗ Cas ( z )
αAv
− αAv
+
Hwd
Hwd Ca∗ Cas ( z )

0

a

101

σAv
Ha

− σAv
Hw +
u

⎤

σAv
Ha Ca∗ Cas ( z )
⎥
ρ
⎥
Hwd
⎦
ρ
σAv
Hwu Ca∗ Cas ( z ) − Hwu

−

(13)

Mathematics 2018, 6, 100

The interconnection of the hyperbolic PDE system and ODE system can be considered as
the boundary-controlled hyperbolic PDE system (see Figure 3). The state transformation that
transfers the boundary actuation to in-domain actuation is given as x a (z, t) = x̄ a (z, t) + B1 (z) x a (0, t),
and xwu (z, t) = x̄wu (z, t) + B2 (z) xwu (0, t), with x̄ a (0, t) = 0, x̄wu (0, t) = 0, B1 (0) = 1, and B2 (0) = 1.
Equations (9) and (10) become
∂ x̄ a (z, t)
∂ x̄ a (z, t)
= − m1
+ J11 (z) x̄ a (z, t) + J12 (z) xwd (z, t) + J13 (z) x̄wu (z, t)
∂t
∂z
dB (z)
+ [ J13 (z) B2 (z)− b12 B1 (z)] xwu (0, t)+[−m1 1 − b11 B1 (z) + J11 (z) B1 (z)] x a (0, t),
dz
∂xwd (z, t)
∂xwd (z, t)
= m2
+ J21 (z) x̄ a (z, t)+ J22 (z) xwd (z, t)+ J23 (z) x̄wu (z, t)
∂t
∂z
+ [ J21 (z) B1 (z) x a (0, t) + J23 (z) B2 (z) xwu (0, t)],
∂ x̄wu (z, t)
∂ x̄wu (z, t)
= − m3
+ J31 (z) x̄ a (z, t) + J32 (z) xwd (z, t) + J33 (z) x̄wu (z, t)
∂t
∂z
dB (z)
+ [ J31 (z) B1 (z) − b21 B2 (z)] x a (0, t) + [−m3 2
− b22 B2 (z) + J33 (z) B2 (z)] xwu (0, t)
dz
Uw
C
− B2 (z) d xwd (0, t) − B2 (z) F u(t),
Hw l
Hw l
dx ab (t)
= b11 x ab (t) + b12 xwb (t),
dt
Uwd
dxwb (t)
C
xw (0, t) + F u(t),
= b21 x ab (t) + b22 xwb (t) +
dt
Hw l d
Hw l

(14)

(15)

(16)
(17)
(18)

with the following boundary conditions and initial conditions:
x̄ a (0, t) = 0,
x ab (0) = x ab0 ,

xwb (0) = xwb0 ,

x̄wu (0, t) = 0,
x̄ a (z, 0) = x̄ a0 ,

xwd (h, t) = 0;
x̄wu (z, 0) = x̄wu 0 ,

(19)
xwd (z, 0) = xwd 0 ;

(20)

with x̄ a0 = x a (z, 0) − B1 (z) x ab (0) and x̄wu 0 = xwu (z, 0) − B2 (z) xwb (0). We consider the conditions
2 (z)
1 (z)
−m1 dBdz
− b11 B1 (z) + J11 (z) B1 (z) = 0 and −m3 dBdz
− b22 B2 (z) + J33 (z) B2 (z) = 0 and solve for the
B1 (z) and B2 (z) expressions, which simpliﬁes the system given by Equations (14)–(18) as follows:
∂ x̄ a (z, t)
∂ x̄ a (z, t)
= − m1
+ J11 (z) x̄ a (z, t) + J12 (z) xwd (z, t) + J13 (z) x̄wu (z, t)
∂t
∂z
+ [ J13 (z) B2 (z)− b12 B1 (z)] xwb (t),
∂xwd (z, t)
∂xwd (z, t)
= m2
+ J21 (z) x̄ a (z, t)+ J22 (z) xwd (z, t)+ J23 (z) x̄wu (z, t)
∂t
∂z
+ J21 (z) B1 (z) x ab (t) + J23 (z) B2 (z) xwb (t),
∂ x̄wu (z, t)
∂ x̄wu (z, t)
= − m3
+ J31 (z) x̄ a (z, t) + J32 (z) xwd (z, t) + J33 (z) x̄wu (z, t)
∂t
∂z
Uw
C
+ [ J31 (z) B1 (z)− b21 B2 (z)] x ab (t)− B2 (z) d xwd (0, t)− B2 (z) F u(t),
Hw l
Hw l
dx ab (t)
= b11 x ab (t) + b12 xwb (t),
dt
Uwd
C
dxwb (t)
= b21 x ab (t) + b22 xwb (t) +
xw (0, t) + F u(t).
dt
Hw l d
Hw l

(21)

(22)

(23)
(24)
(25)

We consider the extended state x ∈ H Rn , where H is a real Hilbert space L2 (0, 1) with the
inner product < ·, · > and Rn is a real space. The input u(t) ∈ U; the disturbance g(t) ∈ G; and the

102

Mathematics 2018, 6, 100

output y(t) ∈ Y, U, G, and Y are real Hilbert spaces. The system given by Equations (21)–(25) can be
expressed as the equivalent state-space description:
ẋ (t)

=

Ax (t) + Bu(t) + Eg(t),

(26)

!
"T
where the system state is x (·, t) =
and the
x̄ a (z, t), xwd (z, t), x̄wu (z, t), x ab (t), xwb (t)
The system operator A is deﬁned on its$ domain as
disturbance
# is g(t) = xwd (0, t).
D ( A) =

x = [ x1 , x2 , x3 , x4 , x5 ] T ∈ H : x is a.c.,


A =
⎡
⎢
⎢
⎢
= ⎢
⎢
⎢
⎣

AF

AO

0

AC

dx
dz

∈ H, x1 (0) = 0, x2 (h) = 0, x3 (0) = 0 by



(27)

⎤
∂
−m1 ∂z
+ J11 (z)
J12 (z)
J13 (z)
0
J13 (z) B2 (z)−b12 B1 (z)
⎥
∂
J21 (z)
m2 ∂z + J22 (z)
J23 (z)
J21 (z) B1 (z)
J23 (z) B2 (z)
⎥
⎥
∂
⎥.
J31 (z)
J32 (z)
−m3 ∂z
+ J33 (z) J31 (z) B1 (z)−b21 B2 (z)
0
⎥
⎥
⎦
0
0
0
b11
b12
0
0
0
b21
b22

⎡

0
⎢
0
⎢
⎢
C
The input, disturbance, and output operators are given by B = ⎢ − B2 (z) HwF l
⎢
⎣
0
⎡

0
⎢
0
⎢
⎢
⎢ − B2 (z) Uwd
Hw l
⎢
⎢
0
⎣
Uwd
Hw l

⎤
⎥
⎥
⎥
⎥ and E =
⎥
⎦

CF
Hw l

⎤
⎥
⎥
⎥
⎥.
⎥
⎥
⎦

Figure 3. Schematic representation of coupled partial differential equations (PDEs) and ordinary
differential equations (ODEs) system connected through boundary.

2.3. Discretized Model
For the discrete controller design, a discretized model is required. Cayley–Tustin time
discretization transformation is used to obtain discrete models without consideration of spatial
discretization and/or without any other type of model spatial approximation.

103

Mathematics 2018, 6, 100

2.3.1. Time Discretization for Linear PDE
The linear inﬁnite-dimensional system is described by the following state-space system:
ẋ (z, t)

=

y(t)

Ax (z, t) + Bu(t),

x (z, 0) = x0 ;

= Cx (z, t) + Du(t).

(28)

The operator A : D ( A) ⊂ H → H is a generator of a C0 -semigroup on H and has a Yoshida
extension operator A−1 . B, C, and D are linear operators associated with the actuation and output
measurement or direct feed-forward element; that is, B ⊂ L(U, H ), C ⊂ L( H, Y ), and D ⊂ L(U, Y ).
Given a time discretization parameter d > 0, the Tustin time discretization is given by the
following [24]:
x ( jd) − x (( j − 1)d)
d

≈

y( jd)

≈

x (0)

=

x ( jd) + x (( j − 1)d)
+ Bu( jd),
2
x ( jd) + x (( j − 1)d)
C
+ Du( jd),
2
x0 .
A

√

(29)

√

We let udj / d be an approximation to u( jd), under the assumptions that ydj / d converges to
y( jd) as d → 0. Then, one obtains discrete time dynamics as follows:
x dj − x dj−1
d
ydj /

√

d

x0d

=

A

= C
=

x dj + x dj−1
2
x dj + x dj−1
2

√
+ Budj / d,
√
+ Dudj / d,

x0 .

(30)

After some calculations, one obtains the form of a discrete system:
x (z, k)

Ad x (z, k − 1) + Bd u(k ),

=

x (z, 0) = x0 ;

= Cd x (z, k − 1) + Dd u(k).

y(k)

(31)

Here δ = 2/d, and the operators Ad , Bd , Cd , and Dd are given by


Ad
Cd

Bd
Dd





=

[√
δ − A ] −1 [ δ + A ]
2δC [δ − A]−1

√

2δ[δ − A]−1 B
G (δ)


,

(32)

where G (δ) denotes the transfer function of the system, G (δ) = C [δ − A]−1 B + D. Operator Ad can
be expressed as Ad = − I + 2δ[δ − A]−1 , where I is the identity operator. By introducing the afﬁne
disturbance input, the time discretization for the most general form:
ẋ (z, t)
y(t)

=

Ax (z, t) + Bu(t) + Eg(t),

= Cx (z, t) + Du(t) + Fg(t),

x (z, 0) = x0 ,
(33)

is given by [25]; the corresponding
discrete operator of the linear operators E ⊂ L( Rn , H ) and
√
n
−
1
F ⊂ L( R , Y ) are Ed = 2δ[δ − A] E and Fd = C [δ − A]−1 E + F.
2.3.2. Time Discretization of Column Flotation System
From the previous section, one can ﬁnd resolvent R(δ, A) = [δ − A]−1 of the column operator A
(Equation (27)), which provides discrete operators (Ad , Bd , Cd , and Dd ) to be easily realized. Returning

104

Mathematics 2018, 6, 100

to the system given by Equation (26), the resolvent operator can be obtained by taking a Laplace
transform. After the Laplace transform, one obtains
1
1
1
∂ x̄ a (z, s)
=
( J (z) − s) x̄ a (z, s) +
J (z) xwd (z, s) +
J (z) x̄wu (z, s)
∂z
m1 11
m1 12
m1 13
1
1
x̄ a (z, 0),
[ J (z) B2 (z) − b12 B1 (z)] xwu (0, s) +
+
m1 13
m1
∂xwd (z, s)
1
1
1
= − J21 (z) x̄ a (z, s) −
( J22 (z) − s) xwd (z, s) −
J23 (z) x̄wu (z, s)
∂z
m2
m2
m2
1
1
1
J (z) B1 (z) x a (0, s) −
J23 (z) B2 (z) xwu (0, s) −
xw (z, 0),
−
m2 21
m2
m2 d
1
1
1
∂ x̄wu (z, s)
=
J (z) x̄ a (z, s) +
J32 (z) xwd (z, s) +
( J33 (z) − s) x̄wu (z, s)
∂z
m3 31
m3
m3
1
1
[ J (z) B1 (z) − b21 B2 (z)] x a (0, s) +
x̄w (z, 0),
+
m3 31
m3 u
s − b22
b
x ab (0) + 12 xwb (0),
x ab (s) =
b
b
b21
s − b11
xwb (s) =
x (0) +
xwb (0),
b ab
b

(34)

(35)

(36)
(37)
(38)

where b = (s − b11 )(s − b22 ) − b21 b12 .
By solving this ODE, one obtains
⎡

⎤
⎡
⎤
⎡ 1
⎤
1
1
x̄ a (z, s)
x̄ a (0, s)
 z
m1 x̄ a ( η, 0) + m1 Ja1 ( η ) x ab (0) + m1 Ja2 ( η ) xwb (0)
⎢
⎥ Āz ⎢
⎥
⎥
1
1
1
Ā(z−η ) ⎢
⎣ xwd (z, s) ⎦=e ⎣ xwd (0, s) ⎦ + e
⎣− m2 xwd (η, 0) − m2 Jd1 (η ) x ab (0) − m2 Jd2 (η ) xwb (0)⎦dη, (39)
0
1
1
1
x̄wu (z, s)
x̄wu (0, s)
m x̄wu ( η, 0) + m Ju1 ( η ) x ab (0) + m Ju2 ( η ) xwb (0)
3

3

3

b21
s−b11
Ja1 (z)
=
Ja2 (z)
=
b [ J13 ( z ) B2 ( z ) − b12 B1 ( z )],
b [ J13 ( z ) B2 ( z ) − b12 B1 ( z )],
b21
b12
s−b11
s−b22
=
J
(
z
)
B
(
z
)
+
J
(
z
)
B
(
z
)
,
J
(
z
)
=
J
(
2
21
1
d2
b
b 23
b 21 z ) B1 ( z ) +
b J23 ( z ) B2 ( z ),
b12
s−b22
= b [ J31 (z) B1 (z) − b21 B2 (z)], and Ju2 (z) = b [ J31 (z) B1 (z) − b21 B2 (z)]. For simplicity,

where
Jd1 (z)
Ju1 (z)
we let Jij , which is deﬁned as a spatial average of Jij (z), replace Jij (z), so that the matrix exponential of
⎡ 1
⎤
1
1
m1( J11 − s )
m1 J12
m1 J13
⎢
⎥
− m12( J22 − s)
− m12 J23 ⎦.
Ā can be computed directly. Then, Ā = ⎣ − m12 J21
1
1
1
m3 J31
m3 J32
m3( J33 − s )
With the boundary conditions given by Equation (19), the resolvent of operator A can be expressed
as follows:
R(s, A)

= [sI − A]−1 x (z, 0)
⎡
R11 R12 R13
⎢ R
⎢ 21 R22 R23
⎢
= ⎢ R31 R32 R33
⎢
⎣ 0
0
0
0
0
0

R14
R24
R34
R44
R54

R15
R25
R35
R45
R55

⎤
⎥
⎥
⎥
⎥ x (z, 0),
⎥
⎦

(40)

where R11 , R12 , ..., R55 are shown in Appendix A. Then, the discretized model of the column ﬂotation
process takes the following form:
x (z, k )

=

Ad x (z, k − 1) + Bd u(k) + Ed g(k ).

105

(41)

Mathematics 2018, 6, 100

3. Model Predictive Control Design
In this work, the model for the column ﬂotation process uses coupled PDEs and ODEs with input
disturbance g(t); the continuous linearized model described in Equation (26) can be rewritten as
ẋ (t)
where ū(t) = u(t) +
as follows:

Uwd
CF

=

Ax (t) + Bū(t),

(42)

g(t). The discrete version is obtained by applying Cayley–Tustin discretization

x (z, k )

=

Ad x (z, k − 1) + Bd ū(k ),

(43)

where we have adopted x (z, k) notation to denote spatial characteristics of the extended state
x (t). The model predictive controller was developed as a solution of the optimization problem
by minimizing the following open-loop performance objective function across the length of the inﬁnite
horizon at sampling time k [26] on the basis of the above system given by Equation (43) without
disturbances being present.
∞

min
ū N

∑ [< x(z, k + j|k), Qx(z, k + j|k) >

j =0

+ < ū(k + j + 1|k), Rū(k + j + 1|k) >]
s.t.

(44)

x (z, k + j|k ) = Ad x (z, k + j − 1|k ) + Bd ū(k + j|k)]
ūmin ≤ ū(k + j|k) ≤ ūmax
x min ≤ x (z, k + j|k ) ≤ x max ,

where Q is a symmetric positive semideﬁnite matrix and R is a symmetric positive deﬁnite matrix.
The inﬁnite-horizon open-loop objective function in Equation (44) can be expressed as the ﬁnite-horizon
open-loop objective function with u(k + N + 1|k) = 0, as below:
N −1

min
ū N

J=

∑ [< x(z, k + j|k), Qx(z, k + j|k) >

j =0

+ < ū(k + j + 1|k), Rū(k + j + 1|k) >]
+ < x (z, k + N |k), Q̄x (z, k + N |k) >
s.t.

(45)

x (z, k + j|k ) = Ad x (z, k + j − 1|k ) + Bd ū(k + j|k )
ūmin ≤ ū(k + j|k ) ≤ ūmax
x min ≤ x (z, k + j|k ) ≤ x max ,

where Q̄ is deﬁned as the inﬁnite sum Q̄ = ∑i∞=0 Ad∗i Cd∗ QCd Aid . This terminal state penalty operator Q̄
can be calculated from the solution of the following discrete Lyapunov function:
A∗d Q̄Ad − Q̄ = −Cd∗ QCd .

(46)

It can be noticed that operator Ad in the equation is applied to some function and that the same
holds for Cd ; thus to derive Q̄ directly from Equation (46) is not a feasible task. However, the unique
solution of the discrete Lyapunov function can be related to the solution of the continuous Lyapunov
function, which can be solved uniquely. Therefore, Q̄ can be obtained by solving the continuous
Lyapunov function:
A∗ Q̄ + Q̄A = −C ∗ QC, Q̄ ∈ D ( A∗ ).
(47)

106

Mathematics 2018, 6, 100

Proof. We establish a link between the continuous and discrete Lyapunov functions. If the continuous
Lyapunov function holds, deﬁning Ad := − I + 2δ[δ − A]−1 and A∗d := [− I + 2δ[δ − A]−1 ]∗ , then

∗ 

− I + 2δ(δ − A)−1 Q − I + 2δ(δ − A)−1 − Q̄

A∗d Q̄Ad − Q̄ =

= (δ − A)−1∗ [[−(δ − A)+ 2δ]∗ Q[−(δ − A)+ 2δ]
− (δ − A)∗ Q(δ − A)](δ − A)−1
= (δ − A)−1∗ [2A∗ Q̄δ + 2δ Q̄A] (δ − A)−1
= (δ − A)−1∗ [2δ(−C ∗ QC )] (δ − A)−1
√
√
= −( 2δC [δ − A]−1 )∗ Q( 2δC [δ − A]−1 )
= −Cd∗ QCd ,
such that the unique solution of the continuous Lyapunov function (Equation (51)) is also a solution of
the discrete Lyapunov function ((Equation 46)).
Uw

Because of the fact that ū(t) = u(t) + CFd g(t), straightforward algebraic manipulation of the
objective function presented in Equation (45) results in the following program:
min J
U

= U T < I, H > U + 2U T [< I, Px (z, k|k) > + < I, R
+ < x (z, k|k), Q̄x (z, k|k) > + <

Uw
Uwd
G, R d G >,
CF
CF

Uwd
G >]
CF
(48)

where U = [u(k + 1|k ), u(k + 2|k ), ..., u(k + N |k )] T , G = [ g(k + 1|k), g(k + 2|k), ..., g(k + N |k )] T , and
⎤
⎡
⎤
⎡
Bd∗ Q̄Ad
Bd∗ Q̄Bd + R
Bd∗ A∗d Q̄Bd
· · · Bd∗ Ad∗ N −1 Q̄Bd
⎢ ∗
⎥
⎥
⎢
Bd∗ Q̄Bd + R · · · Bd∗ Ad∗ N −2 Q̄Bd ⎥
⎢ Bd∗ Q̄Ad Bd
⎢ B Q̄A2 ⎥
⎥, P = ⎢ d . d ⎥.
H=⎢
.
.
.
.
⎥
⎢
⎥
⎢
..
..
..
..
..
⎦
⎦
⎣
⎣
N −1
N −2
∗
∗
N
∗
∗
Bd Q̄Bd + R
Bd Q̄Ad
Bd Q̄Ad Bd Bd Q̄Ad Bd · · ·
The objective function is subjected to the following constraints:
Uwd
G ≤ Ū max ,
CF
Uwd
≤ S (U +
G ) + Tx (z, k|k ) ≤ X max .
CF

Ū min ≤ U +
X min

(49)

That is,
⎡
⎢
⎢
⎢
⎣
⎡
⎢
⎢
where S = ⎢
⎢
⎣

Bd
Ad Bd
..
.
N −1
Ad Bd

I
−I
S
−S
0
Bd
..
.

⎤

⎡

Uw

Ū max − CFd G
⎢
Uw
⎥
⎢
−Ū min + CFd G
⎥
⎢
⎥U ≤ ⎢
⎢ X max − Tx (z, k |k) − S Uwd G
⎦
CF
⎣
Uw
− X min + Tx (z, k|k) + S CFd G

AdN −2 Bd

···
···
..
.
···

0
0
..
.
Bd

⎤

⎡
Ad
⎥
⎢ 2
⎥
⎢ Ad
⎥ and T = ⎢ .
⎥
⎢ .
⎦
⎣ .
AdN

107

⎤
⎥
⎥
⎥.
⎥
⎦

⎤
⎥
⎥
⎥
⎥,
⎥
⎦

(50)

Mathematics 2018, 6, 100

The optimization problem described in Equation (48) is a standard ﬁnite-dimensional quadratic
optimization problem, as inner products in Equation (48) are integrations over the spatial components
in the cost function.
Remark 1. The model predictive controller design in this paper uses the system state x (z, t); therefore, it is
necessary to design a discrete observer to reconstruct the system state. At present, the design of the continuous
system observer is very mature, and it is feasible to design a discrete observer on this basis of the discrete
inﬁnite-dimensional model.
4. Simulation Results
In this section, the performance of the proposed model predictive control to keep the output at
the steady state within the constraint range by adjusting the input is demonstrated by a comparison
between high-ﬁdelity numerical simulations of open-loop and controlled system responses.
In the simulations, the values of the system parameters were as given in Table 1. The time
discretization parameter was chosen as d = 0.2, which implies that δ = 10 and Δz = 0.01 were chosen
for the numerical integration.
Table 1. Model parameters for both collection region (C) and froth region (F).
Symbol

Description

Value

h
l
Ca∗
Av
Uw
Us
Ha
Hwd
Hwu
Ua
Uwd
Uwu
α
σ
β
ρ
k
a1 , a2 , a3

Height of froth region
Height of collection region
Bubble saturation parameter
Air–water interfacial area
Water velocity of collection region
Settling/slip velocity
Air holdup
Downward water holdup
Upward water holdup
Air velocity
Downward water velocity
Upward water velocity
Attachment-rate parameter for downward water
Attachment-rate parameter for upward water
Detachment rate parameter
Transfer rate from upward water to downward water
Transfer rate from air to downward water
Initial-condition coefﬁcients

1.0
1.0
5
C: 1.0; F: 0.3
0.8
1
C: 0.3; F: 0.7
0.1
C: 0.7; F: 0.2
C: 0.1; F: 0.2
0.1
C: 0.08; F: 0.1
C: 1.2; F: 1.0
1.5
C: 0.1; F: 0
0.1
0.01
a1 = 0.8, a2 = 0.1, a3 = 0.2

In this work, C was considered as C = I, which implies that the full state was available for the
controller realization, and thus C ∗ = C. The above framework allows for easy extension to the discrete
1
observer design with boundary measurements applied; that is, C (·) := 0 δ(z − 1)(·)dz. The Q̄ can
be obtained by solving the following continuous Lyapunov equation corresponding to the discrete
Lyapunov Equation (46):
A∗ Q̄ + Q̄A = − Q.
(51)




Q̄1 0
Q11 Q12
We consider Q̄ =
, where Q̄1 ∈ H, Q̄2 ∈ Rn , and assume Q =
; we can
Q21 Q22
0 Q̄2
obtain a set of equivalent Lyapunov equations as follows:
A∗F Q̄1 + Q̄1 A F = − Q11 ,

Q̄1 ∈ D ( A∗F );

Q̄1 AO = − Q12 ;
∗
AO
Q̄1 = − Q21 ;

∗
AC
Q̄2 + Q̄2 AC = − Q22 .

108

(52)

Mathematics 2018, 6, 100

⎡

⎤


0
0
q̄1−11
0
q̄2−11
⎥
, and
0 ⎦ and Q̄2 =
0
q̄1−22
0
q̄2−22
0
0
q̄1−33
⎤


0
q11 q12
⎥
, where q11 = q22 = 1, one can obtain
0 ⎦ and Q22 =
q12 q22
1

⎢
With the assumptions that Q̄1 = ⎣
⎡

1 0
⎢
by choosing Q11 = ⎣ 0 1
0 0


0.25
−0.688
and Q̄1 , as shown in Figure 4.
Q̄2 =
−0.688
1.15

Figure 4. Q̄1 obtained by solving Equation (52).

In order to demonstrate the controller performance, the MPC horizon was N = 3, and R = 0.1.
The input and state constraints were given as −0.5 ≤ u(t) ≤ 1 and 0 ≤ x a (h2 , t) ≤ 0.83. The initial
conditions of the system given by Equation (26) were given as follows:
π
= a1 (cos( z) + sin(πz)),
2
π
xwd (z, 0) = a2 (cos( z) + sin(πz)),
2
π
xwu (z, 0) = a3 (cos( z) + sin(πz)).
2
x a (z, 0)

(53)

The performance of the proposed model predictive control can be evaluated from Figures 5–8,
and the corresponding control input is given in Figure 9. From Figures 5–7, it can be seen that
under the model predictive control, the system reached steady state. Figure 8 compares the output
x a (h, k ) evolutions under the model predictive control with state/output constraints to the model
predictive control without constraints and using the open-loop system. It is clear from the ﬁgure that
the application of model predictive control allows the system to reach steady state faster and that
the output proﬁle under the model predictive control law satisﬁes the constraints. It is important
to emphasize that the system is stable and that performance under input and state constraints are
of interest in this study; however, the extension to the unstable system dynamics case is easily realizable
for more general classes of dynamic plants.

109

Mathematics 2018, 6, 100

Figure 5. Proﬁle of concentration for mineral particles with air phase under model predictive control
law Equations (48) and (49).

Figure 6. Proﬁle of concentration for mineral particles with downward water phase under model
predictive control law Equations (48) and (49).

Figure 7. Proﬁle of concentration for mineral particles with upward water phase under model predictive
control law Equations (48) and (49).

110

Mathematics 2018, 6, 100

Figure 8. Proﬁle of the state x a (h, k ) (output) under model predictive control law Equations (48)
and (49) (dash-dotted line) without constraints (dashed line), and the proﬁle of an open-loop system
(dash-dotted line), as well as state/output constraints (dotted line).

Figure 9. Input proﬁle obtained by model predictive control law Equations (48) and (49) (solid line);
input constraints are given by dotted line.

5. Conclusions
In conclusion, model predictive control algorithms are developed for the column ﬂotation
process that take into account the input and state/output constraints as well as the input disturbance.
The underlying model is described by coupled nonlinear heterodirectional hyperbolic transport
PDE–ODEs, and the steady-state proﬁles are utilized in the linearization of a nonlinear system.
By using the Cayley–Tustin time discretization method, the continuous inﬁnite-dimensional system is
mapped into the discrete inﬁnite-dimensional system without model reduction or spatial discretization.
Finally, the performance of the proposed model predictive control development was demonstrated by
applying it to the column ﬂotation system, and the simulation results show that the output (the mass
concentration of solid minerals with the air phase of froth overﬂow) is stabilized at the steady state
within the constraints’ physical range by adjusting the feed velocity. This optimal control realization
improves the column ﬂotation process, enabling it to operate more efﬁciently.

111

Mathematics 2018, 6, 100

Author Contributions: Yahui Tian conducted research calculations and simulation work and wrote the ﬁrst draft
of the paper. Xiaoli Luan and Fei Liu supervised this work and proposed feasibility suggestions. Stevan Dubljevic
provided a framework for research and guidance.
Acknowledgments: This work is supported by the National Natural Science Foundation of China (NSFC: 61773183
and 61722306), the China Scholarship Council, and the 111 Project (B12018).
Conﬂicts of Interest: The authors declare no conﬂict of interest.

Appendix A. Resolution of Operator A for Discretized Model

R11 = −
R12 =

E1 (2, 2) m2

+
R44 =
R45 =
R54 =
R55 =

0

ϕ1 (1, 2) 1
E1 (2, 2) m3

0

E2 (2, 1)(·)dη +

E2 (2, 2)(·)dη −

 h
0

 z

 z
1

m2

E2 (2, 3)(·)dη +

 h
1

1
m1

1
m3

0

0

ϕ2 (1, 1)(·)dη,

(A1)

ϕ2 (1, 2)(·)dη,

 z
0

(A2)

ϕ2 (1, 3)(·)dη,

 h
1

(A3)
 h
1

ϕ1 (1, 2)
E (2, 1) Ja1 (η )dη −
E (2, 2) Jd1 (η )dη +
E (2, 3) Ju1 (η )dη ](·)
[
E1 (2, 2) m1 0 2
m2 0 2
m3 0 2
 z
 z
 z
1
1
1
[
ϕ (1, 1) Ja1 (η )dη −
ϕ (1, 2) Jd1 (η )dη +
ϕ (1, 3) Ju1 (η )dη )](·),
m1 0 2
m2 0 2
m3 0 2
 h
 h
 h
ϕ (1, 2) 1
1
1
[
− 1
E (2, 1) Ja2 (η )dη −
E (2, 2) Jd2 (η )dη +
E (2, 3) Ju2 (η )dη ](·)
E1 (2, 2) m1 0 2
m2 0 2
m3 0 2
 z
 z
 z
1
1
1
[
ϕ (1, 1) Ja2 (η )dη −
ϕ (1, 2) Jd2 (η )dη +
ϕ (1, 3) Ju2 (η )dη )](·),
m1 0 2
m2 0 2
m3 0 2
s − b22
(·),
b
b12
(·),
b
b21
(·),
b
s − b11
(·),
b

R14 = −

R15 =

 h

 h
ϕ1 (1, 2) 1

R13 = −

+

ϕ1 (1, 2) 1
E1 (2, 2) m1

(A4)

(A5)
(A6)
(A7)
(A8)
(A9)

where ϕ1 = e Āz , ϕ2 = e Ā(z−η ) , E1 = e Āh , and E2 = e Ā(h−η ) . The other R21 , R22 , ..., R35 values can be
obtained in a similar way as for R11 , ..., R15 .
References
1.
2.
3.
4.
5.
6.
7.
8.

Finch, J.; Dobby, G. Column Flotation; Pergamon Press: Oxford, UK, 1990.
Kawatra, S.K. Fundamental principles of froth ﬂotation. In SME Mining Engineering Handbook; Society for
Mining, Metallurgy, and Exploration: Englewood, IL, USA, 2009; pp. 1517–1531.
Sbárbaro, D.; Del Villar, R. Advanced Control and Supervision of Mineral Processing Plants; Springer Science &
Business Media: Berlin/Heidelberg, Germany, 2010.
Mathieu, G. Comparison of ﬂotation column with conventional ﬂotation for concentration of a mo ore.
Can. Min. Metall. Bull. 1972, 65, 41–45.
Bergh, L.; Yianatos, J. The long way toward multivariate predictive control of ﬂotation processes. J. Process
Control 2011, 21, 226–234. [CrossRef]
McKee, D. Automatic ﬂotation control—A review of 20 years of effort. Miner. Eng. 1991, 4, 653–666.
[CrossRef]
Laurila, H.; Karesvuori, J.; Tiili, O. Strategies for instrumentation and control of ﬂotation circuits.
Miner. Process. Plant Des. Pract. Control 2002, 2, 2174–2195.
Bouchard, J.; Desbiens, A.; del Villar, R.; Nunez, E. Column ﬂotation simulation and control: An overview.
Miner. Eng. 2009, 22, 519–529. [CrossRef]

112

Mathematics 2018, 6, 100

9.

10.
11.
12.
13.
14.
15.
16.
17.
18.
19.

20.
21.
22.
23.
24.
25.
26.

Bu, X.; Xie, G.; Peng, Y.; Chen, Y. Kinetic modeling and optimization of flotation process in a cyclonic microbubble
flotation column using composite central design methodology. Int. J. Miner. Process. 2016, 157, 175–183.
[CrossRef]
Mavros, P.; Matis, K.A. Innovations in Flotation Technology; Springer Science & Business Media:
Berlin/Heidelberg, Germany, 2013; Volume 208.
Del Villar, R.; Grégoire, M.; Pomerleau, A. Automatic control of a laboratory ﬂotation column. Miner. Eng.
1999, 12, 291–308. [CrossRef]
Persechini, M.A.M.; Peres, A.E.C.; Jota, F.G. Control strategy for a column ﬂotation process. Control Eng. Pract.
2004, 12, 963–976. [CrossRef]
Bergh, L.; Yianatos, J.; Leiva, C. Fuzzy supervisory control of flotation columns. Miner. Eng. 1998, 11, 739–748.
[CrossRef]
Bergh, L.; Yianatos, J.; Acuna, C.; Perez, H.; Lopez, F. Supervisory control at Salvador ﬂotation columns.
Miner. Eng. 1999, 12, 733–744. [CrossRef]
Mohanty, S. Artiﬁcial neural network based system identiﬁcation and model predictive control of a ﬂotation
column. J. Process Control 2009, 19, 991–999. [CrossRef]
Maldonado, M.; Desbiens, A.; Del Villar, R. Potential use of model predictive control for optimizing the
column ﬂotation process. Int. J. Miner. Process. 2009, 93, 26–33. [CrossRef]
Mayne, D.Q.; Rawlings, J.B.; Rao, C.V.; Scokaert, P.O. Constrained model predictive control: Stability and
optimality. Automatica 2000, 36, 789–814. [CrossRef]
Malinen, J. Tustin’s method for ﬁnal state approximation of conservative dynamical systems. IFAC Proc. Vol.
2011, 44, 4564–4569. [CrossRef]
Havu, V.; Malinen, J. Laplace and Cayley transforms—An approximation point of view. In Proceedings of the
44th IEEE Conference on Decision and Control, 2005 and 2005 European Control Conference ( CDC-ECC’05),
Seville, Spain, 15 December 2005; pp. 5971–5976.
Havu, V.; Malinen, J. The Cayley transform as a time discretization scheme. Numer. Funct. Anal. Opt. 2007,
28, 825–851. [CrossRef]
Xu, Q.; Dubljevic, S. Linear model predictive control for transport-reaction processes. AIChE J. 2017, 63, 2644–2659.
[CrossRef]
Dobby, G.; Finch, J. Mixing characteristics of industrial ﬂotation columns. Chem. Eng. Sci. 1985, 40, 1061–1068.
[CrossRef]
Yianatos, J.; Finch, J.; Laplante, A. Cleaning action in column ﬂotation froths. Trans. Inst. Min. Metall. Sect.
C-Miner. Process. Extract. Metall. 1987, 96, C199–C205.
Franklin, G.F.; Powell, J.D.; Workman, M.L. Digital Control of Dynamic Systems; Addison-Wesley: Menlo Park,
CA, USA, 1998; Volume 3.
Xu, Q.; Dubljevic, S. Modelling and control of solar thermal system with borehole seasonal storage.
Renew. Energy 2017, 100, 114–128. [CrossRef]
Muske, K.R.; Rawlings, J.B. Model predictive control with linear models. AIChE J. 1993, 39, 262–287.
[CrossRef]
c 2018 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access

article distributed under the terms and conditions of the Creative Commons Attribution
(CC BY) license (http://creativecommons.org/licenses/by/4.0/).

113

Article

Forecast-Triggered Model Predictive Control of
Constrained Nonlinear Processes with Control
Actuator Faults
Da Xue and Nael H. El-Farra *
Department of Chemical Engineering, University of California, Davis, CA 95616, USA; xdxue@ucdavis.edu
* Correspondence: nhelfarra@ucdavis.edu; Tel.: +1-530-754-6919
Received: 21 May 2018; Accepted: 12 June 2018; Published: 19 June 2018

Abstract: This paper addresses the problem of fault-tolerant stabilization of nonlinear processes
subject to input constraints, control actuator faults and limited sensor–controller communication.
A fault-tolerant Lyapunov-based model predictive control (MPC) formulation that enforces the
fault-tolerant stabilization objective with reduced sensor–controller communication needs is
developed. In the proposed formulation, the control action is obtained through the online solution of a
ﬁnite-horizon optimal control problem based on an uncertain model of the plant. The optimization
problem is solved in a receding horizon fashion subject to appropriate Lyapunov-based stability
constraints which are designed to ensure that the desired stability and performance properties
of the closed-loop system are met in the presence of faults. The state-space region where fault-tolerant
stabilization is guaranteed is explicitly characterized in terms of the fault magnitude, the size
of the plant-model mismatch and the choice of controller design parameters. To achieve the control
objective with minimal sensor–controller communication, a forecast-triggered communication
strategy is developed to determine when sensor–controller communication can be suspended and
when it should be restored. In this strategy, transmission of the sensor measurement at a given
sampling time over the sensor–controller communication channel to update the model state in
the predictive controller is triggered only when the Lyapunov function or its time-derivative are
forecasted to breach certain thresholds over the next sampling interval. The communication-triggering
thresholds are derived from a Lyapunov stability analysis and are explicitly parameterized in terms
of the fault size and a suitable fault accommodation parameter. Based on this characterization,
fault accommodation strategies that guarantee closed-loop stability while simultaneously optimizing
control and communication system resources are devised. Finally, a simulation case study involving
a chemical process example is presented to illustrate the implementation and evaluate the efﬁcacy
of the developed fault-tolerant MPC formulation.
Keywords: model predictive control (MPC); fault-tolerant control; networked control systems; actuator
faults; chemical processes

1. Introduction
Model predictive control (MPC), also known as receding horizon control, refers to a class of
optimization-based control algorithms that utilize an explicit process model to predict the future
response of the plant. At each sampling time, a ﬁnite-horizon optimal control problem with a
cost functional that captures the desired performance requirements is solved subject to state and
control constraints, and a sequence of control actions over the optimization horizon is generated.
The ﬁrst part of the control inputs in the sequence is implemented on the plant, and the optimization
problem is solved repeatedly at every sampling time. While developed originally in response to
the specialized control needs of large-scale industrial systems, such as petroleum reﬁneries and
Mathematics 2018, 6, 104; doi:10.3390/math6060104

114

www.mdpi.com/journal/mathematics

Mathematics 2018, 6, 104

power plants, MPC technology now spans a broad range of application areas including chemicals,
food processing, automotive, and aerospace applications (see, for example, [1]). Motivated by the
advantages of MPC, such as constraint handling capabilities, performance optimization, handling
multi-variable interactions and ease of implementation, an extensive and growing body of research
has been developed over the past few decades on the analysis, design and implementation of MPC,
leading to a plethora of MPC formulations (see, for example, References [2–4] for some recent research
directions and references in the ﬁeld).
With the increasing demand over the past few decades for meeting stringent stability and
performance speciﬁcations in industrial operations, fault-tolerance capabilities have become an
increasingly important requirement in the design and implementation of modern day control
systems. This is especially the case for safety-critical applications, such as chemical processes,
where malfunctions in the control devices or process equipment can cause instabilities and lead
to safety hazards if not appropriately mitigated through the use of fault-tolerant control approaches
(see, for example, References [5–7] for some results and references on fault-tolerant control). The need
for fault-tolerant control is further underscored by the increasing calls in recent times to achieve
zero-incident plant operations as part of enabling the transition to smart plant operations ([8]).
As an advanced controller design methodology, MPC is also faced with the challenges of dealing
with faults and handling the resulting degradation in the closed-loop stability and performance
properties. Not surprisingly, this problem has been the subject of signiﬁcant research work, and
various methods have been investigated for the design and implementation of fault-tolerant MPC for
both linear and nonlinear processes (see, for example, References [9–13] for some results and references
in this area). An examination of the available literature on fault-tolerant MPC, however, reveals that
the majority of existing methods have been developed within the traditional feedback control setting
which assumes that the sensor–controller communication takes place over reliable dedicated links
with ﬂawless data transfer. This assumption needs to be re-examined in light of the widespread
reliance on networked control systems which are characterized by increased levels of integration of
resource-limited communication networks in the feedback loop.
The need to address the control-relevant challenges introduced by the intrinsic limitations on
the processing and transmission capabilities of the sensor–controller communication medium has
motivated a signiﬁcant body of research work on networked control systems. Examples of efforts
aimed at addressing some of these challenges in the context of MPC include the results in [14,15] where
resource-aware MPC formulations that guarantee closed-loop stability with reduced sensor–controller
communication requirements have been developed using event-based control techniques. In these
studies, however, the problem of integrating fault-tolerance capabilities in the MPC design framework
was not addressed.
Motivated by the above considerations, the aim of this work is to present a methodology
for the design and implementation of fault-tolerant MPC for nonlinear process systems subject to
model uncertainties, input constraints, control actuator faults and sensor–controller communication
constraints. The co-presence of faults, control and communication resource constraints creates a
conﬂict in the control design objectives where, on the one hand, increased levels of sensor–controller
communication may be needed to mitigate the effects of the faults, and, on the other, such levels
may be either unattainable or undesirable due to the sensor–controller communication constraints.
To reconcile these conﬂicting objectives, a resource-aware Lyapunov-based MPC formulation that
achieves the fault-tolerant stabilization objective with reduced sensor–controller communication is
presented in this work.
The remainder of the paper is organized as follows. Section 2 begins by introducing some
preliminaries that deﬁne the scope of the work and the class of systems considered. Section 3
then introduces an auxiliary Lyapunov-based fault-tolerant controller synthesized on the basis of an
uncertain model of the plant and characterizes its closed-loop stability region. An analysis of the effects
of discrete measurement sampling on the stability properties of the closed-loop model is conducted

115

Mathematics 2018, 6, 104

using Lyapuonv techniques and subsequently used in Section 4 to formulate a Lyapunov-based MPC
that retains the same closed-loop stability and fault-tolerance properties enforced by the auxiliary
model-based controller. The stability properties of the closed-loop system are analyzed and precise
conditions that guarantee ultimate boundedness of the closed-loop trajectories in the presence of
faults, discretely-sampled measurements and plant-model mismatch are provided. A forecasting
scheme is then developed to predict the evolution of the Lyapunov function and its time-derivative
over each sampling interval. The forecasts are used to trigger updates of the model states using the
actual state measurements whenever certain stability-based thresholds are projected to be breached.
Finally, Section 6 presents a simulation study that demonstrates the implementation and efﬁcacy of the
developed MPC formulation.
2. Preliminaries
We consider the class of ﬁnite-dimensional nonlinear process systems with the following
state-space representation:
ẋ = f(x) + G(x)Θu

(1)

Rn x

where x ∈
is the vector of process state variables, and f(·) and G(·) are sufﬁciently smooth
nonlinear functions of their arguments on the domain of interest which contains the origin in its
interior. Without loss of generality, the origin is assumed to be an equilibrium point of the uncontrolled
plant (i.e., f(0) = 0). The matrix Θ = diag{θ1 θ2 · · · θm } is a diagonal deterministic (but unknown)
fault coefﬁcient matrix, where θi is a fault parameter whose value indicates the fault or health status
of the i-th control actuator. A value of θi = 1 indicates that the i-th actuator is perfectly healthy,
whereas a value of θi = 0 represents a completely failed (non-functioning) control actuator. Any other
value, θi ∈ (0, 1), represents a certain degree of fault. The parameter θi essentially measures the
effectiveness (or control authority) of the i-th control actuator, with θi = 0 indicating an ineffective
failed actuator, θi = 1 indicating a fully effective actuator, and any other value indicating a partially
effective actuator that implements only a fraction of the required control action prescribed by the
controller. The vector of manipulated input variables, u ∈ Rnu , takes values in a nonempty compact
convex set U  {u ∈ Rnu : u ≤ umax } where umax > 0 represents the magnitude of input constraints
and · denotes the Euclidean norm of a vector or matrix.
The control objective is to steer the process state from a given initial condition to the origin in the
presence of input constraints, control actuator faults and limited sensor–controller communication.
To facilitate controller synthesis, we assume that an uncertain dynamic model of the system of
Equation (1) is available and has the following form:
%
% (%
%̇
x) + G
x)Θu
x = %f(%

(2)

% (·) are sufﬁciently smooth nonlinear functions that approximate
where %
x is the model state, %f(·) and G
the functions f(·) and G(·), respectively, in Equation (1), and are given by:
%f(x) = f(x) + δf (x)

(3a)

% (x) = G(x) − δG (x)
G

(3b)

where δf (·) and δG (·) are smooth nonlinear functions that capture the model uncertainties, and the
following Lipschitz conditions hold on a certain region of interest:

%f(x1 ) − %f(x2 ) ≤ %L1 x1 − x2 
% ( x1 ) − G
% (x2 ) ≤ %
L2  x1 − x2 
G

116

(4a)
(4b)

Mathematics 2018, 6, 104

% = diag{θ%1 θ%2 · · · θ%m } is a diagonal matrix, where θ%i
L1 and %
L2 are known positive constants. Θ
where %
is an estimate of the actual fault coefﬁcient, θi . As discussed below, θ%i can also be viewed as a fault
accommodation parameter that can be adjusted within the model to help achieve the fault-tolerant
stabilization objective.
Towards our goal of designing a fault-tolerant MPC with well-characterized stability and
performance properties, we begin in the next section by introducing an auxiliary bounded
Lyapunov-based fault-tolerant controller that has an explicitly-characterized region of stability in
the presence of faults. The stability properties of this controller are used as the basis for the
development of a Lyapunov-based MPC formulation that retains the same closed-loop stability and
fault-tolerance characteristics.
3. An Auxiliary Model-Based Fault-Tolerant Controller
3.1. Controller Synthesis and Analysis under Continuous State Measurements
Based on the dynamic model of Equation (2), we consider the following bounded Lyapunov-based
state feedback controller:
.
% )( L % V (%
%)
% )T =
k(%
u(%
x) = −k (%
x, Θ
x)Θ
x, Θ
G
&
% %
α(%
x) + (α(%
x))2 + (umax  β T (Θ,
x))4
%) =
&
k (%
x, Θ
% %
% %
 β T (Θ,
x)2 [1 + 1 + (umax  β T (Θ,
x))2 ]
∂V %
.
α(%
x) = L%f V + λV =
f + λV
∂%
x
.
% %
% L % V = [ ∂V ĝ1 · · · ∂V ĝm ]
x)Θ,
β(Θ,
x) = LG
% V (%
G
∂%
x
∂%
x

(5a)
(5b)
(5c)
(5d)

%
%
where L%f V and LG
% V are the Lie derivatives of V with respect to, f and G, respectively; V is a control
Lyapunov function that satisﬁes the following inequalities:
x) ≤ V (%
x) ≤ α2 (%
x)
α1 (%


 ∂V (%

x) 

≤ α3 (%
x)
 ∂%
x 



 ∂V (%
x) %

x)
x)
G(%
 ≤ α4 (%
 ∂%
x

(6a)
(6b)
(6c)

for some class K functions (A function α(·) is said to be of class K if it is strictly increasing and α(0) = 0)
αi (·), i ∈ {1, 2, 3, 4} and λ is a controller design parameter. The controller of Equation (5) belongs
to the general class of constructive nonlinear controllers referred to in the literature as Sontag-type
controllers. Similar to earlier bounded controller designs (see, for example, [16]), it is obtained by
scaling Sontag’s original universal formula to ensure that the control constraints are met within a
certain well-deﬁned region of the state space. The controller in Equation (5), however, differs from
earlier designs in that it incorporates the fault explicitly into the controller synthesis formula.
It can be shown (see [16] for a similar proof) that the controller of Equation (5) satisﬁes the control
constraints within a well-deﬁned region in the state space, i.e.,:

where

%)
% ) ≤ umax ∀ %
k(%
x, Θ
x ∈ Ψ(umax , Θ

(7)

.
% T L % V (%
x ∈ Rnx : L%f V + λV ≤ umax Θ
x) T }
Ψ = {%
G

(8)

117

Mathematics 2018, 6, 104

and that starting from any initial condition, %
x(0), within the compact set:
.
% ) : V (%
Ω = {%
x ∈ Ψ(umax , Θ
x) ≤ c}

(9)

% ) ⊂ Ψ(umax , Θ
% ), the time-derivative of the
where c > 0 is the largest number for which Ω(umax , Θ
Lyapunov function, V, along the trajectories of the closed-loop model satisﬁes:
V̇ (%
x) ≤ −λV (%
x)

(10)

which implies that the origin of the closed-loop model under the auxiliary control law of Equation (5)
% ) as an estimate of the domain of
is asymptotically stable in the presence of faults, with Ω(umax , Θ
attraction.
% ) deﬁned in Equations (8) and (9) is an estimate of the state space
Remark 1. The invariant set Ω(umax , Θ
region starting from where the origin of the closed-loop model is guaranteed to be asymptotically stable in the
presence of control constraints and control actuator faults. As such, it represents an estimate of the fault-tolerant
stabilization region. The expressions in Equations (8) and (9) capture the dependence of this region on both
the magnitude of the control constraints and the magnitude of the fault estimate. Speciﬁcally, as the control
constraints become tighter (i.e., umax decreases), the fault-tolerant stability region is expected to shrink in size.
In addition, as the severity of the fault increases (i.e., as θ%i tends to zero), the fault-tolerant stability region
is expected to shrink in size. In the limit as θ%i → 0 for all i (i.e., total failure of all actuators), controllability
is lost and asymptotic stabilization becomes impossible unless the system is open-loop stable (i.e., L%f V < 0).
Notice that the controller tuning parameter λ captures the classical tradeoff between stability and robustness.
Speciﬁcally, as λ increases, Equation (10) predicts a higher dissipation rate of the Lyapunov function and thus a
larger stability margin against small errors and perturbations. According to Equation (8), however, a larger
value for λ leads to a smaller stability region in general.
Remark 2. The controller of Equation (5) is designed to account explicitly for faults, and enforce closed-loop
stability by essentially canceling out the effect of the faults on the closed-loop dynamics. Notice, however, that,
while the control action is an explicit function of the fault estimate, the upper bound on the dissipation rate of the
Lyapunov function in Equation (10) is independent of the fault estimate.
3.2. Characterization of Closed-Loop Stability under Discretely Sampled State Measurements
In this section, we analyze the stability properties of the closed-loop model when the auxiliary
controller of Equation (5) is implemented using discretely-sampled measurements. This analysis is of
interest given that MPC (to which the stability properties of the auxiliary controller will be transferred)
is implemented in a discrete fashion. To this end, we consider the following sample-and-hold
controller implementation:
% (t)
% (%
%̇
x(t)) + G
x(t))Θu
x(t) = %f(%

(11a)

% ), t ∈ [ t k , t k +1 ), k ∈ N
u(t) = k(%
x ( t k ), Θ

(11b)

where tk+1 − tk  Δ is the sampling period. Owing to the non-vanishing errors introduced by the
sample and hold implementation mechanism, only practical stability of the origin of the closed-loop
model can be achieved in this case. Theorem 1 establishes that, provided a sufﬁciently small sampling
period is used, the trajectory of the closed-loop model state can be made to converge in ﬁnite-time
to an arbitrarily small terminal neighborhood of the origin, and that the size of this neighborhood
depends on the magnitude of the fault as well as on the sampling period. To simplify the statement of
the theorem, we ﬁrst introduce some notation. Speciﬁcally, we use the symbols Φ%f and ΦG
% to denote

118

Mathematics 2018, 6, 104

x) and LG
x), respectively, over the domain of interest,
the Lipschitz constants of the functions L%f V (%
% V (%
Ω, where:

 L%f V (%
x0 ) ≤ Φ%f %
x(t) − %
x0 
x(t)) − L%f V (%

(12a)

 LG
x(t)) − LG
x0 ) ≤ ΦG
x(t) − %
x0 
% V (%
% V (%
% %

(12b)

x0 ∈ Ω. We also deﬁne the following positive constants:
for %
x ( t ), %
% max
γ = K%f + KG
% Θu

(13a)

% x)
K%f = max %f(%
x), KG
% = max  G (%
%
x∈Ω

%
x∈Ω

(13b)

where K%f and KG
% are guaranteed to exist due to the compactness of Ω.
Theorem 1. Consider the closed-loop model of Equations (2)–(5), with a sample-and-hold implementation as
described in Equation (11). Given any real positive number δ ∈ (0, c), where c is deﬁned in Equations (8)
.
% ) and Δ is chosen such that
and (9), there exists a positive real number Δ∗ such that if %
x ( t0 ) = %
x0 ∈ Ω(umax , Θ
Δ ∈ (0, Δ∗ ], then the closed-loop model state trajectories are ultimately bounded and satisfy:
x(t)) ≤ δ
lim sup V (%

(14)

% max )γΔ̄ < −
−λδ f + (Φ%f + ΦG
% Θu
f
% umax )γ(Δ )2 ≤ δ
δ + (Φ% + Φ % Θ

(15b)

t→∞

where Δ∗ = min{Δ̄, Δ }, Δ̄ and Δ satisfy:

f

G

(15a)

for some  > 0 and 0 < δ f < δ , where γ, Φ%f and ΦG
% are deﬁned in Equations (12) and (13). Furthermore,
when %
x(tk ) ∈ Ω\Ω f where Ω f  {%
x ∈ Rnx : V (%
x) ≤ δ f }, V̇ (%
x(t)) ≤ −, ∀ t ∈ [tk , tk+1 ).
Proof. Consider the following compact set:

M  {%
x ∈ Rnx : δ f ≤ V (%
x) ≤ c}

(16)

for some 0 < δ f < c. Let the control action be computed for some %
x(tk ) := %
xk ∈ M, and held constant
until a time Δ̄, where Δ̄ is a positive real number, i.e.,
.
xk ) = uk , ∀ t ∈ [tk , tk + Δ̄]
u(t) = u(%

(17)

Then, for all t ∈ [tk , tk + Δ̄], we have:
% k + [ L%V (%
% k − L % V (%
% k ] (18)
V̇ (%
x(t)) = L%f V (%
xk ) + LG
xk )Θu
x(t)) − L%f V (%
xk )] + [ LG
x(t))Θu
xk )Θu
% V (%
% V (%
G
f
Since the control action is computed based on the model states in M ⊂ Ω, we have from Equation (10):
% k = V̇ (%
L%f V (%
xk ) + LG
xk )Θu
xk ) ≤ −λV (%
xk )
% V (%

(19)

xk ) ≥ δ f , and therefore:
By deﬁnition, for all %
xk ∈ M, V (%
% k ≤ −λδ f
xk ) + LG
xk )Θu
L%f V (%
% V (%

119

(20)

Mathematics 2018, 6, 104

% (·) are smooth functions, and given that u ≤ umax within
Given that %f(·) and the elements of G
xk ∈ M and a ﬁxed Δ̄, a positive real number γ,
Ω, and that M is bounded, one can ﬁnd, for all %
such that:
%
(21)
x(t) − %
xk  ≤ γΔ̄, ∀ t ∈ [tk , tk + Δ̄)
where γ is deﬁned in Equation (13). Based on this and Equation (18), the following bound can
be obtained:
% max )%
% max )γΔ̄
V̇ (%
x(t)) ≤ −λδ f + (Φ%f + ΦG
x(t) − %
xk  ≤ −λδ f + (Φ%f + ΦG
% Θu
% Θu

(22)

% max )γ, we get:
If we choose Δ̄ < (λδ f − )/(Φ%f + ΦG
% Θu
x(t)) ≤ − < 0, ∀ t ∈ [tk , tk + Δ̄)
V̇ (%

(23)

This implies that, given any 0 < δ < c, if δ f is chosen such that 0 < δ f < δ and a corresponding
value for Δ̄ is found, then if the control action is computed for any %
x ∈ M, and the hold time is less
x cannot escape Ω
than Δ̄, V̇ is guaranteed to remain negative over this time period and, therefore, %
(since Ω is a level set of V).
Now, let us consider the case when, at the sampling time tk , the model state is within Ω f  {%
x∈
Rnx : V (%
x) ≤ δ f }, i.e., V (%
x(tk )) ≤ δ f . We have already shown that:

which implies that:

% max )γΔ̄
V̇ (%
x(t)) ≤ −λV (%
xk ) + (Φ%f + ΦG
% Θu

(24)

% max )γΔ̄
V̇ (%
x(t)) ≤ (Φ%f + ΦG
% Θu

(25)

Integrating both sides of the differential inequality above yields:
V (%
x(t)) = V (%
x(tk )) +

 t
tk

V̇ (%
x(τ ))dτ

% max )γ(Δ̄)2
x(tk + Δ̄)) ≤ δ f + (Φ%f + ΦG
V (%
% Θu
Δ

(26)

Based on the last bound above, given any positive real number δ , one can ﬁnd a sampling period
small enough such that the trajectory is trapped in Ω , i.e.,
% max )γ(Δ )2 ≤ δ
x(tk + Δ )) ≤ δ f + (Φ%f + ΦG
V (%
% Θu

(27)

To summarize, if the sampling period Δ is chosen such that Δ ∈ (0, Δ∗ ], where Δ∗  min{Δ̄, Δ },
then the closed-loop model state is ultimately bounded within the terminal set Ω in ﬁnite time.
This completes the proof of the theorem.
Remark 3. The result of Theorem 1 establishes the robustness of the controller of Equation (5) to bounded
measurement errors introduced through the sample-and-hold implementation scheme. The controller is robust
in the sense that the closed-loop model trajectory remains bounded and converges in ﬁnite-time to a terminal
neighborhood centered at the origin, the size of which can be made arbitrarily small by choosing the sampling
period to be sufﬁciently small. It should be noted that the bound on the dissipation rate of the Lyapunov function,
, and the ultimate bound on the model state, δ , are both dependent on the size of the sampling period, Δ, and on
% This dependence is captured by Equation (15). As expected, a sampling period
the size of the fault estimate, Θ.
that is too large could lead to instability.
Remark 4. By inspection of the inequality in Equation (24), it can be seen that as the norm of the fault matrix
decreases the bound on the dissipation rate becomes tighter (more negative), potentially implying a faster decay
of the Lyapunov function. To the extent that the norm of the fault matrix can be taken as a measure of fault

120

Mathematics 2018, 6, 104

severity (with a smaller norm indicating a more severe fault), this seems to suggest that increased fault severity
actually helps speed up (rather than retard) the dissipation rate, which at ﬁrst glance may seem counter-intuitive.
To get some insight into this apparent discrepancy, it should ﬁrst be noted that in obtaining the inequality
in Equation (24) the control action term is essentially regarded as a disturbance that perturbs the nominal
(uncontrolled) part of the plant, and is majorized using a convenient upper bound which includes the norm of
the fault matrix as well as the magnitude of the control constraints. Based on this representation, a decrease
in the norm of the fault matrix (due to a more severe fault) implies a reduction in the controller authority and,
therefore, a decrease in the size of the disturbance which helps tighten the upper bound and potentially speed up
the dissipation rate of the Lyapunov function. A similar reasoning can be applied when analyzing the dependence
of the ultimate bound in Equation (27) on the fault size. An important caveat in making these observations is
that what is impacted by the norm of the fault matrix is only the upper bound (either on the time-derivative of
the Lyapunov function as in Equation (24) or on the Lyapunov function itself as in Equation (27)). A larger
upper bound does not necessarily translate into slower decay.
4. Design and Analysis of Lyapunov-Based Fault-Tolerant MPC
This section introduces a Lyapunov-based MPC formulation that retains the stability and
fault-tolerance characteristics of the auxiliary bounded controller presented in the previous section.
The main idea is to embed the conditions that characterize the fault-tolerant closed-loop stability
properties of the auxiliary bounded controller as constraints within the ﬁnite-horizon optimal control
problem in MPC. This idea of linking the auxiliary controller and MPC designs—and thus transferring
the stability properties from one to the other—has it roots in the original Lyapunov-based MPC
formulation presented in [17]. In the present work, we go beyond the original formulation to analyze
its robustness with respect to implementation on the plant and derive explicit conditions that account
explicitly for plant-model mismatch and control actuator faults.
To this end, we consider the following Lyapunov-based MPC formulation, where the control
action is obtained by repeatedly solving the following ﬁnite-horizon optimal control problem:
min
u∈U

 t
k+ N
tk

[%
x(τ )2Q + u(τ )2R ] dτ

(28a)

Subject to :

u(t) ≤ umax , ∀ t ∈ [tk , tk+ N )
% (t)
% (%
%̇
x(t)) + G
x(t))Θu
x(t) = %f(%

(28b)

%
x(tk ) = x(tk )

(28d)

x(t)) ≤ −, ∀ t ∈ [tk , tk+1 ), if V (%
x(tk )) > δ f
V̇ (%

(28e)

V (%
x(t)) ≤ δ , ∀ t ∈ [tk , tk+1 ), if V (%
x(tk )) ≤ δ f

(28f)

(28c)

where N represents the length of the prediction and control horizons; Q and R are positive-deﬁnite
matrices that represent weights on the state and control penalties, respectively; and V is the
control Lyapunov function used in the design of the bounded controller in Equations (5) and (6).
The constraints in Equations (28e) and (28f) are imposed to ensure that this MPC enforces the same
stability properties that the bounded controller enforces in the closed-loop model, and retains the
% ). Theorem 2 provides a characterization of the closed-loop
same stability region estimate, Ω(umax , Θ
stability properties when the above MPC is applied to the plant of Equation (1) in the presence of
plant-model mismatch and control actuator faults.
Theorem 2. Consider the closed-loop system of Equation (1) subject to the MPC law of Equation (28) with a
sampling period Δ̃ < Δ∗ , where Δ∗ is deﬁned in Theorem 1, that satisﬁes:
% umax ≤ −ω
% umax , L1 , L2 , Δ̃) + ρ2 Θ − Θ
−  + ρ1 μ(δ̄1 , δ̄2 , Θ,

121

(29)

Mathematics 2018, 6, 104

for some ω > 0, where  satisﬁes Equation (15a) and
ρ1 = α3 (α1−1 (c)), ρ2 = α4 (α1−1 (c))

(30a)

% umax + ( L1 + L2 Θumax )ζ (Δ̃)
μ = δ̄1 + δ̄2 Θ

(30b)

ζ (Δ̃)  c1 Δ̃ec2 Δ̃

(30c)

% umax + L2 Θ − Θ
% umax %
c1 = δ̄1 + δ̄2 Θ
x0 

(30d)

c2 = L1 + L2 umax

(30e)

δ̄1 = maxδ1 (x), δ̄2 = maxδ2 (x)
x∈Ω

(30f)

x∈Ω

where αi , i ∈ {1, 2, 3, 4}, are deﬁned in Equation (6), L1 and L2 are the Lipschitz constants of f(·) and G(·) on
Ω, respectively. Then, given any positive real number δ < c, there exists a positive real number Δ∗∗ such that,
if %
x(t0 ) = x(t0 ) ∈ Ω, Δ̃ ∈ (0, Δ∗∗ ], the closed-loop trajectories are ultimately bounded and:
lim supV (x(t)) ≤ δ + ρ1 ζ (Δ̃) + ξζ 2 (Δ̃) ≤ δ < c

(31)

t→∞

for some ξ > 0, where δ satisﬁes Equation (15b). Furthermore, when x(tk ) ∈ Ω\Ω where Ω  {x ∈ Rnx :
V (x) ≤ δ }, V̇ (x(t)) ≤ −ω, ∀ t ∈ [tk , tk+1 ).
.
x(t) − x(t), the dynamics of the model estimation
Proof. Deﬁning the model estimation error as e(t) = %
error are governed by:
% − G(%
% ]u + [G(%
% − G(x)Θ
% ]u + [G(x)Θ
% − G(x)Θ]u (32)
% (%
ė = [%f(%
x) − f(%
x)] + [f(%
x) − f(x)] + [G
x)Θ
x)Θ
x)Θ

Given %
x(t0 ) = x(t0 ) ∈ Ω, %
x(t) will remain within Ω for all t ∈ [t0 , t0 + Δ) because of the enforced
stability constraints (which ensure boundedness of %
x). If x(t) also remains within Ω during this
interval, then the following bound on e(t), for t ∈ [t0 , t + Δ), can be derived:
% )(t − t0 ) +
e(t) ≤ e(t0 ) + (δ̄1 + δ̄2 Θu

 t
t0

[ L1 + L2 Θu]e(τ )]dτ +

 t
t0

% )u]dτ
[ L2 %
x(t)(Θ − Θ

where we have used Equation (3) and the Lipschitz properties of the various functions involved.
In view of the model update policy in Equation (28d), we have e(t0 ) = 0, and, together with the fact
that t − t0 ≤ Δ̃, the above bound simpliﬁes to:

e(t) ≤ c1 Δ̃ + c2

 t+Δ̃
t0

e(τ )dτ

(33)

Applying the Gronwall–Bellman inequality yields:

e(t) ≤ c1 Δ̃ec2 Δ̃ = ζ (Δ), for t ∈ [t0 , t0 + Δ)

(34)

Evaluating the time-derivative of the Lyapunov function along the trajectories of the closed-loop
system yields:
∂V %
∂V %
∂V
∂V %
% + ∂V f(x) − ∂V %f(%
%
x) +
x)Θu
x) +
x)Θu
G(x)Θu −
f(%
G(%
G(%
∂%
x
∂%
x
∂x
∂%
x
∂x
∂%
x
∂V
∂V %
∂V %
∂V %
∂V
∂V %
%
≤ V̇ (%
x(t)) +
x) +
x)Θu
f(x) −
f(x) +
f(x) −
f(%
G(x)Θu −
G(%
∂x
∂x
∂x
∂%
x
∂x
∂%
x

V̇ (x) =

122

(35)

Mathematics 2018, 6, 104

x(t0 ) = x(t0 ) ∈ Ω \ Ω and Δ̃ < Δ∗ , it can be shown upon substituting Equations (3), (4), (6)
For %
and (7) into Equation (35), and using the notation in Equation (30), that:
% umax
V̇ (x) ≤ − + ρ1 μ + ρ2 Θ − Θ

(36)

Therefore, if Equation (29) holds, we have:
V̇ (x(t)) ≤ −ω, ∀t ∈ [t0 , t0 + Δ̃)

(37)

For the case when %
x(t0 ) = x(t0 ) ∈ Ω , we use the following inequality derived from a Taylor
series expansion of V (x):
∂V
x − %
(38)
V (x) ≤ V (%
x) +
x + ξ x − %
x 2
∂%
x
where ξ > 0, and the term ξ x − %
x2 bounds the second and higher-order terms of the expansion.
Together with Equations (6), (28f), and (34), it can be shown that:
V (x) ≤ δ + α3 (α1−1 (c))ζ (Δ̃) + ξζ 2 (Δ̃)

(39)

which implies that given any positive real number δ < c, one can ﬁnd a small enough Δ̃ such that
V (x(t)) ≤ δ for all t ∈ [t0 , t0 + Δ̃).
The above analysis for the initial interval can be performed recursively for all subsequent intervals
to show that the closed-loop state x(t) remains bounded within Ω, for all t ≥ t0 , thus validating the
initial assumption made on the boundedness of x. Therefore, if Equation (29) is satisﬁed, we conclude
that given any %
x(t0 ) = x(t0 ) ∈ Ω, we have for sufﬁciently small Δ̃ that x(t) ∈ Ω for all t ∈ [t0 , ∞),
and that the ultimate bound in Equation (31) holds. Furthermore, when %
x(tk ) = x(tk ) ∈ Ω \ Ω ,
we have V̇ (x(t)) ≤ −ω, for all t ∈ [tk , tk+1 ). This completes the proof of the theorem.
Remark 5. The conditions in Equations (29)–(31) provide a characterization of the stability and performance
properties of the closed-loop system under the MPC law of Equation (28). Speciﬁcally, the condition in
Equations (29) and (30) characterize the upper bound on the dissipation rate of V̇ along the trajectories of the
closed-loop outside the terminal set. A comparison between this bound, ω, and the one enforced by the nominal
MPC in the closed-loop model in Equation (28e), , shows that the actual rate is slower than the nominal one
due to the combined inﬂuences of the plant-model mismatch, the faults and the discrepancy between the actual
and estimated values of the faults. While some tuning of the discrepancy between the two dissipation rates
can be exercised by adjusting the sampling period (note from Equations (29) and (30) that reducing Δ̃ reduces
μ), the difference between the two rates is ultimately dictated by the size of the plant-model mismatch and the
magnitudes of the faults. Similarly, it can be seen that compared to the nominal ultimate bound enforced by
MPC in the closed-loop model in Equation (28f), δ , the actual ultimate bound for the closed-loop system, δ , is
larger due to the effects of the model uncertainty and the faults. Again, while the discrepancy between the two
bounds (i.e., between the two terminal sets) can be made smaller if Δ̃ is chosen small enough, it is not possible in
general to make that discrepancy arbitrarily small owing to the fact that the uncertainty and fault magnitudes
are not adjustable parameters. The comparison between the nominal and actual bounds points to the fundamental
limitations that model uncertainty and faults impose on the achievable closed-loop performance.
Remark 6. Note that if a fault, Θ, that satisﬁes the conditions in Equations (29)–(31) takes place, the closed-loop
system will be inherently stable in the presence of such fault, and the MPC is said to be passively fault-tolerant.
The conditions in Equations (29)–(31) suggest that, while mitigation of the fault effects is not necessary in this
case given that stability is not jeopardized, it may still be desirable to actively accommodate the fault by adjusting
% to enhance closed-loop performance. In particular, note from Equations (29)–(31) (see
the model parameter Θ
also Equation (36)) that when the actual fault size can be determined, adjusting the fault estimate used in the
% = 0) helps tighten the dissipation rate bound on V̇ and
model to match the actual fault (i.e., setting Θ − Θ

123

Mathematics 2018, 6, 104

reduce the size of the ultimate bound, which helps improve closed-loop performance. The implementation of this
fault accommodation measure requires knowledge of the magnitude of the fault, which in general can be obtained
using fault estimation and identiﬁcation techniques (see, for example, [18]). While exact knowledge of the fault
size is not required, errors in estimating the fault magnitude (which lead to a nonzero mismatch between Θ and
% can limit the extent to which the dissipation rate bound on V̇ can tightened and the ultimate bound reduced,
Θ)
and therefore can limit the achievable performance beneﬁts of fault accommodation.
Remark 7. The dependence of the fault-tolerant stabilization region associated with the proposed MPC
formulation on the size of the control constraints points to an interesting link between the fault-tolerant MPC
formulation and process design considerations. This connection stems from the fact that control constraints,
which are typically the result of limitations on the capacity of control actuators, are dictated in part by equipment
design considerations. As a result, an a priori process design choice that ﬁxes the capacity of the control equipment
automatically imposes limitations on the fault-tolerance capabilities of the MPC system. This connection can
be used the other way around in order to aid the selection of a suitable process design that can enhance the
fault-tolerance capabilities of the control system. Speciﬁcally, given a desired region of fault-tolerant operation
for the MPC, one can use the characterization in Equations (8) and (9) to determine the corresponding size of
the control constraints, and hence the capacity of the control equipment. It is worth noting that the integration
of process design and control in the context of MPC has been the subject of several previous works (see,
for example, [19–21]). However, the problem of integrating process design and fault-tolerant MPC under
uncertainty has not been addressed in these prior works. The results in this paper shed some light on this gap and
provide a general framework for examining the interactions between process design and control in the context of
fault-tolerant MPC.
5. Fault-Tolerant MPC Implementation Using Forecast-Triggered Communication
To implement the MPC law of Equation (28), the state measurement must be transmitted to the
controller at every sampling time in order to update the model state. To reduce the frequency of
sensor–controller information transfer, we proceed in this section to present a forecast-triggered
sensor–controller communication strategy that optimizes network resource utilization without
compromising closed-loop stability. The basic idea is to forecast at each sampling time the expected
evolution (or rate of evolution) of the Lyapunov function over the following sampling interval based
on the available state data and the worst-case uncertainty, and to trigger an update of the model state
only in the event that the forecast indicates a potential increase in the Lyapunov function or a potential
deterioration in the dissipation rate.
To explain how this communication strategy works, we assume that a copy of the MPC law
is embedded within the sensors side to provide the control input trajectory and aid the forecasting
process. At the same time, the state measurement, x, which is available from the sensors is monitored at
the sampling times, and then the model estimation error e can be computed at each sampling instance.
To perform the forecast for t ∈ [tk , tk+1 ), the bounds in Equations (36) and (39) are modiﬁed as follows:
% umax + ρ2 Θ − Θ
% umax + ( L1 + L2 Θumax )ζ (t − t p )]
V̇ (x(t)) ≤ −  + ρ1 [δ̄1 + δ̄2 Θ

(40a)

V (x(t)) ≤ δ + ρ1 ζ (t − t p ) + ξζ 2 (t − t p )

(40b)

where t p denotes the time that the last update prior to tk took place. By comparing the above bounds
with the original ones developed in Equations (36) and (39) for the case of periodic model updates,
it can be seen that the sampling interval, Δ̃, in the original bounds has now been replaced by the
more general interval t − t p . This modiﬁcation is introduced to allow assessment of the impact of
sensor–controller communication suspension on the evolution of the Lyapunov function, and to
determine if the suspension could be tolerated for longer than one sampling period.

124

Mathematics 2018, 6, 104

Algorithm 1 and the ﬂowchart in Figure 1 summarize the proposed forecast-triggered
communication strategy. The notation V̄ (x) is used to denote the upper bound on V (x) resulting from
the forecast strategy.
Algorithm 1. Forecast-triggered sensor–controller communication strategy
Initialize %
x(t0 ) = x(t0 ) ∈ Ω and set k = 0, p = 0
Solve Equation (28) for [t0 , t1 ) and implement the ﬁrst step of the control sequence
if %
x(tk+1 ) ∈ Ω\Ω then
Calculate V̄ (x(tk+2 )) (estimate of V (x(tk+2 ))) using Equation (40a) and V (x(tk+1 ))
else
Calculate V̄ (x(tk+2 )) (estimate of V (x(tk+2 ))) using Equation (40b) and e(tk+1 )
end if
if V̄ (x(tk+2 )) < V (x(tk+1 )) then
Solve Equation (28) without Equation (28d) for [tk+1 , tk+2 )
else if V̄ (x(tk+2 )) ≥ V (x(tk+1 )) and V̄ (x(tk+2 )) ≤ δ then
Solve Equation (28) without Equation (28d) for [tk+1 , tk+2 )
else
Solve Equation (28) for [tk+1 , tk+2 ) and set p = k + 1
end if
Implement the ﬁrst step of the control sequence on [tk+1 , tk+2 )
Set k = k + 1 and go to step 3

Figure 1. Flowchart of implementation of the forecast-triggered communication strategy. MPC: model
predictive control.

Remark 8. With regard to the implementation of Algorithm 1, the sensors need to obtain measurements of
the state x at each sampling time, tk , perform Steps 3–7 in the algorithm, and then determine whether or not
x based on the criteria described in Steps 8–14.
to transmit the state to the controller to update the model state %
Speciﬁcally, once the state arrives at t = tk+1 , the evolution of x(t) over the next sampling interval is forecasted
using the actual value of V (x(tk+1 )) and e(tk+1 ), as well as the constraint on the Lyapunov function that will
become active over the next sampling interval, [tk+1 , tk+2 ), which is dictated by the location of %
x(tk+1 ) within
Ω relative to Ω . If the projection resulting from the forecast indicates that x will enter a smaller level set of V or
125

Mathematics 2018, 6, 104

lie within Ω , no update of the model state needs to be performed at tk+1 since stability would still be guaranteed
x(tk+1 ) must be reset to the actual state x(tk+1 ) to suppress the
over the next sampling interval; otherwise, %
potential instability. Note that the decision to perform or skip a model state update at a given sampling instance
is triggered by the prediction of a future event (potential breach of worst-case growth bounds on the Lyapunov
function and its time-derivative) instead of a current event (i.e., a simple comparison of the situations at the
current and previous sampling instants).
Remark 9. The condition that V̄ (x(tk+2 )) < V (x(tk+1 )) in Step 8 of Algorithm 1 is used as a criterion for
skipping an update at tk+1 since satisfying this requirement is sufﬁcient to guarantee closed-loop stability and
can also minimize the possibility of performing unnecessary model state updates that merely improve control
system performance. When reducing sensor–controller communication is not that critical, or when improved
control system performance is an equally important objective, a more stringent requirement on the decay rate
of the Lyapunov function can be imposed to help avoid frequent skipping of model state updates and enhance
closed-loop performance at the cost of increased sensor–controller communication.
Remark 10. Notice that the upper bounds used in performing the forecasts of Equation (40) depend explicitly
on the magnitude of the fault, Θ, which implies that faults can inﬂuence the update rate of the model state and the
sensor–controller communication frequency required to attain it. The impact of faults on the sensor–controller
communication rate can be mitigated through the use of active fault accommodation and exploiting the dependence
% which can be used as a fault accommodation parameter and adjusted to help
of the forecasting bounds on Θ
reduce any potential increase in the sensor–controller communication rate caused by the faults. To see how this
% in Equation (40a) (i.e., Θ
% − Θ )
works, we ﬁrst note that the term describing the mismatch between Θ and Θ
tends to increase the upper bounds on V̇ and V, and therefore cause the projected values of V (x) over the next
sampling interval to be unnecessarily conservative and large which would trigger more frequent breaches of
Step 8 or 10 in Algorithm 1, resulting in increased communication frequency. Actively accommodating the
% = Θ helps reduce the forecasting bounds and decrease the projected values of V which,
fault by setting Θ
in turn, would increase the likelihood of satisfying Step 8 or 10 in Algorithm 1, resulting in the ability to
skip more unnecessary update and communication instances. This analysis suggests that, in addition to
enhancing closed-loop performance, fault accommodation is desirable in terms of optimizing sensor–controller
communication needs (see the simulation example for an illustration of this point). As noted in Remark
6, however, possible errors in estimating the fault magnitude can impact the implementation of this fault
accommodation strategy and potentially limit the achievable savings in sensor–controller communication costs.
Remark 11. The implementation of the forecast-triggered fault-tolerant MPC scheme developed in this work
requires the availability of full-state measurements. When only incomplete state measurements are available,
an appropriate state estimator with appropriate estimation error convergence properties needs to be designed
and incorporated within the control system to provide estimates of the actual states based on the available
measurements. The use of state estimates (in lieu of the actual states) in implementing the control and
communication policies introduces errors that must be accounted for at the design stage to ensure robustness
of the closed-loop system. This can generally be done by appropriately modifying the constraints in the MPC
formulation and the communication-triggering thresholds based on the available characterization of the state
estimation error. Extension of the proposed MPC framework to tackle the output feedback control problem is the
subject of other research work.
6. Simulation Case Study: Application to a Chemical Process
The objective of this section is to demonstrate the implementation of the forecast-triggered
fault-tolerant MPC developed earlier using a chemical process example. To this end, we consider
a non-isothermal continuous stirred tank reactor (CSTR) with an irreversible ﬁrst-order exothermic
k0

reaction of the form A −→ B, where A is the reactant and B is the product. The inlet stream feeds
pure A at ﬂow rate F, concentration C A0 and temperature TA0 into the reactor. The process dynamics

126

Mathematics 2018, 6, 104

are captured by the following set of ordinary differential equations resulting from standard mass and
energy balances:
'
(
F
−E
(41a)
CA
Ċ A = (C A0 − C A ) − k0 exp
V
RT
'
(
F
ΔH
−E
Q
k0 exp
CA +
(41b)
Ṫ = ( TA0 − T ) −
V
ρc p
RT
ρc p V
where C A is the concentration of A in the reactor; T is the reactor temperature; V is the reactor volume;
k0 , E, and ΔH represent the pre-exponential factor, the activation energy, and the heat of reaction,
respectively; R denotes the ideal gas constant; c p and ρ are the heat capacity and density of the ﬂuid in
the reactor, respectively; and Q is the rate of heat transfer from the jacket to the reactor. The process
parameter values are given in Table 1.
Table 1. Process and model parameter values for the continuous stirred tank reactor (CSTR) example
in Equation (41).
Parameter
(m3 /h)

F
V (m3 )
k0 (h−1 )
E (KJ/Kmol)
R (KJ/Kmol/K)
ρ (Kg/m3 )
C p (KJ/Kg/K)
ΔH (KJ/Kmol)
C sA0 (Kmol/m3 )
T0s (K)
Qs (KJ/h)

Process

Model

3.34 × 10−3

3.34 × 10−3
0.1
1.2 × 109
8.30 × 104
8.314
1010
0.24
−4.8 × 104
0.79
352.6
0

0.1
1.2 × 109
8.314 × 104
8.314
1000
0.239
−4.78 × 104
0.79
352.6
0

The control objective is to stabilize the process state near the open-loop unstable steady-state
(C sA = 0.577 Kmol/m3 , T s = 395.3 K) in the presence of input constraints, control actuator faults
and limited sensor–controller communication. The manipulated input is chosen as the inlet reactant
concentration, i.e., u = C A0 − C sA0 , subject to the constraint u ≤ 0.5 mol/m3 , where C sA0 is the
nominal steady state value of C A0 , and control actuator faults. We deﬁne the displacement variables
x = [ x1 x2 ] T = [C A − C sA T − T s ] T , where the superscript s denotes the steady state value, which places
the nominal equilibrium point of the system at the origin. A quadratic Lyapunov function candidate
of the form V (x) = x T Px, where:


37, 400 1394.9
(42)
P=
1394.9 63.5389
is a positive-deﬁnite matrix, is used for the synthesis of the controller in Equation (5) and the
characterization of the closed-loop stability region in Equations (8) and (9). The value of the tuning
parameter λ is ﬁxed at 0.1 to ensure an adequate margin of robustness while providing an acceptable
estimate of the stability region.
6.1. Characterization of the Fault-Tolerant Stabilization Region
Recall from Section 4 that the MPC formulation in Equation (28) inherits its closed-loop stability
region from the auxiliary bounded controller, and that this region is explicitly dependent on the
magnitude of the fault (see Equations (8) and (9)). Figure 2 depicts the dependence of the constrained
stability region on fault severity. Speciﬁcally, the blue region refers to Ψ(umax |θ% = 1), i.e., when the
actuator is perfectly healthy; while the green and purple regions represent Ψ(umax ) when θ% = 0.8,
and θ% = 0.5, respectively. As all three regions are projected on a single plot, the purple region
127

Mathematics 2018, 6, 104

410

410

405

405

405

400

400

400

395

395

Ω1

390

T

410

T

T

is completely contained within the green region which is fully contained within the blue region,
i.e., Ψ(umax |θ% = 0.5) ⊂ Ψ(umax |θ% = 0.8) ⊂ Ψ(umax |θ% = 1). The largest level set Ω within each
region Ψ(umax ) is represented by the ellipse with the corresponding darker color. The three level
sets form concentric ellipses and follow the same trend with Ω(umax |θ% = 0.5) ⊂ Ω(umax |θ% = 0.8) ⊂
Ω(umax |θ% = 1). Figure 2 shows that the stability region shrinks in size as θ% decreases and the severity
of the fault increases. Each level set in this ﬁgure provides an estimate of the set of initial states starting
from which closed-loop stability is guaranteed in the presence of the corresponding fault.

$ΩΩ1$1

390

Ω3

0

0.2

0.4

0.6

CA

(a)

0.8

1

1.2

380

0

0.2

0.6

CA

θ̂ = 1
$\hat{\theta} = 1$

Ω2

θ̂ = 0.8
0.4

0.8

(b)

1

1.2

380

0

0.2

$ΩΩ
Ω1$11
Ω2

385

θ̂ = 1
$\hat{\theta} = 1$

θ̂ = 1
380

390

385

385

395

θ̂ = 0.8
0.4

0.6

CA

θ̂ = 0.5
0.8

1

1.2

(c)

Figure 2. Estimates of the region of guaranteed fault-tolerant stabilization under MPC: (a) Ω1 represents
the estimate when θ% = 1 (blue level set); (b) Ω2 represents the estimate when θ% = 0.8 (green level set);
(c) Ω3 represents the estimate when θ% = 0.5 (purple level set).

6.2. Active Fault Accommodation in the Implementation of MPC
As discussed in Sections 3 and 4, the presence of control actuator faults generally reduces the
stability region of the closed-loop system and enlarges the terminal set, which potentially compromises
the stability and performance properties of the closed-loop system. The implementation of active fault
% in the model, however, can help reduce
accommodation measures such as adjusting the value of Θ
the mismatch between the fault and its estimate used by the MPC, and therefore help reduce the size
of the terminal set which can improves the closed-loop steady state performance. In this section, the
MPC introduced in Equation (28) is implemented using the model parameters reported in Table 1 with
an optimization horizon of 20 s and a sampling period of 2 s. The nonlinear optimization problem
is solved using the standard “fmincon” algorithm in Matlab which generally yields locally optimal
solutions. A step fault of θ = 0.8 is introduced in the actuator at t = 50 s and persists thereafter.
Figure 3 compares the performance of the closed-loop system in the absence of faults (fault-free
operation scenario in black) with the performance of the closed-loop system in the presence of
faults (blue and red). The blue proﬁles depict the performance when the fault is accommodated,
while the red proﬁles illustrate the performance when the fault is left unaccommodated. The dashed
lines in Figure 3b,c represent the target steady-state values for the reactor temperature and reactant
concentration, respectively. A steady-state offset resulting from the effect of discrete measurement
sampling can be observed in Figure 3a–c, which indicates that with the uncertain model used, when the
MPC is implemented in a sample-and-hold fashion, only ultimate boundedness can be achieved.
The red proﬁles show that the fault pushes the closed-loop state trajectory away from the desired
steady state and increases the size of the terminal set signiﬁcantly. However, when accommodated
by setting θ% = θ = 0.8 upon detection of the fault, a performance comparable to that obtained in the
fault-free operation scenario can be achieved, as the blue proﬁles are very close to the black proﬁles in
Figure 3a–c.

128

Mathematics 2018, 6, 104

408
•

405

406

Fault-free
Faulty
Fault accom.

Fault-free
Faulty
Faut accom.
T ss

404
402
400

T (K)

T (K)

400

•
xss

395

398
396
394
392

390

390

385
0.1

0.2

0.3

0.4

0.5

CA (kmol/m3 )

0.6

388

0.7

0

50

100

150

Time (s)

(a)

(b)
1.4

0.70
0.65

1.2

CA0 (kmol/m3 )

CA (kmol/m3 )

0.55

0.45

0.35

Fault-free
Faulty
Faut accom.
CAss

0.25

0.15

0

50

100

1.0

0.8

0.6

Fault-free
Faulty
Faut accom.
Lower input constraint
Uppper input constraint

0.4

0.2

150

0

20

40

60

80

Time (s)

Time (s)

(c)

(d)

100

120

140

Figure 3. Comparison of the evolutions of: (a) the closed-loop state trajectory; (b) the closed-loop
reactor temperature T; (c) the closed-loop reactant concentration C A ; and (d) the manipulated input,
C A0 , for three different operating scenarios: one in the absence of any faults (black proﬁles); one in the
presence of a fault but without implementing any fault accommodation (red proﬁles); and one in the
presence of a fault and implementing fault accommodation (blue proﬁles).

6.3. Implementation of Fault-Tolerant MPC Using Forecast-Triggered Sensor–Controller Communication
In this section, we illustrate the forecast-triggered implementation strategy of MPC and highlight
the resulting reduction in network resource utilization. To this end, we consider ﬁrst the case of
fault-free operation. Figure 4 illustrates the implementation of Algorithm 1. Each red square in the
top plot represents the current value of V (x) at the corresponding sampling instant tk , and each blue
circle represents the forecasted value of V (x) calculated one sampling interval ahead. An update of the
model state is triggered at a given sampling time tk if either: (1) the forecasted V (x(tk+1 )) is greater
than the current V (x(tk )) (whenever V (x(tk )) > δ ), or (2) V (x(tk )) < δ < V (x(tk+1 )). The model
state update events are depicted by the solid blue dots in the plot. The update proﬁle shown in the
bottom panel indicates the times when the model state updates take place. In this plot, a value of
1 denotes that an update event has occurred, while a value of zero indicates that an update has been
skipped. Figure 4 captures only the case when V (x(tk )) > δ (i.e., when the closed-loop trajectory lies
outside the terminal set).
By examining Figure 4, it can be seen that at t = 8 s (the 4th sampling time), V (x(t4 )) = 586
which is represented by the red square, and that V̄ (x(t5 )) is forecasted to exceed the current value,
which is represented by the blue dot at t = 10 s, which means that, without resetting the model state
129

Mathematics 2018, 6, 104

at t = 8 s, it is possible for V (x(t)) to start to grow over the next sampling interval. To prevent the
potential destabilizing tendency, a model state update is performed at t = 8 s as shown in the update
proﬁle at the bottom of the plot. Similarly, model state updates are triggered at t = 20 s and t = 26 s
as a result of implementing the forecast-triggered communication strategy. At the other sampling
instants, the condition of V (x(tk+1 )) ≤ V (x(tk )) is satisﬁed and model state updates are not triggered.
1000

V (x)

800
600
400
200

Update

10

5

10

15

20

25

30

5

10

15

20

25

30

1

0

T ime(s)

Figure 4. Illustration of how the forecast-triggered sensor–controller communication strategy is
implemented. The top plot depicts current values of the Lyapunov function (red squares), projected
values of the Lyapunov function (blue circles) and update events (solid blue dots) at different sampling
times. The bottom plot depicts the time instances when the model state is updated.

The resulting closed-loop behavior is depicted by the red proﬁle in Figure 5a which shows that
the forecast-triggered communication strategy successfully stabilizes the reactor temperature near the
desired steady state. Figure 5b compares the number of model state updates under a conventional
MPC (where an update is performed at each sampling time) and the forecast-triggered MPC (where
an update is performed only when triggered by a breach of the stability threshold). The comparison
shows that stabilization using the forecast-triggered MPC requires only 14% of the model state updates
over the same time interval, and is thus achieved with a signiﬁcant reduction in the sensor–controller
communication frequency.
406
Forecast-triggered MPC
MPC

MPC
Forecast-triggered MPC

404
1

400

Update

T (K)

402

398
396

0

394
392

0

20

40

60

80

100

Time (s)

0

20

40

60

80

100

Time (s)

(a)

(b)

Figure 5. Closed-loop reactor temperature proﬁles (a); and model state update instances (b) under the
conventional (blue) and forecast-triggered MPC schemes (red).

130

Mathematics 2018, 6, 104

An examination of Figure 5a shows that the conventional MPC slightly outperforms the
forecast-triggered MPC initially (i.e., during the transient stage) in the sense that it enforces a faster
and more aggressive convergence of the closed-loop state. This is expected given the more frequent
model state updates performed by the conventional MPC. It is interesting to note though that the
forecast-triggered MPC exhibits a much smaller steady state offset (i.e., a smaller terminal set) despite
the less frequent sensor–controller communication in this case. It should be noted, however, that the
larger steady state offset achieved by the conventional MPC is not an indication of poorer performance,
but is rather due to the different ways in which the two MPC schemes were implemented and the
fact that for the event-triggered MPC a desired terminal set was speciﬁed a priori as part of the
controller design and implementation logic, whereas for the conventional MPC a desired terminal
set size was not speciﬁed. Speciﬁcally, for the forecast-triggered MPC, a small terminal set size was
initially speciﬁed and then the sensor–controller communication logic was designed and implemented
to keep the closed-loop state trajectory within that terminal set. For the conventional MPC, however,
no speciﬁcation of the desired terminal set was enforced. While it is possible, in principle, to specify
the same terminal set for both MPC schemes, it was found that excessively fast sampling would be
required to enforce the same tight convergence for the conventional MPC.
To demonstrate the beneﬁts of active fault accommodation in the context of the forecast-triggered
MPC scheme, we now consider the same fault scenario introduced earlier, where θ (t) = 0.8 for t ≥ 50 s.
Figure 6 compares the performance of the closed-loop system in the fault-free scenario (shown in black)
with those in the faulty operation cases, including the case when the actuator fault is accommodated
(shown in blue) and the case when the actuator fault is left unaccommodated (shown in red). Similar to
the result obtained in Figure 3, fault accommodation (realized by setting θ% = θ = 0.8 at t = 50 s)
reduces the steady-state offset and achieves closed-loop state proﬁles comparable to those obtained
in the fault-free scenario. Figure 6d shows the corresponding model state update frequencies for
the three cases. Recall that faults not only inﬂuence the closed-loop state performance, but can also
negatively impact the projected bounds on the Lyapunov function or its derivative which are used
in the forecasting strategy that triggers the model state updates. It can be seen from the middle plot
in Figure 6d that when the fault is left unaccommodated an update of the model state is triggered
at every sampling time after t = 50 s. In contrast, when the fault is appropriately accommodated,
only three model state updates are needed after t = 50 s (see the bottom plot in Figure 6d) which yields
an improved closed-loop performance. These results illustrate that the proposed fault accommodation
strategy is beneﬁcial for both performance improvement as well as network load reduction.
0.70

406
Fault-free
Faulty
Faut accom.
T ss

0.65
404
402

0.45

T (K)

CA (kmol/m3 )

0.55

400
398

0.35
396
Fault-free
Faulty
Faut accom.
CAss

0.25

0.15

0

20

40

60

80

394
392

100

Time (s)

0

20

40

60

Time (s)

(a)

(b)
Figure 6. Cont.

131

80

100

Mathematics 2018, 6, 104

1.4

1

1.2
0

20

40

60

80

100

0

20

40

60

80

100

0

20

40

60

80

100

1

Update

CA0 (kmol/m3 )

0

1.0

0.8

0.6

Fault-free
Faulty
Faut accom.
Lower input constraint
Uppper input constraint

0.4

0.2

0

1

0
0

20

40

60

80

100

Time (s)

Time (s)

(c)

(d)

Figure 6. Comparison of the performance of forecast-triggered MPC scheme under fault-free
conditions (black), an accommodated fault scenario (blue) and an unaccommodated fault scenario
(red): (a) closed-loop temperature proﬁles; (b) reactant concentration proﬁles; (c): manipulated input
proﬁle; and (d): model update frequency.

7. Conclusions
In this paper, a forecast-triggered fault-tolerant Lyapunonv-based MPC scheme is developed
for constrained nonlinear systems with sensor–controller communication constraints. An auxiliary
fault-tolerant bounded controller is initially designed to aid in the characterization of the
region of fault-tolerant stabilization and subsequent design of the Lyapunov-based MPC.
To handle sensor–controller communication constraints in the networked control system design,
a forecast-triggered strategy for managing the sensor–controller information transfer is developed.
In this strategy, model state updates using actual state measurements are triggered only when certain
stability thresholds—derived based on a worst-case projection of the state trajectory—are breached.
A simulation case study is presented to illustrate the implementation of the proposed MPC and its
fault accommodation capabilities. The results show that the proposed design is effective in achieving
closed-loop stability while simultaneously reducing communication network load.
Author Contributions: Conceptualization, N.H.E.-F. and D.X.; Methodology, N.H.E.-F. and D.X.; Validation,
D.X.; Formal Analysis, D.X.; Writing—Original Draft Preparation, D.X.; Writing—Review & Editing, N.H.E.-F.;
Supervision, N.H.E.-F.; Funding Acquisition, N.H.E.-F.

Funding: This research was funded by the US National Science Foundation, NSF, CBET-1438456.
Conﬂicts of Interest: The authors declare no conﬂict of interest.

References
1.
2.
3.
4.
5.

Qin, S.J.; Badgwell, T.A. A survey of industrial model predictive control technology. Control Eng. Pract. 2003,
11, 733–764. [CrossRef]
Rawlings, J.B.; Mayne, D.Q. Model Predictive Control: Theory and Design; Nob Hill Publishing: Madison, WI,
USA, 2009.
Christoﬁdes, P.D.; Liu, J.; de la Pena, D.M. Networked and Distributed Predictive Control: Methods and Nonlinear
Process Network Applications; Springer: London, UK, 2011.
Ellis, M.; Liu, J.; Christoﬁdes, P.D. Economic Model Predictive Control: Theory, Formulations and Chemical Process
Applications; Springer: London, UK, 2017.
Blanke, M.; Kinnaert, M.; Lunze, J.; Staroswiecki, M. Diagnosis and Fault-Tolerant Control; Springer:
Berlin/Heidelberg, Germany, 2003.
132

Mathematics 2018, 6, 104

6.
7.
8.
9.
10.
11.

12.
13.

14.

15.
16.
17.
18.
19.
20.
21.

Zhang, Y.; Jiang, J. Bibliographical Review on Reconﬁgurable Fault-Tolerant Control Systems.
Annu. Rev. Control 2008, 32, 229–252. [CrossRef]
Mhaskar, P.; Liu, J.; Christoﬁdes, P.D. Fault-Tolerant Process Control: Methods and Applications; Springer:
London, UK, 2013.
Christoﬁdes, P.D.; Davis, J.; El-Farra, N.H.; Clark, D.; Harris, K.; Gipson, J. Smart plant operations: Vision,
progress and challenges. AIChE J. 2007, 53, 2734–2741. [CrossRef]
Mhaskar, P. Robust Model Predictive Control Design for Fault-Tolerant Control of Process Systems. Ind. Eng.
Chem. Res. 2006, 45, 8565–8574. [CrossRef]
Dong, J.; Verhaegen, M.; Holweg, E. Closed-loop subspace predictive control for fault-tolerant MPC design.
In Proceedings of the 17th IFAC World Congress, Seoul, Korea, 6–11 July 2008; pp. 3216–3221.
Camacho, E.F.; Alamo, T.; de la Pena, D.M. Fault-tolerant model predictive control. In Proceedings of the
IEEE Conference on Emerging Technologies and Factory Automation, Bilbao, Spain, 13–16 September 2010;
pp. 1–8.
Lao, L.; Ellis, M.; Christoﬁdes, P.D. Proactive Fault-Tolerant Model Predictive Control. AIChE J. 2013,
59, 2810–2820. [CrossRef]
Knudsen, B.R. Proactive Actuator Fault-Tolerance in Economic MPC for Nonlinear Process Plants.
In Proceedings of the 11th IFAC Symposium on Dynamics and Control of Process Systems, Trondheim,
Norway, 6–8 June 2016; pp. 1097–1102.
Hu, Y.; El-Farra, N.H. Quasi-decentralized output feedback model predictive control of networked process
systems with forecast-triggered communication. In Proceedings of the American Control Conference,
Washington, DC, USA, 17–19 June 2013; pp. 2612–2617.
Hu, Y.; El-Farra, N.H. Adaptive quasi-decentralized MPC of networked process systems. In Distributed
Model Predictive Control Made Easy; Springer: Dordrecht, The Netherlands, 2014; Volume 69, pp. 209–223.
Christoﬁdes, P.D.; El-Farra, N.H. Control of Nonlinear and Hybrid Process Systems: Designs for Uncertainty,
Constraints and Time-Delays; Springer: Berlin, Germany, 2005.
Mhaskar, P.; El-Farra, N.H.; Christoﬁdes, P.D. Stabilization of Nonlinear Systems with State and Control
Constraints Using Lyapunov-Based Predictive Control. Syst. Control Lett. 2006, 55, 650–659. [CrossRef]
Allen, J.; El-Farra, N.H. A Model-based Framework for Fault Estimation and Accommodation Applied to
Distributed Energy Resources. Renew. Energy 2017, 100, 35–43. [CrossRef]
Sanchez-Sanchez, K.B.; Ricardez-Sandoval, L.A. Simultaneous Design and Control under Uncertainty Using
Model Predictive Control. Ind. Eng. Chem. Res. 2013, 52, 4815–4833. [CrossRef]
Bahakim, S.S.; Ricardez-Sandoval, L.A. Simultaneous design and MPC-based control for dynamic systems
under uncertainty: A stochastic approach. Comput. Chem. Eng. 2014, 63, 66–81. [CrossRef]
Gutierrez, G.; Ricardez-Sandoval, L.A.; Budman, H.; Prada, C. An MPC-based control structure selection
approach for simultaneous process and control design. Comput. Chem. Eng. 2014, 70, 11–21. [CrossRef]
c 2018 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access

article distributed under the terms and conditions of the Creative Commons Attribution
(CC BY) license (http://creativecommons.org/licenses/by/4.0/).

133

mathematics
Article

Approximate Dynamic Programming Based Control
of Proppant Concentration in Hydraulic Fracturing
Harwinder Singh Sidhu 1,2 , Prashanth Siddhamshetty 1,2 and Joseph S. Kwon 1,2, *
1
2

*

Artie McFerrin Department of Chemical Engineering, Texas A&M University,
College Station, TX 77843, USA; harwindersingh289@gmail.com (H.S.S.); prashanth.s@tamu.edu (P.S.)
Texas A&M Energy Institute, Texas A&M University, College Station, TX 77843, USA
Correspondence: kwonx075@tamu.edu; Tel.: +1-979-962-5930

Received: 16 June 2018; Accepted: 27 July 2018; Published: 1 August 2018

Abstract: Hydraulic fracturing has played a crucial role in enhancing the extraction of oil and gas
from deep underground sources. The two main objectives of hydraulic fracturing are to produce
fractures with a desired fracture geometry and to achieve the target proppant concentration inside
the fracture. Recently, some efforts have been made to accomplish these objectives by the model
predictive control (MPC) theory based on the assumption that the rock mechanical properties
such as the Young’s modulus are known and spatially homogenous. However, this approach
may not be optimal if there is an uncertainty in the rock mechanical properties. Furthermore,
the computational requirements associated with the MPC approach to calculate the control moves at
each sampling time can be signiﬁcantly high when the underlying process dynamics is described by
a nonlinear large-scale system. To address these issues, the current work proposes an approximate
dynamic programming (ADP) based approach for the closed-loop control of hydraulic fracturing
to achieve the target proppant concentration at the end of pumping. ADP is a model-based control
technique which combines a high-ﬁdelity simulation and function approximator to alleviate the
“curse-of-dimensionality” associated with the traditional dynamic programming (DP) approach.
A series of simulations results is provided to demonstrate the performance of the ADP-based
controller in achieving the target proppant concentration at the end of pumping at a fraction of
the computational cost required by MPC while handling the uncertainty in the Young’s modulus of
the rock formation.
Keywords: approximate dynamic programming (ADP); model predictive control (MPC); hydraulic
fracturing; model reduction; Kalman ﬁlter

1. Introduction
Petroleum and natural gas remain an important part of the global energy supply. Recently,
the extraction of underground resources such as shale gas and oil, which are trapped in low porosity
and ultra-low permeability formations, has become economically feasible due to the application of
well-stimulation techniques such as hydraulic fracturing [1] and directional drilling [2]. Since its
introduction in the 1940s, hydraulic fracturing has gradually developed as a standard practice and has
been applied to various types of reservoir formations, and thus it has made signiﬁcant contributions to
the oil and gas industry [3].
In hydraulic fracturing, the ultimate goal is to enhance the productivity of a stimulated
(i.e., fractured) well. The process begins with a step referred to as “perforation”, in which small
explosives are set off at spaced intervals at the wellbore to create initial fracture paths. Next, a ﬂuid
called pad is injected at a high pressure to initiate fractures of the rock at the perforated sites.
Subsequently, a fracturing ﬂuid called dirty volume consisting of water, additives, and proppant
is pumped into the wellbore at sufﬁciently high pressure and ﬂow rate to further propagate the fracture
Mathematics 2018, 6, 132; doi:10.3390/math6080132

134

www.mdpi.com/journal/mathematics

Mathematics 2018, 6, 132

in the rock formation. Finally, the pumping is stopped, and the fractures are closed due to the natural
stress of the rock formation. During the closure process, the remaining ﬂuid seeps into the reservoir
and the proppant is trapped inside the fracture. At the end of pumping, the concentration of the
proppant should be uniform along the fracture to achieve a highly conductive channel which will
result in effective extraction of oil and gas from the reservoir. The overall efﬁciency of the hydraulic
fracturing process depends on (1) the uniformity of proppant concentration across the fracture at the
end of pumping and (2) the ﬁnal fracture geometry.
To produce a fracture with uniform proppant concentration across the fracture and the desired
fracture geometry, it is important to generate an optimal pumping schedule. Several efforts in this
direction were initially made by Nolte [4], Gu and Desroches [5] and Dontsov and Peirce [6]. Speciﬁcally,
Nolte [4] developed a power-law type pumping schedule based on the conservation of ﬂuid volume;
Gu and Desroches [5] proposed a pumping schedule design technique using a detailed forward
numerical simulator; and Dontsov and Peirce [6] designed a pumping schedule by taking into account
proppant transport in their forward model.
The aforementioned techniques viewed hydraulic fracturing processes as an open-loop problem.
Motivated by some advances in real-time measurement techniques such as downhole pressure analysis
and microseismic monitoring, several attempts have recently been made to employ model predictive
control (MPC) theory to regulate the fracture geometry and proppant concentration. Speciﬁcally,
the limited availability of real-time measurements has been addressed by utilizing state estimators [7–9],
and several model order-reduction (MOR) techniques [10–12] have been developed to handle the
large computational requirements due to dynamic simulation of multiple highly-coupled partial
differential equations (PDEs) deﬁned over moving boundaries to describe the hydraulic fracturing
process. However, there are two unresolved issues with the MPC approach. First, it is necessary to
handle a potentially exorbitant online computational requirement due to the simulation of a nonlinear
large-scale system at each sampling time (which is usually the case in hydraulic fracturing) and
the use of a long prediction/control horizon to ensure satisfactory performance [13–15]. Second,
the conventional MPC solves a deterministic open-loop optimal control problem at each sampling
time. Therefore, it ignores the uncertainty and the feedback at future sampling times [16,17].
The above-mentioned limitations of MPC formulation can be handled by the approximate
dynamic programming (ADP) approach [18], particularly circumventing the “curse-of-dimensionality”
of the traditional dynamic programming (DP) approach. ADP is a model-based control technique
and can be employed to derive an improved control policy, starting with some sub-optimal control
policies (or, alternatively, closed-loop identiﬁcation data). In recent years, ADP has been successfully
applied to several applications such as a complex microbial cell reactor characterized by multiple
steady states [19], Van de Vusse reaction in an isothermal CSTR [20], integrated plants with a reactor
and a distillation column with a recycle [21], and systems described by hyperbolic PDEs [22–24].
Motivated by these earlier efforts, we present an ADP-based control framework for the closed-loop
operation of a hydraulic fracturing process to achieve uniform proppant concentration across the
fracture at the end of pumping.
The organization of this paper is as follows: ﬁrst, a brief introduction of ADP is presented. Second,
a high-ﬁdelity model of hydraulic fracturing is constructed based on ﬁrst-principles. Finally, we discuss
the application of ADP to a hydraulic fracturing process and present a series of simulation results
that demonstrates the superiority of the ADP-based controller over the standard MPC system in
achieving uniform proppant concentration at the end of pumping, which is directly related to the
overall productivity of a fractured well.
2. Approximate Dynamic Programming
Consider an optimal control problem with the set of all possible states and inputs represented by
X ⊂ Rnx and U ⊂ Rnu , respectively, where n x and nu are the number of state and manipulated input

135

Mathematics 2018, 6, 132

variables, respectively. For a deterministic state space system, an optimal state feedback policy can be
determined by formulating an optimization problem as follows:
∞

min
μ∈Π

s.t.

∑ Φ(x(tk ), u(tk ))

(1a)

k =0

u(tk ) = μ( x (tk ))
g( x (tk ), u(tk )) ≥ 0

(1b)
k = 0, 1, · · ·

x (tk+1 ) = f ( x (tk ), u(tk ))

(1c)
(1d)

where x (tk ) ∈ X is the system state vector and u(tk ) ∈ U is the manipulated input vector at t = tk
(i.e., kth sampling time), μ is the function mapping x (tk ) to u(tk ), Π is the set of all valid policies over
which optimal μ is to be found, f is the model describing the time evolution of the system states,
and Φ( x (tk ), u(tk )) is the single-stage cost incurred at state x (tk ) at t = tk while implementing the
control move u(tk ).
DP is an alternative approach for solving multi-stage optimal control problems [25]. In DP,
we deﬁne “cost-to-go” function, denoted by J μ ( x ), of a starting state x as a sum of single-stage costs
incurred from the state x under the control policy μ over the inﬁnite horizon:
J μ (x) =

∞

∑ Φ(x(tk ), u(tk )),

x ( t0 ) = x

(2)

k =0

where it is assumed that J μ ( x ) is well-deﬁned over the entire X . The objective of DP is to obtain the
inﬁnite horizon optimal cost-to-go function ( J opt ) that satisﬁes the following Bellman equation:
J opt ( x (tk )) = min [Φ( x (tk ), u(tk )) + J opt ( x (tk+1 ))], ∀ x ∈ X
u(tk )∈U

(3)

Once the optimal cost-to-go function J opt is obtained, it can be subsequently employed to ﬁnd the
optimal input proﬁle by solving the following point-wise single-stage optimization at every sampling
time tk :
(4)
μopt ( x (tk )) = arg min [Φ( x (tk ), u(tk )) + J opt ( x (tk+1 ))]
u(tk )∈U

There are very few problems such as linear quadratic (Gaussian) optimal control problem for
which the Bellman equation can be solved analytically. Alternatively, numerical approaches such
as “value iteration” or “policy iteration” can be employed. For systems with continuous state space,
these numerical approaches can be employed either by discretizing the state space, or by using
a ﬁnite dimensional parameterization. However, this can lead to potentially exorbitant computational
requirements as the state dimension increases, which is referred to as “curse-of-dimensionality”.
Therefore, DP has been considered largely impractical for almost all the problems of practical interest.
The curse-of-dimensionality problem of DP can be handled by the ADP approach [18]. In contrast
to the numerical approach to compute solutions for DP, which obtains the optimal cost-to-go function
for the entire continuous state space, the ADP approach limits the control law calculations to only the
relevant regions of the state space. These relevant regions are identiﬁed by performing closed-loop
simulations of the system under some known heuristics or sub-optimal control policies. From the
principle of optimality of DP, an improved control policy can be derived by solving the Bellman
equation in a recursive manner within the sampled domain of the state space (which is a discrete
set consisting of sampled states, and denoted by Xsample ). For a system with continuous state space,
it is not feasible to restrict the Bellman iterations to a set of discrete sampled states only. Therefore,
a function approximator (denoted by J̃ ( x )) is used to interpolate cost-to-go values within the sampled
states to approximate cost-to-go values in the original continuous state space. In this work, we used

136

Mathematics 2018, 6, 132

K-nearest neighbors (KNN) as a function approximator. In KNN, the cost-to-go at any query point x0
is computed as a distance-weighted average of its K-nearest neighbors:
J̃ ( x0 ) =

K

∑ w j J̃ (x j )

(5)

j =1

where
wj =

1/d j
K
∑i=1 1/di

(6)

and d1 ≤ d2 ≤ · · · are the Euclidean distances of x1 , x2 , · · · from the query point. x1 is the closest point
from x0 , followed by x2 , and so on.
3. Application of Approximate Dynamic Programming to a Hydraulic Fracturing Process
3.1. Dynamic Modeling of Hydraulic Fracturing
In this work, a large-scale process model of hydraulic fracturing is developed by adopting the
following assumptions: (1) fracture propagation is described by Perkins, Kern, and Nordgren (PKN)
model as shown in Figure 1 [26]; (2) the layers above and below have sufﬁciently large stresses such
that the vertical fracture is conﬁned within a single horizontal rock layer; (3) the fracture length is much
greater than fracture width; (4) the ﬂuid pressure is constant in the vertical direction; and (5) the fracture
is surrounded by an isotropic homogenous elastic material.

Figure 1. The PKN fracture model.

The dynamic modeling of hydraulic fracturing involves two sub-processes: fracture propagation
and proppant transport. A brief description of the governing equations is presented below. The ﬂuid

137

Mathematics 2018, 6, 132

ﬂow rate in the horizontal direction is determined by the following equation for ﬂow of a Newtonian
ﬂuid in an elliptical section [2,27]:
64μQ
dP
=−
(7)
dx
πHW 3
where P is the net pressure, x ∈ [0, L(t)] is the time-dependent spatial coordinate in the horizontal
direction, μ is the ﬂuid viscosity, Q is the ﬂuid ﬂow rate in the horizontal direction, H is the predeﬁned
fracture height, and W is the fracture width.
For a crack under constant normal pressure, the fracture shape is elliptical as shown in Figure 1.
The relationship between the maximum fracture width (i.e., the minor axis of the ellipse) and the net
pressure is given as follows [28,29]:
2PH (1 − ν2 )
W=
(8)
E
where ν is the Poisson ratio of the formation, and E is the Young’s modulus of the formation.
By taking into account the fracture volume changes and the ﬂuid leak-off into the reservoir,
the continuity equation for an incompressible ﬂuid ﬂow inside the fracture is given by [27]:
∂A ∂Q
+
+ HU = 0
∂t
∂x

(9)

where A = πW H/4 is the cross-sectional area of the elliptic fracture, and U is the ﬂuid leak-off per
unit height accounting for both fracture walls, which is determined by the following expression [2,30]:
U= )

2Cleak
t − τ (x)

(10)

where Cleak is the overall leak-off coefﬁcient, t is the elapsed time since fracturing was initiated,
and τ ( x ) is the time at which the fracture propagation has arrived at x for the ﬁrst time.
Plugging Equations (7) and (8) into Equation (9) results in the following nonlinear parabolic PDE:
(2
*
'
+
2
πH ∂W
πE
2 ∂W
3∂ W
3W
−
+
W
+ HU = 0
4 ∂t
∂x
128μ(1 − ν2 )
∂x2

(11)

The initial condition for solving the above equations is that the fracture is closed, that is
W ( x, 0) = 0. In addition, the two boundary conditions are considered as follows:
1.
2.

At the wellbore, the ﬂuid ﬂow rate is speciﬁed by Q( x, t) = Q0 (t), where Q0 (t) is the ﬂuid
injection rate (i.e., the manipulated variable).
At the fracture tip, x = L(t), the fracture is always closed, that is W ( L(t), t) = 0.

The modeling of the injected proppant transport is based on the following assumptions:
(1) along the horizontal direction, the injected proppant will travel at the fracturing ﬂuid’s velocity;
(2) the suspended proppant will settle towards the fracture bottom due to the gravitational force which
will lead to the formation of a proppant bank; (3) proppant particles are sufﬁciently large so that the
diffusive ﬂux can be neglected when the convective ﬂux is considered; and (4) because of low proppant
concentration, the interactions between the individual particles are neglected, while the drag and
gravitational forces acting on the proppant particles are still considered. Based on these assumptions,
the advection of the suspended proppant can be expressed by the following equation:
∂(WC )
+ ∇ · (WCVp ) = 0
∂t

(12)

C (0, t) = C0 (t) and C ( x, 0) = 0

(13)

138

Mathematics 2018, 6, 132

where C is the suspended proppant concentration, ∇ is the vector differential operator, Vp is the
velocity with which the proppant particles are advected, and C0 (t) is the inlet proppant concentration
at the wellbore (i.e., the manipulated variable).
The net velocity of the proppant particles, Vp , is dependent on the suspended proppant
concentration, C, the ﬂuid velocity, V, and the gravitational settling velocity, Vs , which is given
by the following expression [31]:
(14)
Vp = V − (1 − C )Vs
The gravity-induced proppant settling velocity in the fracturing ﬂuid, Vs , is computed as
follows [32]:
(1 − C )2 (ρsd − ρ f ) gd2
(15)
Vs =
18μ
101.82C
where ρsd is the proppant particle density, ρ f is the pure ﬂuid density, g is the gravitational acceleration
constant, d is the proppant diameter, and μ is the fracture ﬂuid viscosity where its relation with the
proppant concentration can be described by the following empirical model [33]:
'
μ ( C ) = μ0 1 −

C

(− β

Cmax

(16)

where μ0 is the pure ﬂuid viscosity, β is an exponent in the range of 1.2 to 1.8, and Cmax is the theoretical
maximum proppant concentration determined by Cmax = (1 − φ)ρsd where φ is the proppant bank
porosity. The particles settle out of the ﬂow to the fracture bottom and form a proppant bank.
The evolution of proppant bank height, δ, via the proppant settling is given as follows [34,35]:

(1 − φ )

d(δW )
= CVs W
dt

(17)

where proppant bank is initially of vanishing thickness, so the initial condition is that δ( x, 0) = 0.
The above-mentioned PDE-ODE systems deﬁned over time-dependent spatial domains will be
solved using an in-house simulator developed by Siddhamshetty et al. [8].
3.2. Obtaining Cost-to-Go Function Ofﬂine
3.2.1. Simulation of Sub-Optimal Control Policies for ADP
In this section, a nonlinear MPC formulation is presented to obtain sub-optimal control policies
for ADP. First, we employed uniﬁed fracture design (UFD) technique to obtain the optimal fracture
length (Lopt ) and width (Wopt ) for a speciﬁc amount of proppant, M prop , to be injected into a reservoir
well [36]. Additionally, the target proppant concentration, Ctarget , at the end of hydraulic fracturing is
calculated as follows:
M prop
Ctarget =
(18)
HLopt Wopt
The high-ﬁdelity process model described in Equations (7)–(17) demands high computational
requirements, and thus, it cannot be directly employed for the controller design. While there are
a variety of computationally efﬁcient linear [11,37,38] and nonnlinear [10,39–42] MOR techniques
available, in this work, we developed a reduced-order model (ROM) based on multivariate output
error state space (MOESP) algorithm using the simulation results from the high-ﬁdelity model as
described in [8]. The developed ROM is presented as follows:
x (tk+1 ) = Ax (tk ) + Bu(tk )

(19a)

y(tk ) = Hx (tk )

(19b)

139

Mathematics 2018, 6, 132

where x (tk ) represents the vector of states in the state space model at time instant tk , A, B and H
represent the system matrices, y(tk ) = [W0 (tk ), L(tk ), C ( x1 , tk ), C ( x2 , tk ), C ( x3 , tk ), C ( x4 , tk ), C ( x5 , tk ),
C ( x6 , tk )] T represents the vector of output variables, W0 (tk ) is the fracture width at the wellbore,
L(tk ) is the fracture length, C ( x1 , tk ), · · · , C ( x6 , tk ) are the proppant concentrations at six different
locations across the fracture, and u(tk ) = [C0 (tk ), C0 (tk − ζ x1 ), C0 (tk − ζ x2 ), C0 (tk − ζ x3 ), C0 (tk − ζ x4 ),
C0 (tk − ζ x5 ), C0 (tk − ζ x6 )] T is the inlet proppant concentration at the wellbore (i.e., the manipulated
input variable), ζ xi is the input time-delay due to the time required for the proppant to travel from the
wellbore to a particular location xi .
Remark 1. Please note the linear discrete-time state space model is good for the purpose of this study. To develop
the ROM, we varied the input proﬁle so that we can cover the entire range of operating conditions that are
being considered in the oil reservoir ﬁeld. Alternatively, a nonlinear ROM can be used to improve the controller
performance as the governing equation is indeed a nonlinear parabolic PDE with the moving boundary.
In hydraulic fracturing, the readily available real-time measurements are limited to the fracture
length and the fracture width at the wellbore, which are provided via the processed microseismic and
downhole pressure data, respectively [43]. To estimate the remaining important state variables such as
the proppant concentration across the fracture, we designed a Kalman ﬁlter by adding the process and
measurement noise to the ROM presented in Equation (19) as described in [8]:
x (tk+1 ) = Ax (tk ) + Bu(tk − ζ ) + v(tk )

(20a)

y(tk ) = Hx (tk ) + w(tk )

(20b)

where v denotes the process noise, and w denotes the measurement noise. The process noise is
assumed to be drawn from a zero mean multivariate normal distribution with covariance Q, and the
measurement noise is assumed to be zero mean Gaussian white noise with covariance R.
The state estimator algorithm works in a two-step process: prediction and measurement update.
Combining these two steps, the Kalman ﬁlter equations can be written as follows:
x̂ (tk+1 ) = A x̂ (tk ) + Bu(tk − ζ ) + M(tk )(ym (tk ) − ŷ(tk ))

(21a)

M(tk ) = P(tk ) H T ( R(tk ) + HP(tk ) H T )−1

(21b)

P ( t k +1 ) = ( I − M ( t k ) H ) P ( t k )

(21c)

ˆ is used to denote the estimated variables, M(t ) is the Kalman ﬁlter gain,
where the operator (·)
k
and P(tk ) denotes the covariance of the state estimation error.
To determine sub-optimal control policies for ADP, we employed the following MPC scheme
designed by Siddhamshetty et al. [8]:
min

(C(t f ) − Ctarget 1) T Qc (C(t f ) − Ctarget 1)

(22a)

s.t.

ROM, Equation (19)

(22b)

Cstage,k

Kalman ﬁlter, Equation (21)

(22c)

Cmin 1 ≤ C(tk + jΔ) ≤ Cmax 1, ∀ j = 0, · · · , 10 − k

(22d)

Cstage,k−1+m ≤ Cstage,k+m ≤ Cstage,k−1+m + 4 (ppga), m = 1, · · · , 10 − k
(
'
2Q0 Δ ∑ Cstage,k = M prop

(22e)

L(t f ) = Lopt , W0 (t f ) ≥ Wopt

(22g)

(22f)

k

where t f denotes the total treatment time, Qc is a positive deﬁnite matrix used to compute
the weighted norm, tk is the current time, Δ is the time interval between sampling times,
140

Mathematics 2018, 6, 132

C(tk ) = [C1 (tk ), C2 (tk ), C3 (tk ), C4 (tk ), C5 (tk ), C6 (tk )] T is the proppant concentration inside the fracture
at six different locations at t = tk , 1 is a 6 × 1 vector whose elements are all ones, W0 (tk ) and L(tk ) are
the only readily available real-time measurements of the fracture width at the wellbore and the fracture
length at t = tk , respectively, and Cstage,k is the inlet proppant concentration (i.e., the manipulated
input) corresponding to the kth time interval i.e., t ∈ [tk , tk+1 ), which can be computed by solving
Equation (22) with a shrinking prediction horizon Np = t f − tk .
In the above optimization problem, the penalty function, Equation (22a), computes the squared
deviation of the proppant concentration from the set-point at 6 different locations across the fracture
at the end of pumping. At every sampling time tk , the Kalman ﬁlter of Equation (21) is initialized to
estimate the proppant concentration Ĉ by using the real-time measurements of the fracture width at the
wellbore and the fracture length. The constraint of Equation (22d) imposes limits on the concentration
proﬁles to avoid premature termination of the hydraulic fracturing process. The constraint of
Equation (22e) demands a monotonic increase in the input proppant concentration with an increment
less than 4 ppga/stage, where ppga is a concentration unit used in petroleum engineering that refers
to one pound of proppant added to a gallon of water. The constraint of Equation (22f) speciﬁes the
total amount of proppant to be injected. The terminal constraint of Equation (22g) employs the optimal
fracture geometry, which is calculated by UFD scheme described in the preceding paragraph.
The dynamic model described in Section 3.1 was utilized to simulate the hydraulic fracturing
process using the parameters listed in Table 1. In hydraulic fracturing, the characterization of rock
mechanical properties is one of the key tasks that has to be performed prior to the model based
controller design. This requires the availability of ﬁeld data. Currently, in the ﬁeld, a small-scale
experiment called the mini-frac test is performed to collect preliminary data that can be used to
characterize the geological properties. However, in this work, the model parameters utilized to
simulate the hydraulic fracturing process are taken from literature [8,44]. Speciﬁcally, we considered
48,000 kg of proppant amount to be injected during the entire hydraulic fracturing process. For this
ﬁxed amount of proppant, we employed UFD scheme to obtain the corresponding optimal fracture
length Lopt = 135 m and width Wopt = 5.4 mm, which were used as the optimal fracture geometry
constraint (Equation (22g)) in the MPC formulation that has to be satisﬁed at the end of pumping.
Then, the target proppant concentration at the end of pumping, Ctarget = 9.765 ppga, was calculated
using Equation (18). The positive deﬁnite matrix, Qc , was considered to be a diagonal matrix with
the diagonal entries equal to 100. The pad time, t p , was ﬁxed to be 220 s and the constant ﬂow rate of
Q0 = 0.03 m3 /s was used after the pad time. The Kalman ﬁlter and feedback control systems were
initialized at the end of pad time (i.e., tk ≥ t p ). In the closed-loop simulation, t f and Δ were chosen
to be 1220 s and 100 s, respectively. The proppant pumping schedule was divided into 10 substages
and the duration of each substage was identical to Δ. At each sampling time, the controller was called
and the ﬁrst input, Cstage,k , of the entire input proﬁle (Cstage,k , Cstage,k+1 , · · · ) obtained by solving the
optimization problem over a prediction horizon length of Np was applied to the dynamic model in
a sample-and-hold fashion, and this procedure was repeated at each sampling time until the end of
treatment. Please note that the controller performance can be improved by increasing the number of
proppant pumping substages while maintaining the number of spatial locations across the fracture,
at which we want to achieve the uniform proppant concentration [8]. However, it is not viable to
have a large number of substages, and hence, we selected 10 substages because we did not observe
signiﬁcant improvement after that.
Remark 2. Please note that Kalman ﬁlter is applied before the MPC optimization. Speciﬁcally, at every sampling
time tk , the real-time measurements of the fracture width at the wellbore, W0 (tk ), and the fracture length, L(tk ),
were obtained from the high-ﬁdelity model, which is a virtual experiment. These measurements were then utilized
by Kalman ﬁlter of Equation (21) to estimate the (unmeasurable) proppant concentration inside the fracture
at t = tk . Finally, the inlet proppant concentration (i.e., the manipulated input), Cstage,k , was obtained by

141

Mathematics 2018, 6, 132

solving the optimization problem with the cost function of Equation (22a) under the constraints described by
Equations (22b) and (22d)–(22g).

Table 1. Model parameters used for the simulation.
Parameter

Symbol

Value

Leak-off coefﬁcient
Maximum concentration
Minimum concentration
Young’s modulus
Proppant permeability
Formation permeability
Vertical fracture height
Proppant particle density
Pure ﬂuid density
Fracture ﬂuid viscosity
Poisson ratio of formation

Cleak
Cmax
Cmin
E
kf
kr
H
ρsd
ρf
μ
ν

6.3 × 10−5 m/s1/2
0.64
0
0.5 × 1010 Pa
60,000 mD
1.5 mD
20 m
2648 kg/m3
1000 kg/m3
0.56 Pa·s
0.2

The data covering the relevant regions in the continuous state space was obtained from the
closed-loop simulations under the above-mentioned MPC scheme by initializing the Kalman ﬁlter and
the feedback control systems with different fracture width at the wellbore and fracture length values at
t = t p , which were obtained by varying the ﬂow rate Q0 during the pad time—i.e., t ∈ [0, t p ). In this
work, the pad time t p was ﬁxed, and therefore, the fracture width at the wellbore and the fracture
length at the end of pad time depended only on the ﬂow rate Q0 . Every different Q0 proﬁle during the
pad time would result in a unique combination of the fracture width at the wellbore and the fracture
length at the end of pad time that allows the feedback system to compute a control input proﬁle,
which is dissimilar to other proﬁles, if their Q0 during the pad time is different. In each closed-loop
simulation, the real-time measurements of the fracture width at the wellbore and the fracture length
were taken at 10 time instants (i.e., 10 substages). At each time instant, the real-time measurement was
utilized by the Kalman ﬁlter to estimate the (unmeasurable) proppant concentration inside the fracture.
Each measurement can be represented as y(tk ) = [W0 (tk ), L(tk )] T and the corresponding estimated
state can be represented as Ĉ(tk ) = [Ĉ1 (tk ), Ĉ2 (tk ), Ĉ3 (tk ), Ĉ4 (tk ), Ĉ5 (tk ), Ĉ6 (tk )] T where Ĉi (tk ) is the
proppant concentration inside the fracture at a speciﬁc location i at t = tk . Twenty-four closed-loop
simulations were performed by initializing the Kalman ﬁlter and the feedback control systems with
24 different initial conditions, resulting in 240 real-time measurements (denoted by Xmeasure ) and the
corresponding set of 240 estimated states (denoted by Xest ).
Remark 3. In hydraulic fracturing, the real-time measurement of the proppant concentration inside the fracture
is not available due to the remote subterranean location where the fracture propagates. To overcome this challenge,
we used the Kalman ﬁlter to estimate the proppant concentration based on the available real-time measurements
of the fracture width at the wellbore and the fracture length. Therefore, we use the term “estimated states” in
Section 3 instead of “sampled states” as described in Section 2.
3.2.2. Initial Cost-to-Go Approximation
0

For all of the estimated states during the closed-loop simulations, the initial cost-to-go values (J μ )
were computed as follows:
0

J μ (Ĉ(tk )) =

Nt

∑ Φ(Ĉ(t j ), u(t j ))

j=k

142

(23)

Mathematics 2018, 6, 132

where Nt = 10 is the number of time instants where the proppant concentrations are estimated by the
Kalman filter during each closed-loop simulation, and Φ(Ĉ(t j ), u(t j )) is given by the following equation:
Φ(Ĉ(t j ), u(t j )) = (Ĉ(t j+1 ) − Ctarget 1) T Qc (Ĉ(t j+1 ) − Ctarget 1)

(24)

0

A function approximator, denoted as J̃ μ (Ĉ), was constructed to obtain the mapping between
initial cost-to-go values and the estimated states (i.e., proppant concentration Ĉ) obtained during
the closed-loop simulations. We used KNN (with K = 5) as a function approximator. In hydraulic
fracturing, the real-time measurements readily available are limited to the fracture width at the
wellbore and the fracture length. Therefore, we used only these two available measurements to
determine the KNN. The function approximator works in the following way. Suppose there is a new
measurement y. First, we determine the KNN of y from the set Xmeasure , which consists of 240 real-time
measurements obtained during the closed-loop simulations. Let the KNN of y be y1 , y2 , · · · , yK with
the Euclidean distances d1 , d2 , · · · , dK , respectively, from y. Second, we select K proppant concentration
vectors Ĉ1 , Ĉ2 , · · · , ĈK from Xest which were estimated by the Kalman ﬁlter utilizing y1 , y2 , · · · , yK
during the closed-loop simulations, respectively. Then, the selected K proppant concentration vectors
Ĉ1 , Ĉ2 , · · · , ĈK are used in Equation (25) to determine the cost-to-go at a new state Ĉ estimated by the
Kalman ﬁlter utilizing the new measurement y.
K

J̃ (Ĉ) =

∑ w j J̃ (Ĉj )

(25)

j =1

where
wj =

1/d j
∑iK=1 1/di

The schematic diagram of the above procedure is shown in Figure 2.

Figure 2. Schematic ﬂow diagram to determine the cost-to-go at a new state Ĉ estimated by the Kalman
ﬁlter using a new measurement y.

143

(26)

Mathematics 2018, 6, 132

3.2.3. Bellman Iteration
Value iteration is employed for ofﬂine cost-to-go improvement. In this approach, Bellman equation
(Equation (3)) is solved iteratively for every estimated state in Xest until convergence. At each iteration
step, we calculate J i+1 for every estimated state Ĉ(tk ) by solving:
J i+1 (Ĉ(tk )) = min [Φ(Ĉ(tk ), u(tk )) + J̃ i (Ĉ(tk+1 ))]

(27)

u(tk )∈U

where the superscript i denotes the iteration index, J i+1 is the updated cost-to-go value for
0
Ĉ(tk ), J̃ i (Ĉ(tk+1 )) is the estimate of cost-to-go value for the successor state Ĉ(tk+1 ) and J̃ 0 = J̃ μ .
After updating the cost-to-go values for all of the estimated states in Xest , we ﬁt another function
approximator to the resulting Ĉ vs. J i+1 (Ĉ) data.
In this work, the Bellman iterations converged after six iterations with the following
termination condition:
1 N i +1
| J ( xk ) − J i ( xk )| < 0.35
(28)
N k∑
=1
where N = 240 is the total number of estimated states during the closed-loop simulations. Figure 3
shows how the average absolute error, N1 ∑kN=1 | J i+1 ( xk ) − J i ( xk )|, changes in subsequent iterations.
In ADP, the time evolution of the system states is described by employing the ROM, developed for the
MPC scheme, because of the high computational effort required to solve the high-ﬁdelity model.


$YHUDJH$EVRXOXWH(UURU
























,WHUDWLRQ1XPEHU
Figure 3. Proﬁle of the average absolute error with iteration.

Remark 4. In the ADP approach, the data covering the relevant regions in the continuous state space can be
obtained by performing closed-loop simulations of the system under any known heuristics or sub-optimal control
policies. The initial cost-to-go estimates do not affect the quality of the converged cost-to-go function [45,46].
Therefore, the performance of the ADP-based controller does not heavily rely on the MPC design. In this work,
we employed the MPC scheme developed by Siddhamshetty et al. [8] because it provides a good input proﬁle
compared to other available input proﬁles such as Nolte’s pumping schedule.

144

Mathematics 2018, 6, 132

3.3. Online Optimal Control
Once the cost-to-go iteration converges, we compute the control policy online by solving the
following optimization problem:
u(tk ) = arg min [Φ(Ĉ(tk ), u(tk )) + J̃ Nc (Ĉ(tk+1 ))]
u(tk )∈U

(29)

where Nc = 6 represents the number of iterations required for convergence, and J̃ Nc denotes the
converged cost-to-go function approximator.
The ADP-based controller is employed to achieve the uniform proppant concentration across the
fracture at the end of pumping. To compare the performance of the ADP-based controller with the MPC
system, we perform the closed-loop simulations under both of the control systems by initializing the
Kalman ﬁlter with the fracture width at the wellbore and the fracture length values outside the “training
set”. We want to note that the “training set” refers to the set of values of the fracture width at the
wellbore and the fracture length used to initialize the Kalman ﬁlter during the closed-loop simulations
under the MPC system as described in Section 3.2.1. The proﬁles of the injected proppant concentration
at the wellbore (i.e., the manipulated input) and proppant concentration across the fracture at the
end of pumping using ADP-based controller and the MPC system are shown in Figures 4 and 5.
The ADP-based controller shows an improvement over the MPC system in achieving the uniform
proppant concentration across the fracture at the end of pumping. The performance of the closed-loop
response can be understood based on the total cost-to-go values. Specifically, the cost-to-go values
for the ADP-based controller and the MPC system are 179.66 × 103 and 181.58 × 103 , respectively.
Furthermore, the ADP-based controller takes less computational time than the MPC system to
run a closed-loop simulation as shown in Figure 6. This is because ADP-based controller solves
a single-stage optimization problem, Equation (29), whereas the MPC system solves a multi-stage
optimization problem, Equation (22), at each sampling time. In MPC, the computational time required
to solve the optimization problem keeps decreasing with time because the number of remaining
stages to be considered keeps decreasing. However, in ADP, the computational time required at each
sampling time is similar because ADP solves a single-stage optimization problem at every sampling
time. Please note that the calculations were performed on a Dell workstation, powered by Intel(R)
Core(TM) i74770 CPU@3.40 GHz, running the Windows 8 operating system. We would like to highlight
that the reduction in the computational time can be very beneﬁcial to enhance the productivity of the
produced wells. Speciﬁcally, despite advances in measurement techniques, it still requires interruption
by experienced engineers to distinguish useful information from noise. For example, it takes about
1–3 min to post-process the microseismic data. Therefore, having a computationally efﬁcient controller
such as ADP-based controllers would compensate for the time delay due to the interruption by
experienced engineers.
Remark 5. In the ADP-based controller, we did not include the constraints directly but used the data from 24
closed-loop simulations which satisﬁed the constraints. Speciﬁcally, for every sampling time tk , we stored 24
values of the manipulated input obtained from the 24 closed-loop simulations. Let CkLB and CkUB be the minimum
and the maximum value of the manipulated input at time instant tk among the 24 stored values, respectively.
Finally, at every sampling time tk , Equations (27) and (29) were solved with CkLB and CkUB as the lower and the
upper bound, respectively.

145

Mathematics 2018, 6, 132



03&
$'3



3URSSDQW&RQFHQWUDWLRQ SSJD




















7LPH V

Figure 4. Comparison of the pumping schedule generated using the ADP-based controller and the
MPC system.


3URSSDQW&RQFHQWUDWLRQ SSJD













03&
$'3
7DUJHW









/HQJWK P

Figure 5. Comparison of spatial proppant concentration proﬁles obtained at the end of pumping using
the ADP-based controller and the MPC system.

146

Mathematics 2018, 6, 132


03&
$'3

&RPSXWDWLRQWLPH V































NWKVDPSOLQJWLPH

Figure 6. Comparison of the computation time to solve the optimization problem at each sampling
time using the ADP-based controller and the MPC system.

3.4. ADP-Based Control with Plant–Model Mismatch
We also studied the performance of the ADP-based controller when the rock mechanical properties
are not available a priori. Speciﬁcally, we considered a plant–model mismatch in Young’s modulus,
E, which signiﬁcantly affects the controller performance with respect to achieving uniform proppant
concentration across the fracture at the end of pumping [44,47].
In this case, the data covering the relevant regions in the state space was obtained from the
closed-loop simulations under the MPC system described in Section 3.2.1 by considering the following
ﬁve different scenarios: (1) no variation in E; (2) 15% increase in E; (3) 5% increase in E; (4) 5% decrease
in E; and (5) 15% decrease in E. For each value of E, a total of ﬁve closed-loop simulations under the
MPC system of Equation (22) were performed by initializing the Kalman ﬁlter with different values
of the fracture width at the wellbore and the fracture length. As a result, a total of 250 estimated
states were obtained from the ﬁve scenarios. For all the estimated states, the initial cost-to-go values
0
(J μ ) were computed using Equation (23). Then, we employed KNN (with K = 5) as a function
approximator to obtain the mapping between initial cost-to-go values and the estimated states as
described in Section 3.2.2. This was followed by the value iteration step in which the Bellman iterations
converged after ﬁve iterations with the following termination condition:
1
N

N

∑ | J i+1 (xk ) − J i (xk )| < 0.35

(30)

k =1

where N = 250 is the total number of estimated states obtained from the ﬁve scenarios. Figure 7 shows
how the average absolute error, N1 ∑kN=1 | J i+1 ( xk ) − J i ( xk )|, changes in subsequent iterations. Please
note that the ROM used to run the closed-loop simulations under the MPC system for ﬁve different
scenarios is developed with a ﬁxed E, which is 0.5 × 1010 Pa (i.e., no variation in E). Therefore, it does
not capture the plant–model mismatch due to uncertainty in E. In this work, the same ROM with
a ﬁxed E is used in the ADP-based controller to demonstrate its capability of handling a plant–model
mismatch in E.
To test the performance of the ADP-based controller, we performed the closed-loop simulation
with the converged cost-to-go function by considering 10% decrease in E and by initializing the Kalman

147

Mathematics 2018, 6, 132

ﬁlter with the fracture width at the wellbore and the fracture length values outside the “training set”.
Note that the “training set” refers to the set of values of the fracture width at the wellbore and the
fracture length used to initialize the Kalman ﬁlter during the closed-loop simulations under the
MPC system for ﬁve scenarios. The proﬁles of the injected proppant concentration at the wellbore
(i.e., the manipulated input) and proppant concentration across the fracture at the end of pumping
using the ADP-based controller are shown in Figures 8 and 9. It can be observed in Figure 9 that the
ADP-based controller is able to achieve uniform proppant concentration across the fracture at the
end of pumping. In other words, it effectively handled the plant–model mismatch in E. Please note
that, even with the same rock formation, the performance of hydraulic fracturing can be signiﬁcantly
different [48,49]. This variability can, in part, be attributed to the spatially varying rock mechanical
properties such as the Young’s modulus, E. Therefore, having a controller such as the ADP-based
control framework that can handle the plant–model mismatch in E can play a crucial role in enhancing
the productivity of the produced well.

$YHUDJH$EVROXWH(UURU





















,WHUDWLRQ1XPEHU

Figure 7. Proﬁle of the average absolute error with iteration.

3URSSDQW&RQFHQWUDWLRQ SSJD



$'3
























7LPH V
Figure 8. Pumping schedule generated using the ADP-based controller with plant–model mismatch.

148

Mathematics 2018, 6, 132

3URSSDQW&RQFHQWUDWLRQ SSJD



$'3
7DUJHW
















/HQJWK P
Figure 9. Spatial proppant concentration proﬁle obtained at the end of pumping using the ADP-based
controller with plant–model mismatch.

Remark 6. Please note that in robust MPC-based methods [50–53], model parameter uncertainty has been
directly considered in designing MPC. However, in the proposed ADP-based controller, the uncertainty in the
model parameter (i.e., Young’s modulus, E) is handled by developing an accurate cost-to-go function during the
ofﬂine stage.
4. Conclusions
In this work, we developed an ADP-based strategy to regulate the proppant concentration across
the fracture at the end of pumping in hydraulic fracturing. First, we performed the closed-loop
simulations under the standard MPC to obtain measurable outputs, which were then used to estimate
unmeasurable states by the Kalman ﬁlter, and to initialize the cost-to-go function approximation
in ADP. Second, we employed the value iteration for the cost-to-go improvement by performing
iterations of the Bellman equation for all the estimated states during the closed-loop simulations
under the standard MPC. Lastly, the ADP-based controller with the converged cost-to-go function
approximator was employed for the design of a feedback control system to achieve uniform proppant
concentration across the fracture at the end of pumping. The generated pumping schedule using the
proposed ADP-based control framework was able to produce a uniform proppant concentration that
was closer to the target concentration than the pumping schedule generated by the standard MPC.
The ADP-based controller was able to generate an online pumping schedule at a fraction of the time
required for the standard MPC as we only had to solve the single-stage optimization problem at each
sampling time. Furthermore, the ADP-based controller was able to handle the plant–model mismatch
in the Young’s modulus of a rock formation. Therefore, this method holds promise to control the
hydraulic fracturing process by handling uncertainties in the important geological properties.
Author Contributions: H.S.S. and J.S.K. conceived and designed the study; P.S. developed the mathematical
model of hydraulic fracturing process and developed the MPC system; and H.S.S. and J.S.K. developed the
ADP-based controller and wrote the paper.

Funding: This research received no external funding.
Acknowledgments: Financial support from the Artie McFerrin Department of Chemical Engineering and the
Texas A&M Energy Institute is gratefully acknowledged.

149

Mathematics 2018, 6, 132

Conﬂicts of Interest: The authors declare no conﬂict of interest. The funding sponsors had no role in the design
of study; in the collection, analysis, or interpretation of data; in the writing of the manuscript, or in the decision to
publish the results.

References
1.
2.
3.
4.
5.

6.
7.
8.

9.
10.

11.
12.

13.
14.
15.
16.

17.
18.
19.
20.
21.

Economides, M.J.; Watters, L.T.; Dunn-Normall, S. Petroleum Well Construction; Wiley: New York, NY, USA, 1998.
Economides, M.J.; Nolte, K.G. Reservoir Stimulation; John Wiley & Sons: New York, NY, USA, 2000.
Economides, M.J.; Martin, T. Modern Fracturing: Enhancing Natural Gas Production; ET Publishing:
Houston, TX, USA, 2007.
Nolte, K.G. Determination of proppant and ﬂuid schedules from fracturing-pressure decline. SPE Prod. Eng.
1986, 1, 255–265. [CrossRef]
Gu, H.; Desroches, J. New pump schedule generator for hydraulic fracturing treatment design.
In Proceedings of the SPE Latin American and Caribbean Petroleum Engineering Conference,
Port-of-Spain, Trinidad and Tobago, 27–30 April 2003.
Dontsov, E.V.; Peirce, A.P. A new technique for proppant schedule design. Hydraul. Fract. J. 2014, 1, 1–8.
Gu, Q.; Hoo, K.A. Model-based closed-loop control of the hydraulic fracturing Process. Ind. Eng. Chem. Res.
2015, 54, 1585–1594. [CrossRef]
Siddhamshetty, P.; Yang, S.; Kwon, J.S. Modeling of hydraulic fracturing and designing of online pumping
schedules to achieve uniform proppant concentration in conventional oil reservoirs. Comput. Chem. Eng.
2018, 114, 306–317. [CrossRef]
Siddhamshetty, P.; Kwon, J.S.; Liu, S.; Valkó, P.P. Feedback control of proppant bank heights during hydraulic
fracturing for enhanced productivity in shale formations. AIChE J. 2018, 64, 1638–1650. [CrossRef]
Narasingam, A.; Siddhamshetty, P.; Kwon, J.S. Temporal clustering for order reduction of nonlinear parabolic
PDE systems with time-dependent spatial domains: Application to a hydraulic fracturing process. AIChE J.
2017, 63, 3818–3831. [CrossRef]
Narasingam, A.; Kwon, J.S. Development of local dynamic mode decomposition with control: Application
to model predictive control of hydraulic fracturing. Comput. Chem. Eng. 2017, 106, 501–511. [CrossRef]
Sidhu, H.S.; Narasingam, A.; Siddhamshetty, P.; Kwon, J.S. Model order reduction of nonlinear parabolic
PDE systems with moving boundaries using sparse proper orthogonal decomposition: Application to
hydraulic fracturing. Comput. Chem. Eng. 2018, 112, 92–100. [CrossRef]
Morari, M.; Lee, J.H. Model predictive control: Past, present and future. Comput. Chem. Eng. 1999, 23, 667–682.
[CrossRef]
Mayne, D.Q.; Rawlings, J.B.; Rao, C.V.; Scokaert, P.O. Constrained model predictive control: Stability and
optimality. Automatica 2000, 36, 789–814. [CrossRef]
Bemporad, A.; Morari, M. Control of systems integrating logic, dynamics and constraints. Automatica 1999,
35, 407–427. [CrossRef]
Lee, J.H.; Cooley, B. Recent advances in model predictive control and other related areas. In AIChE Symposium
Series; 1971-c2002; American Institute of Chemical Engineers: New York, NY, USA, 1997; Volume 93,
pp. 201–216.
Chikkula, Y.; Lee, J.H. Robust adaptive predictive control of nonlinear processes using nonlinear moving
average system models. Ind. Eng. Chem. Res. 2000, 39, 2010–2023. [CrossRef]
Lee, J.H.; Lee, J.M. Approximate dynamic programming based approach to process control and scheduling.
Comput. Chem. Eng. 2006, 30, 1603–1618. [CrossRef]
Kaisare, N.S.; Lee, J.M.; Lee, J.H. Simulation based strategy for nonlinear optimal control: Application to
a microbial cell reactor. Int. J. Robust Nonlinear Control 2003, 13, 347–363. [CrossRef]
Lee, J.M.; Kaisare, N.S.; Lee, J.H. Choice of approximator and design of penalty function for an approximate
dynamic programming based control approach. J. Process Control 2006, 16, 135–156. [CrossRef]
Tosukhowong, T.; Lee, J.H. Approximate dynamic programming based optimal control applied to
an integrated plant with a reactor and a distillation column with recycle. AIChE J. 2009, 55, 919–930.
[CrossRef]

150

Mathematics 2018, 6, 132

22.

23.
24.

25.
26.
27.
28.
29.
30.
31.
32.
33.
34.
35.
36.

37.
38.

39.
40.
41.
42.

43.
44.

45.
46.

Padhi, R.; Balakrishnan, S.N. Proper orthogonal decomposition based optimal neurocontrol synthesis of
a chemical reactor process using approximate dynamic programming. Neural Netw. 2003, 16, 719–728.
[CrossRef]
Joy, M.; Kaisare, N.S. Approximate dynamic programming-based control of distributed parameter systems.
Asia-Pac. J. Chem. Eng. 2011, 6, 452–459. [CrossRef]
Munusamy, S.; Narasimhan, S.; Kaisare, N.S. Approximate dynamic programming based control of
hyperbolic PDE systems using reduced-order models from method of characteristics. Comput. Chem. Eng.
2013, 57, 122–132. [CrossRef]
Bellman, R.E. Dynamic Programming; Princeton University Press: Princeton, NJ, USA, 1957.
Perkins, T.K.; Kern, L.R. Widths of Hydraulic Fractures. J. Pet. Technol. 1961, 13, 937–949. [CrossRef]
Nordgren, R. Propagation of a vertical hydraulic fracture. Soc. Pet. Eng. J. 1972, 12, 306–314. [CrossRef]
Sneddon, L.; Elliot, H. The opening of a Grifﬁth crack under internal pressure. Q. Appl. Math. 1946,
4, 262–267. [CrossRef]
Gudmundsson, A. Stress estimate from the length/width ratios of fractures. J. Struct. Geol. 1983, 5, 623–626.
[CrossRef]
Howard, G.C.; Fast, C.R. Optimum ﬂuid characteristics for fracture extension. Dril. Product. Pract. 1957,
24, 261–270.
Adachi, J.; Siebrits, E.; Peirce, A.; Desroches, J. Computer simulation of hydraulic fractures. Int. J. Rock Mech.
Min. Sci. 2007, 44, 739–757. [CrossRef]
Daneshy, A. Numerical solution of sand transport in hydraulic fracturing. J. Pet. Technol. 1978, 30, 132–140.
[CrossRef]
Barree, R.; Conway, M. Experimental and numerical modeling of convective proppant transport.
J. Pet. Technol. 1995, 47, 216–222. [CrossRef]
Gu, Q.; Hoo, K.A. Evaluating the performance of a fracturing treatment design. Ind. Eng. Chem. Res. 2014,
53, 10491–10503. [CrossRef]
Novotny, E.J. Proppant transport. In Proceedings of the SPE Annual Fall Technical Conference and Exhibition
(SPE 6813), Denver, CO, USA, 9–12 October 1977.
Daal, J.A.; Economides, M.J. Optimization of hydraulic fracture well in irregularly shape drainage areas.
In Proceedings of the SPE 98047 SPE International Symposium and Exhibition of Formation Flamage Control,
Lafayette, LA, USA, 15–17 February 2006; pp. 15–17.
Corbett, B.; Mhaskar, P. Subspace identiﬁcation for data-driven modeling and quality control of batch
processes. AIChE J. 2016, 62, 1581–1601. [CrossRef]
Meidanshahi, V.; Corbett, B.; Adams, T.A., II; Mhaskar, P. Subspace model identiﬁcation and model predictive
control based cost analysis of a semicontinuous distillation process. Comput. Chem. Eng. 2017, 103, 39–57.
[CrossRef]
Pourkargar, D.B.; Armaou, A. Modiﬁcation to adaptive model reduction for regulation of distributed
parameter systems with fast transients. AIChE J. 2013, 59, 4595–4611. [CrossRef]
Pourkargar, D.B.; Armaou, A. APOD-based control of linear distributed parameter systems under
sensor/controller communication bandwidth limitations. AIChE J. 2015, 61, 434–447. [CrossRef]
Sahraei, M.H.; Duchesne, M.A.; Yandon, R.; Majeski, A.; Hughes, R.W.; Ricardez-Sandoval, L.A.
Reduced order modeling of a short-residence time gasiﬁer. Fuel 2015, 161, 222–232. [CrossRef]
Sahraei, M.H.; Duchesne, M.A.; Hughes, R.W.; Ricardez-Sandoval, L.A. Dynamic reduced order modeling
of an entrained-ﬂow slagging gasiﬁer using a new recirculation ratio correlation. Fuel 2017, 196, 520–531.
[CrossRef]
Quirein, J.A.; Grable, J.; Cornish, B.; Stamm, R.; Perkins, T. Microseismic fracture monitoring. In Proceedings
of the SPWLA 47th Annual Logging Symposium, Veracruz, Mexico, 4–7 June 2006.
Narasingam, A.; Siddhamshetty, P.; Kwon, J.S. Handling Spatial Heterogeneity in Reservoir Parameters
Using Proper Orthogonal Decomposition Based Ensemble Kalman Filter for Model-Based Feedback Control
of Hydraulic Fracturing. Ind. Eng. Chem. Res. 2018, 57, 3977–3989. [CrossRef]
Bertsekas, D. Dynamic Programming and Optimal Control; Athena Scientiﬁc: Belmont, MA, USA, 2005;
Volume 1.
Lee, J.M.; Lee, J.H. An approximate dynamic programming based approach to dual adaptive control.
J. Process Control 2009, 19, 859–864. [CrossRef]
151

Mathematics 2018, 6, 132

47.
48.

49.
50.
51.
52.

53.

Jafarpour, B. Sparsity-promoting solution of subsurface ﬂow model calibration inverse problems.
Adv. Hydrogeol. 2013, 73–94. [CrossRef]
Daniels, J.L.; Waters, G.A.; Le Calvez, J.H.; Bentley, D.; Lassek, J.T. Contacting more of the barnett
shale through an integration of real-time microseismic monitoring, petrophysics, and hydraulic fracture
design. In Proceedings of the SPE Annual Technical Conference and Exhibition, Anaheim, CA, USA,
11–14 November 2007.
King, G.E. Thirty years of gas shale fracturing: What have we learned? In Proceedings of the SPE Annual
Technical Conference and Exhibition, Florence, Italy, 19–22 September 2010.
Lucia, S.; Finkler, T.; Engell, S. Multi-stage nonlinear model predictive control applied to a semi-batch
polymerization reactor under uncertainty. J. Process Control 2013, 23, 1306–1319. [CrossRef]
Gutierrez, G.; Ricardez-Sandoval, L.A.; Budman, H.; Prada, C. An MPC-based control structure selection
approach for simultaneous process and control design. Comput. Chem. Eng. 2014, 70, 11–21. [CrossRef]
Rodriguez-Perez, B.E.; Flores-Tlacuahuac, A.; Ricardez Sandoval, L.; Lozano, F.J. Optimal Water Quality
Control of Sequencing Batch Reactors Under Uncertainty. Ind. Eng. Chem. Res. 2018, 57, 9571–9590.
[CrossRef]
Lucia, S.; Tătulea-Codrean, A.; Schoppmeyer, C.; Engell, S. Rapid development of modular and sustainable
nonlinear model predictive control solutions. Control Eng. Pract. 2017, 60, 51–62. [CrossRef]
© 2018 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access
article distributed under the terms and conditions of the Creative Commons Attribution
(CC BY) license (http://creativecommons.org/licenses/by/4.0/).

152

mathematics
Article

A Nonlinear Systems Framework for Cyberattack
Prevention for Chemical Process Control Systems †
Helen Durand ‡
Department of Chemical Engineering and Materials Science, Wayne State University, Detroit, MI 48202, USA;
helen.durand@wayne.edu; Tel.: +1-313-577-3475
† This paper is an extended version of our paper published in the Proceedings of the 6th IFAC Conference on
Nonlinear Model Predictive Control.
‡ Current address: 5050 Anthony Wayne Drive, Detroit, MI 48202, USA.
Received: 13 August 2018; Accepted: 12 September 2018; Published: 14 September 2018

Abstract: Recent cyberattacks against industrial control systems highlight the criticality of preventing
future attacks from disrupting plants economically or, more critically, from impacting plant safety.
This work develops a nonlinear systems framework for understanding cyberattack-resilience of
process and control designs and indicates through an analysis of three control designs how control
laws can be inspected for this property. A chemical process example illustrates that control approaches
intended for cyberattack prevention which seem intuitive are not cyberattack-resilient unless they
meet the requirements of a nonlinear systems description of this property.
Keywords: cybersecurity; process control; model predictive control (MPC); nonlinear systems theory;
Lyapunov stability

1. Introduction
Accident prevention for chemical processes has been receiving increased attention in the
process control literature as calls for a systems approach to chemical process safety [1–3] are being
mathematically formalized and incorporated within control design [4–6]. Controllers have been
formulated which compute control actions in a fashion that coordinates their actions with the actions
of the safety systems [7], and several works have explored methods for keeping the closed-loop state
of a nonlinear system away from unsafe conditions in state-space using controllers designed to avoid
such regions [8–11]. In addition, several works have explored fault diagnosis and detection [12–14]
or fault-tolerant control designs (e.g., [15–18]). Despite these advances in the integration of safety
and control for handling safety issues which arise from faults or disturbances and are therefore not
intended, the work which has explored the safety issues associated with cybersecurity [19] breaches
of process control systems performed with the intent of bringing the plant to an unsafe, unproﬁtable,
or under-producing condition to seek to hurt others has remained, for the most part, unexplored
(with exploration of the topic in works such as [20]). This gap in the literature is notable given the
increasing threat that cybersecurity breaches pose for safe process operation. For example, cyberattacks
have been successful at creating power outages in the Ukraine [21], causing sewage to enter nearby
land and water from a wastewater treatment plant [22] and damaging equipment at a uranium
enrichment plant [23]. They have also recently targeted systems at a petrochemical plant [24,25] with
the apparent goal of creating an explosion (though this attack thankfully failed). Unlike the most
commonly discussed cyberattacks in the media and in the literature, which are primarily concerned
with stealing information for the purpose of using that information to compromise companies or
individuals economically or socially (e.g., [26]), cyberattacks against process control systems have the
potential to seek to create physical damage, injury, or death or a lack of supply of products that are
necessary for daily life and therefore are a critical problem to address.
Mathematics 2018, 6, 169; doi:10.3390/math6090169

153

www.mdpi.com/journal/mathematics

Mathematics 2018, 6, 169

A common technique for handling cybersecurity for control systems has been to rely on computer
science/information technology, computer hardware, or networking solutions [27]. Example solutions
in these categories include code randomization [28], limiting privileges in access or operation with
respect to control systems [29], preventing types of information ﬂow with unidirectional gateways [30],
using redundant sensors [31], ﬁrewalls [32,33], and encryption [34]. Other approaches include changing
library load locations [35] or network settings [36], or randomly selecting encrypted data from sensors
to compare with unencrypted information [37]. However, the success of the recent attacks mentioned
above on control systems, and the surprising methods by which some of them have been carried
out (e.g., transmission via USB sticks and local area networks of the Stuxnet virus followed by its
subsequent ability to evade detection with rootkits and zero-day vulnerabilities [20,23]) indicate that the
traditional techniques for cyberattack prevention may not be enough. Furthermore, the use of wireless
sensors in chemical process control networks can introduce cybersecurity vulnerabilities [38,39].
Given the efﬁciency gains and lower costs expected to be associated with developing technologies
such as improved sensors, the Internet of Things [40], and Cloud computing [41], where increased
connectivity and computing usage in the chemical process industries has the potential to pose new
cybersecurity risks, the need for alternative techniques to the traditional approaches is growing.
The topic of resilience of control designs against cyberattacks [42,43] has been explored in several
works [44–47]. For example, in [48–50], resiliency of controllers to cyberattacks in the sense that they
continue to function acceptably during and after cyberattacks has been explored in a game-theoretic
context. Reliable state estimation also plays a part in resilience [51,52]. Approaches based on process
models have been important in suggested attack detection policies [31,53,54] and in policies for
preventing attacks that assume that the allowable (i.e., safe) state transitions can be enumerated
and therefore that it can be checked whether a control action creates an allowable transition before
applying it [55]). The ability of a controller to know the process condition/state has been considered to
be an important part of cyberattack resilience of control systems as well [56].
Motivated by the above considerations, this work mathematically deﬁnes cyberattacks in a
nonlinear systems framework and demonstrates how this framework should guide the development of
process designs and controllers to prevent the success of cyberattacks of different types. We highlight
the criticality of the nonlinear systems perspective, as opposed to seemingly intuitive approaches that
follow more along the lines of traditional computing/networking cybersecurity concepts related to
hiding or randomizing information, in preventing the success of cyberattacks, with a focus on those
which impact sensor measurements. To demonstrate that intuitive approaches are insufﬁcient for
achieving cyberattack-resilience unless they cause speciﬁc mathematical properties to hold for the
closed-loop system, we explore the pitfalls of two intuitive approaches that do not come with such
guarantees and investigate a third approach for which the guarantees can be made for certain classes
of nonlinear systems under sufﬁcient conditions, showing that it may be possible to develop methods
of operating a plant that meet these properties. This exploration of the properties of control designs
that are and are not cyberattack-resilient elucidates key principles that are intended to guide the
development of cyberattack-resilient controllers in the future: (a) cyberattack policies for simulation
case studies have a potential to be determined computationally; (b) randomization in controller
implementation can be introduced within frameworks such as model predictive control (MPC) [57,58]
that are common in the process industries without compromising closed-loop stability; and (c) creative
implementation strategies which trade off between control policies of different types may help with
the development of cyberattack-resilient control designs. A chemical process example is used to
demonstrate that controllers which do not meet the nonlinear systems deﬁnition of cyberattack
resiliency may not be sufﬁcient for preventing the closed-loop state from being brought to an unsafe
operating condition. This paper extends the work in [59].

154

Mathematics 2018, 6, 169

2. Preliminaries
2.1. Notation
The notation | · | denotes the Euclidean norm of a vector. A function α : [0, a) → [0, ∞) is of
class K if α(0) = 0 and α is strictly increasing. The notation x T represents the transpose of a vector x.
The symbol “ / ” denotes set subtraction (i.e., x ∈ A/B = { x ∈ Rn : x ∈ A, x ∈
/ B}). · signiﬁes
the ceiling function (i.e., the function that returns the nearest integer greater than its argument);
· signiﬁes the ﬂoor function (i.e., the function that returns the nearest integer less than its argument).
2.2. Class of Systems
The class of nonlinear systems under consideration in this work is:
ẋ (t) = f ( x (t), u(t), w(t))

(1)

where f is a locally Lipschitz nonlinear vector function of the state vector x ∈ Rn , input vector
u ∈ U ⊂ Rm , and disturbance vector w ∈ W ⊂ Rl , where W := {w ∈ Rl : |w| ≤ θ }. We consider that
X is a set of states considered to be safe to operate at in the sense that no safety incidents will occur
if x ∈ X; therefore, we desire to maintain x within the set X. For the purposes of the developments
below, we will assume that outside of X, the closed-loop state is in an unsafe region of state-space.
We consider that the origin is an equilibrium of the system of Equation (1) (i.e., f (0, 0, 0) = 0).
Furthermore, we make the following stabilizability assumption:
Assumption 1. There exist n p explicit stabilizing control laws hi ( x ), i = 1, . . . , n p , for the system of
Equation (1), where n p ≥ 1, with corresponding sufﬁciently smooth positive deﬁnite Lyapunov functions
Vi : Rn → R+ and functions α j,i (·), j = 1, . . . , 4, of class K such that the following inequalities hold for all
x ∈ Di ⊂ R n :
α1,i (| x |) ≤ Vi ( x ) ≤ α2,i (| x |)
(2)
∂Vi ( x )
f ( x, hi ( x ), 0) ≤ −α3,i (| x |)
∂x


 ∂Vi ( x ) 


 ∂x ≤ α4,i (| x |)
hi ( x ) ∈ U

(3)
(4)
(5)

for i = 1, . . . , n p , where Di is an open neighborhood of the origin.
We deﬁne a level set of Vi contained within Di where x ∈ X as a stability region Ωρi of the nominal
(w(t) ≡ 0) system of Equation (1) under the controller hi ( x ) (Ωρi := { x ∈ X ∩ Di : Vi ( x ) ≤ ρi }).
By the smoothness of each Vi , the Lipschitz property of f , and the boundedness of x, u, and w,
we obtain the following inequalities:

| f ( x1 , u, w) − f ( x2 , u, 0)| ≤ L x | x1 − x2 | + Lw |w|

(6)



 ∂Vi ( x1 )

∂Vi ( x2 )

 ≤ L  | x1 − x2 | + L  | w |
(
x
,
u,
w
)
−
(
x
,
u,
0
)
f
f
2
1
x,i
w,i

 ∂x
∂x

(7)

| f ( x, u, w)| ≤ M

(8)

for all x, x1 , x2 ∈ Ωρi , i = 1, . . . , n p , u ∈ U, and w ∈ W, where L x > 0, Lw > 0, and M > 0 are selected
such that the bounds in Equations (6) and (8) hold regardless of the value of i, and Lx,i and Lw,i are
positive constants for i = 1, . . . , n p .
The instantaneous cost of the process of Equation (1) is assumed to be represented by a continuous
function Le ( x, u) (we do not require that Le have its minimum at the origin/steady-state). We also
155

Mathematics 2018, 6, 169

assume that the instantaneous production rate of the desired product for the process is given by the
continuous function Pd ( x, u) (which may be the same as Le but is not required to be).
2.3. Model Predictive Control
MPC is an optimization-based control design formulated as:
 t
k+ N

min

u(t)∈S(Δ)

tk

Le ( x̃ (τ ), u(τ )) dτ

x̃˙ (t) = f ( x̃ (t), u(t), 0)

s.t.

(9)
(10)

x̃ (tk ) = x (tk )

(11)

x̃ (t) ∈ X, ∀ t ∈ [tk , tk+ N )

(12)

u(t) ∈ U, ∀ t ∈ [tk , tk+ N )

(13)

where u(t) ∈ S(Δ) signiﬁes that the input trajectories are members of the class of piecewise-constant
vector functions with period Δ. The nominal (i.e., w(t) ≡ 0) model of Equation (1) (Equation (10))
is used by the MPC of Equations (9)–(13) to develop predictions x̃ of the process state, starting
at a measurement of the process state at tk (Equation (11); in this work, full state feedback is
assumed to be available to an MPC), which are then used in computing the value of the stage
cost Le over the prediction horizon of N sampling periods (Equation (9)) and evaluating the state
constraints (Equation (12)). The inputs computed by the MPC are required to meet the input constraint
(Equation (13)). The inputs are applied in a receding horizon fashion.
2.4. Lyapunov-Based Model Predictive Control
Lyapunov-based model predictive control (LMPC) [60,61] is a variation on the MPC design of the
prior section and is formulated as follows:
min

 t
k+ N

u(t)∈S(Δ)

s.t.

tk

Le ( x̃ (τ ), u(τ )) dτ

x̃˙ (t) = f ( x̃ (t), u(t), 0)

(14)
(15)

x̃ (tk ) = x (tk )

(16)

x̃ (t) ∈ X, ∀ t ∈ [tk , tk+ N )

(17)

u(t) ∈ U, ∀ t ∈ [tk , tk+ N )

(18)

V1 ( x̃ (t)) ≤ ρe,1 , ∀ t ∈ [tk , tk+ N ),
if x (tk ) ∈ Ωρe,1
∂V1 ( x (tk ))
f ( x ( t k ), u ( t k ), 0)
∂x
∂V ( x (tk ))
f ( x (tk ), h1 ( x (tk )), 0)
≤ 1
∂x
if x (tk ) ∈ Ωρ1 /Ωρe,1 or tk ≥ t

(19)

(20)

where the notation follows that of Equations (9)–(13). In LMPC, the predicted state is required to meet
the Lyapunov-based stability constraint of Equation (19) when x (tk ) ∈ Ωρe,1 ⊂ Ωρ1 by maintaining the
predicted state within the set Ωρe,1 throughout the prediction horizon, and the input is required to meet
the Lyapunov-based stability constraint of Equation (20) when x (tk ) ∈
/ Ωρe,1 to cause the closed-loop
state to move toward a neighborhood of the origin throughout a sampling period. Ωρe,1 is chosen to
make Ωρ1 forward invariant under the LMPC of Equations (14)–(20) in the presence of sufﬁciently small

156

Mathematics 2018, 6, 169

disturbances and a sufﬁciently small Δ. t is a time after which it is desired to enforce the constraint
of Equation (20) for all times regardless of the position of x (tk ) in state-space. Due to the closed-loop
stability and robustness properties of h1 ( x ) [62], h1 ( x̃ (tq )), q = k, . . . , k + N − 1, t ∈ [tq , tq+1 ), is a
feasible solution to the optimization problem of Equations (14)–(20) at every sampling time if x (t0 ) ∈
Ωρ1 because it is guaranteed to cause V1 ( x ) to decrease along the closed-loop state trajectories of
the nonlinear process throughout each sampling period in the prediction horizon when Δ and θ are
sufﬁciently small until the closed-loop state enters a neighborhood Ωρmin,1 of the origin. Furthermore,
the LMPC of Equations (14)–(20) is guaranteed to maintain the closed-loop state within Ωρ1 throughout
all sampling periods of the prediction horizon when parameters such as ρe,1 , Δ, and θ are sufﬁciently
small through the design of the Lyapunov-based stability constraints of Equations (19) and (20) which
take advantage of the stability properties of h1 ( x ) [60]. It is furthermore guaranteed under sufﬁcient
conditions that V1 decreases along the closed-loop state trajectory throughout a sampling period when
the constraint of Equation (20) is activated at a sampling time.
3. A Nonlinear Dynamic Systems Perspective on Cyberattacks
Cybersecurity of chemical process control systems is fundamentally a chemical engineering
problem - cyberattackers can ﬁnd value in attacking plants because they can affect the economics of
large companies, the supply of important chemicals, and the health and lives of plant workers and
civilians if they are able to gain control over the process inputs, due to the nature of chemical processes
and how chemical processes behave. The implication of this is that chemical engineers should be able
to take steps during process and control design that can make cyberattacks more difﬁcult or, ideally,
make it impossible for them to be successful at affecting economics, production, or safety.
Cyberattacks against process control systems seek to use information ﬂows in control loops to
impact physical systems; the ultimate goal of a cyberattacker of a process control system, therefore,
can be assumed to be changing the inputs to the process [20] from what they would otherwise be if the
attack was not occurring. In this work, we assume that the plant controllers are feedback controllers.
There are various means by which a cyberattacker may attempt to affect such a control loop which
include providing false state measurements to a feedback controller, providing incorrect signals to the
actuators (i.e., bypassing the controller) [31], falsifying stored process data, preventing information
from ﬂowing to some part of a control loop [63], manipulating the controller code itself [20], or directly
falsifying the signals received by an operator [37,64] (so that he or she does not notice that the process
inputs are abnormal). In summary, the electromagnetic signals in the control loop can be falsiﬁed. These
signals cause physical elements like actuators to move, impacting the condition of the actual process.
Contrary to the typical assumptions in feedback control, the association between the input physically
implemented on the process and the process state is removed during a cyberattack. A mathematical
deﬁnition for cyberattacks on feedback control systems is therefore as follows:
Deﬁnition 1. A cyberattack on a feedback control system is a disruption of information ﬂow in the loop such
that any u ∈ U can potentially be applied at any state x that is accessed by the plant over time.
A process design that is resilient to cyberattacks attempting to inﬂuence process safety has many
conceptual similarities to a process that is inherently safe [65–69]; the dynamic expression of this
resilience property is as follows, where X̄ ⊆ X represents a set of allowable initial conditions:
Deﬁnition 2. A process design that is resilient to cyberattacks intended to affect process safety is one for which
there exists no input policy u(t) ∈ U, t ∈ [0, ∞), such that x (t) ∈
/ X, for any x (t0 ) ∈ X̄ and w(t) ∈ W,
t ∈ [0, ∞).
The resilience of the process design here depends on which variables are selected as manipulated
inputs; a different input selection may lead to a different assessment of whether the process design is
resilient to cyberattacks. Similarly, different designs will give a different dynamic model in Equation (1),
157

Mathematics 2018, 6, 169

which means that the inputs will impact the states differently over time (and whether x ∈ X); therefore,
the design itself also plays a role in whether Deﬁnition 2 holds as well. Furthermore, the deﬁnition of
resiliency is independent of the control laws used to control the process. This is because cyberattacks
manipulate the process inputs such that they do not necessarily cause process constraints to be met
(though the inputs are still physically constrained by the input bounds) and do not necessarily have
any relationship to the actual state measurement (Deﬁnition 1). Therefore, resiliency of a process
design to cyberattacks must be developed assuming that any input policy within the input bounds can
be applied to the process.
We can also deﬁne cyberattack resilience of a process design against attacks on the plant economics.
However, because of the minimal assumptions placed on Le , it is not possible to require that resilience
of a plant to cyberattacks on proﬁtability means that the proﬁt is not at all affected by a cyberattack.
For example, consider the case that Le has a global minimum (e.g., it may be a quadratic function of
the states and inputs). In this case, if u is not equal to its value at the global minimum of Le due to a
cyberattack (which affects x), then it would not be expected that the long-term proﬁt will be the same
as it would be if the state always remained at its global minimum value. However, we would expect
that if proﬁt is minimally affected by a cyberattack, there are relatively small consequences to the attack
occurring if it was to occur, and furthermore because of the minimal consequences, a cyberattacker
may not ﬁnd it worthwhile to attempt the attack. Therefore, we deﬁne lower and upper bounds on the
asymptotic average value of Le (Le,lb and Le,ub , respectively) such that if the cost is within these bounds,
the process is still considered highly proﬁtable and the company suffers minimal consequences from
an attack. This leads to the deﬁnition of a process design that is resilient to cyberattacks against plant
proﬁtability as follows (where it is still required that x (t) ∈ X since safety during operation would be
a prerequisite to production):
Deﬁnition 3. A process design that is resilient to cyberattacks intended to affect process proﬁt is one for which
x (t) ∈ X for t ∈ [0, ∞) for any x (t0 ) ∈ X̄ and the following inequality holds:
Le,lb ≤ lim sup
T →∞

1
T

 T
0

Le ( x (t), u(t))dt ≤ Le,ub

(21)

for all u(t) ∈ U and w(t) ∈ W, for t ∈ [0, ∞).
Cyberattack resilience of a process design against production losses would be deﬁned as in
Deﬁnition 3, except that Equation (21) would be replaced by
Pd,lb ≤ lim inf
T →∞

1
T

 T
0

Pd ( x (t), u(t))dt ≤ Pd,ub

(22)

where Pd,lb and Pd,ub represent the minimum and maximum values in the allowable production range
(or if there are nq products instead of one, each with instantaneous production rate Pd,i , i = 1, . . . , nq ,
upper and lower bounds can be set on the time integral of each instantaneous production rate).
For the same reasons as noted for Deﬁnition 2, Deﬁnition 3 (and its extension to the production
attack case) depends on the design and input selection, but not the control law. In general, it may
be difﬁcult to assess whether Deﬁnitions 2 and 3 or the production extension hold for a process,
though closed-loop simulations for a variety of different values of x (t0 ) ∈ X̄, u ∈ U and w ∈ W,
with different sampling periods for each, may provide some sense of how the process behaves and
potentially could help demonstrate that the process is not cyberattack resilient if there is an input
found in the bounds that causes a lack of satisfaction of the conditions. However, not ﬁnding any such
input during simulations does not necessarily mean that the process is resilient to cyberattacks unless
every situation posed in the deﬁnitions has been tested.
Despite the difﬁculty of verifying whether Deﬁnitions 2 and 3 or its production extension hold for
a process, the deﬁnitions serve an important role in clarifying what cyberattack resilience of a system
158

Mathematics 2018, 6, 169

would look like from a nonlinear systems perspective. At ﬁrst, the independence of these deﬁnitions
from the control law implies that cybersecure process systems are only possible to achieve if the process
design itself with the selected inputs and their ranges causes Deﬁnitions 2 and 3 or the production
extension to be satisﬁed, which would not be expected to be typical. Therefore, at ﬁrst this seems to
imply that chemical processes will generally be susceptible to cyberattacks. However, it also must be
understood that the deﬁnitions are meant to express resilience against any cyberattack of any kind
geared toward affecting the inputs, as they express cyberattacks in the most general sense as being
related to inputs and states; different types of cyberattacks would need to be analyzed individually to
see whether it is possible to design a process or control system that prevents cyberattack success.
Remark 1. Though Deﬁnitions 2 and 3 and the production extension are presented such that any input policy
can be chosen (e.g., continuous or sample-and-hold with different sampling periods), a knowledge that the inputs
are only applied in sample-and-hold could be used to require that the deﬁnitions only hold for sample-and-hold
input policies in the bounds with the sampling periods noted (assuming that the cyberattack cannot also impact
the sampling period).
Remark 2. Other works have mathematically deﬁned cyberattack-resilience concepts as well. For example,
ref. [70] explores event triggering within the context of resilient control deﬁned for input-afﬁne nonlinear systems
with disturbances to be the capacity of a controller to return the state to a set of safe states when it exits these in
ﬁnite time. Ref. [71] also deﬁnes resiliency, for linear systems, as being related to the capacity of a controller to
drive the closed-loop state to certain sets and maintain it in safe states (similar to the deﬁnitions above).
4. Deﬁning Cyberattack Resilience Against Speciﬁc Attack Types: Sensor Measurement
Falsiﬁcation in Feedback Control Loops
In the remainder of this work, we focus on attacks that provide false state measurements within X
to feedback controllers with the goal of impacting process safety and will seek a better understanding
of the properties of controllers that are cyberattack-resilient in such a case. The difference between
what is required for cyberattack resilience in this case and what is required in Deﬁnition 2 is that the
controller and its implementation strategy always play a role in state measurement falsiﬁcation attacks
(i.e., the controller is not bypassed completely to get to the actuators, so that the control law itself
always plays a role in dictating what inputs can be computed for given falsiﬁed state measurements).
Therefore, we would ideally like to develop controllers and their implementation strategies that ensure
that the inputs which would be computed by these controllers, regardless of the state measurements
they are provided, would over time guarantee that x ∈ X, ∀t ≥ 0, if x (t0 ) ∈ X̄. The deﬁnition of
cyberattack resilience becomes:
Deﬁnition 4. Consider the system of Equation (1) under feedback controllers and their implementation
strategies for which the set of all possible input policies which may be computed for t ∈ [0, ∞) for all x (t0 ) ∈ X̄
given the control laws and their implementation strategies is denoted by Uallow,i (t), i = 1, . . . , nu , t ≥ 0, where
nu ≥ 1 represents the number of possible input trajectories, with each covering the time horizon t ∈ [0, ∞).
The system of Equation (1) is resilient to cyberattacks that falsify state measurements with the goal of affecting
process safety under these feedback control policies if there exists no possible input policy u(t) ∈ Uallow,i (t),
i = 1, . . . , nu , t ∈ [0, ∞), such that x ∈
/ X, for any x (t0 ) ∈ X̄ and w(t) ∈ W, t ∈ [0, ∞).
In Deﬁnition 4, nu maybe ∞. Furthermore, sampling period lengths are taken into account
in the deﬁnition of Uallow,i (t). Though Deﬁnition 4 may appear difﬁcult to use, we will later
provide an operating policy which, for certain subclasses of the system of Equation (1), guarantees
cyberattack resilience of the closed-loop system according to Deﬁnition 4, indicating that provably
cyberattack-resilient control designs for false state measurements in X intended to affect process safety
may be possible to develop, particularly if assumptions or restrictions are imposed.

159

Mathematics 2018, 6, 169

5. Control Design Concepts for Deterring Sensor Measurement Falsiﬁcation Cyberattacks on
Safety: Beneﬁts, Limitations, and Perspectives
In this section, we initially use a chemical process example to motivate the need for
cyberattack-resilient control designs according to Deﬁnition 4, despite the non-constructive nature of
the deﬁnition, by demonstrating that cyberattack-resilient control is preferable compared to strategies
that detect attacks when they occur and subsequently compensate for them [20,72–77]. Subsequently,
we will investigate in more detail what it takes for a control design to be cyberattack-resilient.
To do this, we will present two “intuitive” concepts for operating a process in a manner intended to
deter cyberattacks; however, through a chemical process example, we will illustrate that due to the
deﬁnition of cyberattacks in a nonlinear systems context (Deﬁnition 1), these intuitive methods are not
cyberattack-resilient according to Deﬁnition 4. Despite this, the study of the reasons that these designs
fail to guarantee cyberattack resilience will develop important insights that may guide future work
on cyberattack-resilient controllers. We close with an example of a control design that is cyberattack
resilient according to Deﬁnition 4 for a subset of the class of systems of Equation (1), demonstrating
that despite the non-constructive nature of Deﬁnition 4, it may be possible to ﬁnd operating strategies
that can be proven to meet this deﬁnition.
5.1. Motivating Example: The Need for Cyberattack-Resilient Control Designs
Consider the simpliﬁed Tennessee Eastman process, developed in [78] and used in [20] to
explore the results of several cyberattacks on sensors for this process performed one sensor at a time.
The process consists of a single vessel that serves as both a reaction vessel and a separator, in which
the reaction A + C → D occurs in the presence of an inert B. The reactor has two feed streams with
molar ﬂow rates F1 and F2 , where the former contains A, C, and trace B, and the latter contains pure
A (these will be denoted in the following by Stream 1 and 2 (S1 and S2), respectively). A, B, and C
are assumed to be in the vapor phase at the conditions in the reactor, with D as a nonvolatile liquid
in which none of the other species is appreciably soluble, such that the streams leaving the reaction
vessel are a vapor at molar ﬂow rate F3 containing only A, C, and B, and a liquid product at molar ﬂow
rate F4 containing only D (the vapor and liquid streams will be denoted by Stream 3 and 4 (S3 and S4),
respectively, in the following). The dynamic model describing the changes in the number of mols of
each species in the reactor (NA , NB , NC and ND for species A, B, C, and D, respectively, each in kmol)
is given as follows:
dNA
= y A1 F1 + F2 − y A3 F3 − r1
(23)
dt
dNB
= y B1 F1 − y B3 F3
dt

(24)

dNC
= yC1 F1 − yC3 F3 − r1
dt

(25)

dND
= r1 − F4
dt

(26)

where y A1 = 0.485, y B1 = 0.005, and yC1 = 0.51 are the mol fractions of A, B, and C, in S1, and y A3 ,
Ni
y B3 , and yC3 are the mol fractions of A, B, and C in S3 (i.e., yi3 = ( N + N
, i = A, B, C). The units
B + NC )
A
of both sides of Equations (23)–(26) are kmol/h. r1 is the rate at which the reaction in the vessel takes
place, and it is given by the following:
0.4 1.6
r1 = 0.00117y1.2
A3 yC3 P

160

(27)

Mathematics 2018, 6, 169

where r1 is given in units of kmol/h and P (in kPa) represents the pressure in the vessel and is
computed via the ideal gas law as follows:
P=

( NA + NB + NC ) R g T
Vv

(28)

where R g = 8.314 kJ/kmol·K and T = 373 K (i.e., isothermal operation is assumed). Vv represents the
volume of vapor in the vessel, where the vessel has a ﬁxed volume of V = 122 m3 but the liquid has a
time-varying volume that depends on ND and the liquid molar density of 8.3 kmol/m3 such that Vv is
given (in m3 ) as follows:
N
(29)
Vv = 122 − D
8.3
with ND in kmol. It is desired that the liquid level in the tank not exceed 30 m3 (the steady-state value
of the liquid level is 44.18% of its maximum value).
Three process inputs are assumed (u1 , u2 , and u3 ), which represent set-points for the percent
opening of three valves that determine the ﬂow rates F1 , F2 , and F3 as follows:
dX1
= 360(u1 − X1 )
dt

(30)

dX2
= 360(u2 − X2 )
dt

(31)

dX3
= 360(u3 − X3 )
dt
X
F1 = 330.46 1
100
X2
F2 = 22.46
100
√
F3 = 0.00352X3 P − 100

(32)
(33)
(34)
(35)

where the units of time in Equations (30)–(32) are h and the units of ﬂow in Equations (33)–(35) are
kmol/h, and X1 , X2 , and X3 represent the percentage opening of each valve (with an allowable range
between 0% and 100%, such that the valve output would saturate if it hits these bounds). A fourth valve
is also available for S4 for which the set-point for the valve position is adjusted with a proportional
controller based on the error between the percentage of the 30 m3 of available liquid volume that is
used in the tank (V%,used ) and the desired (steady-state) value of the percentage of the available liquid
volume (V%,sp ) as follows:
dX4
= 360([ X4,s + Kc (V%,sp − V%,used )] − X4 )
dt

(36)

where X4,s represents the steady-state value of the percentage opening of the valve for S4, X4 represents
the percentage opening of the valve for S4, Kc = −1.4 is the tuning parameter of the proportional
(100)( N )
controller used in setting the set-point value for X4 , and V%,used = (8.3)(30D) . The molar ﬂow rate of S4
is given in terms of X4 as follows:
√
(37)
F4 = 0.0417X4 P − 100
The steady-state values for the variables and associated inputs are presented in Table 1, with the
subscript s denoting the steady-state value of each variable.
For this process, it is desired to maintain the value of the pressure in the reaction vessel below
Pmax = 3000 kPa. To regulate the process at its steady-state value, where Ps < Pmax as required as
shown in Table 1, different control laws can be considered. We ﬁrst consider the proportional-integral
(PI) control laws developed in [78], which were applied in cyberattack scenarios involving attacks

161

Mathematics 2018, 6, 169

on sensors in [20]. In this case, the input u1 is adjusted in a manner that seeks to modify the ﬂow
rate of the product D, u2 is adjusted in a manner that seeks to modify the composition of A in S3 to
avoid losing more reactant than necessary, and u3 is adjusted in a manner that seeks to modify the
pressure in the vessel since it can directly affect how much vapor ﬂow can exit the vessel. To account
for physical limitations on the maximum value of S3, an additional mechanism is also added to help
with pressure control by allowing pressures greater than 2900 kPa to result in the set-point value for F4
that u1 uses in computing how large F1 should be being lowered to avoid providing reactants to the
reactor and thereby decreasing the outlet pressure. This is achieved through a fourth PI controller that
computes a signal u4 used in adjusting the set-point of F4 . The control laws, in sample-and-hold with a
sampling period of Δ = 0.1 h, are as follows:
u1 (tk ) = u1 (tk−1 ) + Kc,1 (e1 (tk ) − e1 (tk−1 ) +

Δ
e (t ))
τI,1 1 k

e1 (tk ) = F4,sp,adj (tk ) − F4 (tk )
u2 (tk ) = u2 (tk−1 ) + Kc,2 (e2 (tk ) − e2 (tk−1 ) +

(39)
Δ
e2 (tk ))
τI,2

e2 (tk ) = 100(y A3,s − y A3 (tk ))
u3 (tk ) = u3 (tk−1 ) + Kc,3 (e3 (tk ) − e3 (tk−1 ) +

(38)

(40)
(41)

Δ
e3 (tk ))
τI,3

(42)

e3 (tk ) = Ps − P(tk )

(43)

Δ
e (t ))
u4 (tk ) = u4 (tk−1 ) + Kc,4 (e4 (tk ) − e4 (tk−1 ) +
τI,4 4 k

(44)

e4 (tk ) = Pbound − P(tk )

(45)

where Pbound = 2900 kPa and the controller parameters are given in Table 1. F4,sp,adj represents the
adjusted set-point for F4 set to F4,s if u4 > 0 but to F4,sp,adj = F4,s + u4 otherwise. u1 , u2 , and u3 would
saturate at 0 or 100% if these limits were reached.
In [20], several cyberattacks are proposed on the sensors associated with the controllers described
above (i.e., incorrect measurements are provided to the controllers, causing them to compute inputs for
the process which they would not otherwise have computed), with one sensor being attacked at a time.
The results in [20] indicate that some types of attacks are successful at driving the pressure above its
maximum bound, whereas others are not. For example, the authors of [20] comment that it was difﬁcult
in the simulations to achieve problematic pressures in the vessel with the measured values of y A3 or
F4 being falsiﬁed for the controllers computing u1 and u2 , whereas it is possible with a falsiﬁcation
of the measurement of P for the controllers computing u3 and u4 to achieve a pressure in the reactor
above its limit. For example, Figure 1 shows the results of setting the measurement of y A3 received by
the controller computing u1 to its maximum value (i.e., a mol fraction of 1) between 10 h and 30 h of
operation after initializing the process at the steady-state. In both this case and in simulations with the
measurement of F4 received by the controller computing u2 set to its minimum value (i.e., 0 kmol/h)
between 10 h and 30 h of operation after initializing the process at the steady-state, the pressure during
the simulations did not exceed 3000 kPa. However, if we simulate the process with the P measurement
set to its minimum value of 0 kPa to affect the controllers computing u3 and u4 , the pressure does
exceed 3000 kPa (i.e., the cyberattack succeeds in bringing the plant to an unsafe condition; in this case,
the simulation was performed only for 30 h as the unsafe condition was already reached within this
timeframe). The simulations were performed with an integration step size of 10−4 h for simulating the
dynamic process model of Equations (23)–(45). The simulations were performed in MATLAB R2016a
R
by MathWorks
.

162

Mathematics 2018, 6, 169

Table 1. Steady-state values for the states of the Tennessee Eastman Process [78].
Parameter

Value

Unit

NA,s
NB,s
NC,s
ND,s
X1,s
X2,s
X3,s
X4,s
u1,s
u2,s
u3,s
V%,sp
F1,s
F2,s
F3,s
F4,s
Ps
y A3,s
y B3,s
yC3,s
Kc,1
τI,1
Kc,2
τI,2
Kc,3
τI,3
Kc,4
τI,4

44.49999958429348
13.53296996509594
36.64788062995841
110.0
60.95327313484253
25.02232231706676
39.25777017606444
47.03024823457651
60.95327313484253
25.02232231706676
39.25777017606444
44.17670682730923
201.43
5.62
7.05
100
2700
0.47
0.1429
0.3871
0.1
1
2
3
–0.25
1.5
0.7
3

kmol
kmol
kmol
kmol
%
%
%
%
%
%
%
%
kmol/h
kmol/h
kmol/h
kmol/h
kPa
% h/kmol
h
%
h
%/kPa
h
kmol/kPa·h
h

3000

P
Ps

Pressure (kP a)

2900

2800

2700

2600

2500

2400
0

5

10

15

20

25

30

35

40

Time (h)
Figure 1. Pressure trajectory for the system of Equations (23)–(45) for a falsiﬁed y A3 measurement set
at 1 between 10 and 30 h of operation under proportional-integral (PI) control.

The differences in the results based on the attack performed indicate the complexities of
closed-loop nonlinear systems that can make it difﬁcult to predict every possible attack at a plant
to develop appropriate detection and compensation strategies for attacks. In each case, a nonlinear
system evolves over time under different input policies, and its response is therefore difﬁcult to predict
a priori. In addition to the dynamics of the process itself, the dynamics of the other controllers that are
163

Mathematics 2018, 6, 169

not receiving falsiﬁed measurements and how they interact with the inputs computed by controllers
that are receiving false measurements impact the success of the attack. For example, in Figure 1,
the pressure measurement has not been compromised, and mechanisms are in place (through u3
and u4 ) for adjusting the pressure if it increases. Those come into play once the pressure increases
signiﬁcantly, and are able to maintain the pressure below the problematic value of 3000 kPa. A similar
mechanism prevents the pressure from exceeding its threshold when the F4 measurement is falsiﬁed;
when the measurement of P is falsiﬁed, however, the controllers which provided the robustness against
the attack success in the other two cases are compromised and the attacks succeed. The number of
sensors and which sensors are compromised also play a role (i.e., as shown by the attack on P, if the
right sensors are compromised, an unsafe situation can be set up in this process). Furthermore, Figure 1
demonstrates that attack scenarios can be non-obvious. In this ﬁgure, the highest value of the pressure
occurs not when the value of y A3 received by the controller which manipulates u2 is being falsiﬁed,
but in the transient after it ceases to be falsiﬁed. If the maximum pressure bound had been lower,
the pressure in this transient could have exceeded it by creating a rapid change in direction of the
inputs once the actual state measurement of y A3 becomes available again. In such a case, an attack
could focus on the falsiﬁcation followed by the removal of the falsiﬁcation as an attack, rather than
only on the falsiﬁed measurement.
5.2. Deterring Sensor Measurement Falsiﬁcation Cyberattacks on Safety: Creating Non-Intuitive
Controller Outputs
The simpliﬁed Tennessee Eastman Process demonstrates that control designs with theoretical
guarantees regarding cyberattack-resilience would be a valuable alternative to approaches which
assume cyberattacks can be detected. In the next several sections, we seek to better understand how
such controllers might be developed by examining two “intuitive” approaches which fail to meet the
deﬁnition of cyberattack-resilience despite the logic behind their design, followed by an approach
which meets the cyberattack-resilience deﬁnition. The ﬁrst “intuitive” approach to be discussed is
based on the concept that if the control law can be kept hidden from an attacker and the control
law is sufﬁciently complex such that it is difﬁcult for an attacker to postulate what input will be
computed for a given state measurement without knowing the control law, the attacker may have
difﬁculty in performing an attack. The control design that we will explore in this regard is an MPC
with a sufﬁcient number of and/or types of constraints in the controller such that it may become
difﬁcult to predict, without solving the optimization problem, what input may be computed for a
given state measurement. The LMPC of Equations (14)–(20) is an example of a controller which might
be considered. In that controller, the constraints of Equations (19) and (20) may cause the inputs
computed by the LMPC of Equations (14)–(20) to be different from those computed by the MPC of
Equations (9)–(13); therefore, if the same falsiﬁed state measurement was provided to both, it is possible
that one might compute a control action that could drive the closed-loop state to an unsafe condition,
whereas the other may not. If the cyberattacker did not know the control law being used, the presence
of additional constraints like the stability-based constraints may cause inputs to be computed which
an attacker does not expect. Furthermore, due to the closed-loop stability guarantees which can be
made for LMPC (i.e., the closed-loop state remains in Ωρ1 at all times under sufﬁcient conditions) [60],
a check at each sampling time on whether the measured state is in Ωρ1 may provide a type of detection
mechanism for cyberattacks that may make it more difﬁcult for them to succeed. Speciﬁcally, under
normal operating conditions, the state measurement should never be outside Ωρ1 ; if it is, it may be
considered that there is a potential the state measurement has been falsiﬁed. If a cyberattacker is
unaware of the value of ρ1 , he or she may provide a false state measurement to the controller which
triggers detection; on the other hand, if he or she is only able to attack a limited number of sensors,
unless the attacker knows or can predict the readings of the unattacked sensors at each sampling time,
the attacker does not know how close the full state measurement being received by the controller

164

Mathematics 2018, 6, 169

(incorporating the attacked and unattacked measurements) is to being outside of Ωρ1 . Again, an attack
may be detected or deterred in this case.
Difﬁculties with this approach include, however: (1) if the cyberattacker did not know the control
law being used, it is questionable whether a high-impact attack would be attempted regardless of the
control law being used (i.e., it may not matter whether it has Lyapunov-based stability constraints
or not), because in any case the control law is not known and therefore attempting to randomly attack
the controller may be considered overly risky and unlikely to avoid detection; (2) the attacker may
gain access to all of the sensors and learn the value of ρ1 , and thereby be able to maintain the falsiﬁed
state measurement always in Ωρ1 to avoid detection.
Remark 3. We note that closed-loop stability of an approach like LMPC under normal operation
(no cyberattacks) is proven elsewhere (e.g., [60]). The proof in [60] relies on the state measurement being
accurate; therefore, this proof does not allow us to prove closed-loop stability in the presence of a cyberattack.
5.2.1. Problems with Creating Non-Intuitive Controller Outputs
The pitfall of this approach from a nonlinear dynamic systems perspective is that it does not
make any attempt to prevent policies from existing that could create unsafe operating conditions
if the control law becomes known (i.e., Deﬁnition 4 is violated); it essentially assumes luckiness by
hoping that the cyberattacker will never be able to ﬁgure out enough about the control design to
be able to attack it. If the attacker does ﬁgure out the control law, it may not be overly difﬁcult for
them to develop an attack policy that could drive the closed-loop state to an unsafe condition while
maintaining the falsiﬁed state measurement in Ωρ1 , despite the many constraints. For example, it may
be possible to develop an optimization problem in some cases that can be used in helping develop
attack policies, and then those can be assessed within closed-loop simulations to see whether they may
be likely to produce a problematic state trajectory.
To see this, consider a continuous stirred tank reactor (CSTR) in which the reactant A is converted
to the product B via an irreversible second-order reaction. The feed and outlet volumetric ﬂow rates
of the CSTR are F, with the feed concentration C A0 and feed temperature T0 . The CSTR is operated
non-isothermally with a jacket used to remove or add heat to the reactor at heat rate Q. Constant liquid
density ρ L , heat capacity C p , and liquid volume V are assumed, with the constants (from [79]) in
Table 2. The dynamic process model is:
Ċ A =
Ṫ =

F
− E
(C − C A ) − k0 e Rg T C2A
V A0

F
ΔHk0 − REg T 2
Q
( T0 − T ) −
e
CA +
V
ρL Cp
ρL Cp V

(46)
(47)

where C A and T represent the concentration and temperature in the reactor, respectively, E is the
activation energy of the reaction, k0 is the pre-exponential constant, R g is the ideal gas constant,
and ΔH is the enthalpy of reaction. We develop the following vectors for the states and inputs in
deviation form: x = [ x1 x2 ] T = [C A − C As T − Ts ] T and u = [u1 u2 ] T = [C A0 − C A0s Q − Qs ] T ,
where C As = 1.22 kmol/m3 , Ts = 438.2 K, C A0s = 4 kmol/m3 , and Qs = 0 kJ/h are the steady-state
values of C A , T, C A0 , and Q at the operating steady-state.
The control objective is to maximize the following proﬁt-based stage cost for the process of
Equations (46) and (47) representing the production rate of the product B while computing control
actions which meet the input constraints 0.5 ≤ C A0 ≤ 7.5 kmol/m3 and −5 × 105 ≤ Q ≤ 5 × 105 kJ/h
and maintain closed-loop stability:
Le = k0 e

−R

E
g T (τ )

165

C A ( τ )2

(48)

Mathematics 2018, 6, 169

We will use an LMPC with the stage cost in Equation (48) to control this process. We choose
a Lyapunov function V1 = x T Px, where P = [1200 5; 5 0.1], h1,1 ( x ) = 0 kmol/m3 for simplicity,
and h1,2 ( x ) is determined by Sontag’s control law [80] as follows:
⎧
⎪
⎨
h1,2 ( x ) =

−

L f˜ V1 +

⎪
⎩0,

&

L f˜ V12 + L g̃2 V14

L g̃2 V1

,

if L g̃2 V1 = 0

(49)

if L g̃2 V1 = 0

where if h1,2 fell below or exceeded the upper or lower bound on u2 , h1,2 was saturated at the respective
bound. In Equation (49), f˜ represents the vector containing the terms in Equations (46) and (47) (after
the model has been rewritten in deviation variable form in terms of x1 and x2 ) that do not contain
any inputs, and g̃ represents the matrix that multiplies the vector of inputs u1 and u2 in the equation.
L f˜V1 and L g̃k V1 represent the Lie derivatives of V1 with respect to f˜ and g̃k , k = 1, 2. The state-space
was discretized and the locations where V̇1 < 0 under the controller h1 ( x ) were examined and used
to set ρ1 = 180. ρe,1 was set to be less than ρ1 , and was (heuristically) chosen to be 144. The process
is initialized at xinit = [−0.4 kmol/m3 20 K] T and simulated with the integration step of 10−4 h,
with N set to 10, and with Δ set to 0.01 h. The Lyapunov-based stability constraint activated when
x (tk ) ∈ Ωρe,1 was enforced at the end of every sampling period in the prediction horizon, and whenever
the Lyapunov-based stability constraint involving the time-derivative of the Lyapunov function was
enforced, the other Lyapunov-based constraint was implemented at the end of the sampling periods
after the ﬁrst. The simulations were implemented in MATLAB using fmincon. The initial guess
provided to fmincon was the steady-state input vector. The maximum and minimum values of u2 were
multiplied by 10−5 within the optimization problem due to the large magnitudes of the upper and
lower bounds allowed for this optimization variable.
Table 2. Parameters for the continuous stirred tank reactor (CSTR) process.
Parameter

Value

Unit

V
T0
Cp

1
300
0.231

m3
K
kJ/kg·K

k0

8.46 × 106

m3 /h·kmol

F

5

m3 /h

ρL

1000

kg/m3

E

5 × 104

kJ/kmol

Rg

8.314

kJ/kmol·K

ΔH

−1.15 × 104

kJ/kmol

To consider an attack on the safety of this process, we assume that we do not want the temperature
in the reactor to go 55 K above Ts (because no temperature at any point in the stability region is this
high, the controller should, under normal operation, have no trouble achieving this). However, if we
assume that the cyberattacker knows the control law and can access the state measurements, he or she
could exploit this to design an attack policy speciﬁc to the closed-loop system under consideration.
To demonstrate that this can be possible, we will computationally develop an attack policy for this
process through two optimization problems, the ﬁrst of which tries to compute control actions within
the input bounds which maximize the temperature reached within NΔ time units from the (actual)
current state measurement, and the second of which ﬁnds a state measurement (to use as the false
value in an attack) which can generate control actions that, ideally, are as close as possible to those
developed in the ﬁrst optimization problem and also ensure that there is a feasible solution to the
constraints which will be employed in the LMPC. The ﬁrst optimization problem is as follows:
166

Mathematics 2018, 6, 169

min

u(t)∈S(Δ)

−( x2 (t N ) + Ts )

x̃˙ (t) = f˜( x̃ (t)) + g̃u(t)

s.t.

(50)
(51)

x̃ (t0 ) = xinit

(52)

− 3.5 ≤ u1 (t) ≤ 3.5, ∀ t ∈ [t0 , t N )

(53)

− 105 ≤ u2 (t) ≤ 105 , ∀ t ∈ [t0 , t N )

(54)

Equations (50)–(54) are designed such that the solution of this optimization problem is a
piecewise-constant input trajectory that meets the process input constraints (Equations (53) and (54))
and drives the temperature in the reactor as high as possible in NΔ time units (Equation (50)) according
to the dynamics of the process (Equation (51)) starting from the state measurement at the current time
(Equation (52); the current time is denoted by t0 in this optimization problem since this problem is
solved only once instead of in a receding horizon fashion). The solution of this optimization problem
for the process of Equations (46) and (47) is a piecewise-constant input trajectory with u1 varying
between 3.4975 and 3.4983 kmol/m3 and u2 varying between 499856.52 and 499908.01 kJ/h over the
NΔ time units.
Because the inputs are approximately constant throughout the NΔ time units in the solution
to Equations (50)–(54), this suggests that a single initial condition may be sufﬁcient for causing the
problematic input policy to be generated at each sampling time. Speciﬁcally, the only information that
the LMPC of Equations (14)–(20) receives from an external source at each time that it is solved is the
state measurement in Equation (16); because it uses a deterministic process model and deterministic
constraints, the LMPC of Equations (14)–(20) has a single solution for a given state measurement.
Therefore, if a cyberattacker determines that an attack policy which applies the same input at every
sampling time is desirable, he or she can cause the controller to compute this input at every sampling
time by determining a state measurement value for which the problematic input is the solution to
Equations (14)–(20), and then providing that same state measurement to the LMPC at every sampling
time to cause it to keep computing the same problematic input.
The following second optimization problem ﬁnds the initial condition to use at each of the next N
sampling periods that may cause the values of u1 and u2 in the ﬁrst sampling period of the prediction
horizon to be close to the averages of the N values of u1 (u1,desired ) and the N values of u2 (u2,desired ),
respectively, determined by Equations (50)–(54), while allowing the constraints of Equations (14)–(20)
to be met:
 

min

u(t)∈S(Δ),xmeas

t1

t0

(u1 (τ ) − u1,desired )2 + 10−10 (u2 (τ ) − u2,desired )2 dτ
x̃˙ (t) = f˜( x̃ (t)) + g̃u(t)

s.t.

(55)
(56)

x̃ (t0 ) = xmeas

(57)

− 3.5 ≤ u1 (t) ≤ 3.5, ∀ t ∈ [t0 , t N )

(58)

− 10 ≤ u2 (t) ≤ 10 , ∀ t ∈ [t0 , t N )

(59)

V1 ( x̃ (t j )) ≤ ρe,1 , j = 0, . . . , N

(60)

5

5

This optimization problem reverse engineers the LMPC of Equations (14)–(20) (except that it
neglects the objective function of the controller) in the sense that it seeks to ﬁnd an initial condition
xmeas (Equation (57)) to provide to the LMPC of Equations (14)–(20) for which there exists a feasible
input policy for the N sampling periods of the prediction horizon that meets the process input
constraints (Equations (58) and (59)) as well as the Lyapunov-based stability constraint of Equation (19)
(Equation (60)) while allowing this feasible trajectory to include u1 and u2 in the ﬁrst sampling period
of the prediction horizon taking values as close to the problematic values u1,desired and u2,undesired

167

Mathematics 2018, 6, 169

as possible. The reason for only requiring u1 and u2 in the ﬁrst sampling period of the prediction
horizon to be as close as possible to the attack values is that though the optimization problem of
Equations (55)–(60) is being solved only once to obtain the sensor attack policy xmeas to provide
to the LMPC at each subsequent sampling time, the LMPC will be solved at every sampling time
and will only apply the input for the ﬁrst sampling period of the prediction horizon in each case.
The formulation of Equation (60) assumes that the attacker knows the exact manner in which this
constraint is enforced in the LMPC, where, as noted above, it will be enforced at the end of every
sampling period in the prediction horizon. The addition of the requirement in Equation (60) that
V1 ( x̃ (t0 )) ≤ ρe,1 is used to pre-select that xmeas should be within Ωρe,1 . This eliminates the need to try
to solve a disjunctive or mixed integer nonlinear program [81] that allows the initial condition to be
either in Ωρe,1 or Ωρ1 /Ωρe,1 such that the constraint to be employed (i.e., Equation (19) or Equation (20))
depends on the optimization variables that are the components of xmeas . The components of xmeas were
essentially unconstrained in Equations (55)–(60).
In solving Equations (50)–(60), the bounds on u2 were multiplied by 10−5 . The false state
measurement determined from Equations (55)–(60) was x1 = −0.05207 kmol/m3 and x2 = −8.3934 K.
Figure 2 demonstrates that when this state measurement is used at every sampling period for 10
sampling periods, the inputs computed are able to drive the temperature signiﬁcantly above its
threshold value x2 = 55 K within a short time. When disturbances are added (speciﬁcally, simulations
were performed with disturbances added to the right-hand sides of Equations (46) for w1 and (47)
for w2 ) generated using the MATLAB functions rng(10) to generate a seed with normrnd to generate a
pseudorandom number from a normal distribution with mean of zero and a standard deviation of
30 kmol/h (for w1 ) and 3200 K/h (for w2 ), with both inputs clipped when necessary to bound them
such that |w1 | ≤ 90 and |w2 | ≤ 9600, an unsafe situation is again set up in 10 sampling periods in
which x2 approaches 300 K as in Figure 2. The LMPC only receives state measurements, regardless of
whether there are disturbances or not; therefore, if the same state measurement is given every time,
it computes the same solution to the optimization problem every time and when this solution is able to
drive the closed-loop state to an unsafe condition if continuously applied, the cyberattacker succeeds.
The attack-deﬁning concept posed here could be attempted for other attack goals as well, such as
minimizing a proﬁt-based objective function in Equations (50)–(54) to seek to compute an attack policy
that ﬁnancially attacks the plant or minimizing a production-based objective function to seek to attack
the chemical supply from the plant.
300

State
Ω ρ1

250

T − Ts (K)

200

150

100

50

0

-50
-1.2

-1

-0.8

-0.6

-0.4

-0.2

0

CA − CAs (kmol/m3 )

0.2

0.4

0.6

Figure 2. State-space trajectory showing the state trajectory in 10 sampling periods with the falsiﬁed
state measurements determined through optimization applied at every sampling time, in the absence
of disturbances.

168

Mathematics 2018, 6, 169

Remark 4. The CSTR example indicates an important difference between traditional safety thinking and
thinking about cyberattacks. In traditional safety thinking, there will be unsafe operating conditions that might
be considered very unlikely to be achieved; when considering cyberattacks, there can be deliberate attempts on the
part of the attacker to set up unsafe operating conditions that might otherwise be very unlikely to be achieved.
It is therefore important to seriously consider unlikely scenarios at the hazard analysis stage from the perspective
of whether a cyberattack on the control system could lead them to occur.
Remark 5. Though the cyberattack design methodology presented in this section suggests that cyberattacks
on speciﬁc control designs might be developed computationally, the framework used in Equations (50)–(60)
may not always achieve expected effects. Speciﬁcally, the initial condition determined by Equations (55)–(60)
may not actually result in the control actions of Equations (50)–(54) being computed at each sampling time
by the controller because the only feature of Equations (55)–(60) that seeks to associate xmeas with u1,desired
and u2,desired is a soft constraint rather than a hard constraint, and it is, therefore, not guaranteed to be met.
Furthermore, Equations (55)–(60) do not account for the role of the objective function in affecting which inputs
would actually be computed for a given state measurement. In this example, the false state measurement
determined through Equations (50)–(60) was able to rapidly set up an unsafe scenario when used to cyberattack
the LMPC; to develop attacks for other systems, it may be necessary to develop a more sophisticated method
for determining the false state measurements or to use closed-loop simulations to determine if the false state
measurements determined computationally provide an appropriate attack scenario with which to test research
results. Finally, it should be noted that Equations (50)–(54) are not guaranteed to ﬁnd an input that drives x2
above its threshold in N sampling periods; whether or not this occurs may depend on the process dynamics,
the input bounds, the initial condition, and also the number of sampling periods N over which the increase in x2
is allowed to occur.
5.3. Deterring Sensor Measurement Falsiﬁcation Cyberattacks on Safety: Creating Unpredictable
Controller Outputs
The second “intuitive” approach seeks to address a perceived deﬁciency in the ﬁrst “intuitive”
approach, namely that the success of the cyberattacks in Section 5.2.1 was related to the fact that the
cyberattacker could ﬁgure out the mapping between x (tk ) and u by learning the control law. One idea
for addressing this would be to develop sets of stabilizing control laws for a process and choose
only one, randomly, at each sampling time. Then, if the inputs which the various potential control laws
would compute for the same state measurement are signiﬁcantly different, it may be more difﬁcult for
an attacker to determine an attack policy that, regardless of the control law chosen at a sampling time,
will drive the closed-loop state to an unsafe condition (even if the attacker knew every potential
control law).
Before we can consider such an approach, it must be established that randomization in the
controller selection process can be achieved without impacting closed-loop stability under normal
operation (i.e., in the absence of a cyberattack). Theory-based control designs with stability guarantees
from an explicitly characterizable region of attraction even in the presence of disturbances (e.g., LMPC)
are therefore attractive options for use in randomization strategies for control laws. In the remainder
of this section, we present an example of a control design and implementation strategy that uses
LMPC to incorporate randomness in process operation (with the goal of deterring cyberattacks by
obscuring the mapping between a state measurement at a given sampling time and the input to be
computed) with closed-loop stability guarantees under normal operation even in the presence of the
randomness. However, like the design in Section 5.2, this design and its implementation strategy do
not fundamentally prevent the existence of an input policy which could create an unsafe condition
for some x (t0 ) ∈ X̄ (when, for example, X̄ = Ωρ1 ), and therefore if this design succeeds in preventing
or delaying the impacts of cyberattacks, it does so more on the basis of chance than rigor, which is
demonstrated below using the CSTR example.

169

Mathematics 2018, 6, 169

5.3.1. Creating Unpredictable Controller Outputs: Incorporating Randomness in LMPC Design
The randomized LMPC design involves the development of n p controllers of the form of
Equations (14)–(20) but where each can have a different Lyapunov function, Lyapunov function
upper bound, and Lyapunov-based controller as follows:
min

 t
k+ N

u(t)∈S(Δ)

s.t.

tk

Le ( x̃ (τ ), u(τ )) dτ

x̃˙ (t) = f ( x̃ (t), u(t), 0)

(61)
(62)

x̃ (tk ) = x (tk )

(63)

x̃ (t) ∈ X, ∀ t ∈ [tk , tk+ N )

(64)

u(t) ∈ U, ∀ t ∈ [tk , tk+ N )

(65)

Vi ( x̃ (t)) ≤ ρe,i , ∀ t ∈ [tk , tk+ N ),
if x (tk ) ∈ Ωρe,i
∂Vi ( x (tk ))
f ( x ( t k ), u ( t k ), 0)
∂x
∂V ( x (tk ))
≤ i
f ( x (tk ), hi ( x (tk )), 0)
∂x
if x (tk ) ∈ Ωρi /Ωρe,i or tk ≥ t or δ = 1

(66)

(67)

where Vi , ρe,i , ρi , and hi , i = 1, . . . , n p , play the roles in Equations (61)–(67) of V1 , ρe,1 , ρ1 ,
and h1 , respectively, from Equations (14)–(20). Each combination of Vi and hi is assumed to satisfy
Equations (2)–(5) ∀ x ∈ Ωρi and Ωρe,i ⊂ Ωρi . For j = 2, . . . , n p , the Ωρ j should be subsets of Ωρ1 for
reasons that will be clariﬁed in Section 5.3.1.1. To introduce an additional aspect of randomness at
each sampling time, the parameter δ is introduced in Equation (67). It can take a value of either 0 or 1,
and one of those two values is randomly selected for it at each sampling time. δ = 1 corresponds to
activation of the constraint of Equation (67) even when tk < t or x (tk ) ∈ Ωρe,i .
With the n p controllers of the form of Equations (61)–(67) and the two possible values of δ in
each of these LMPC’s at every sampling time, Equations (61)–(67) represent 2n p potential controllers
which may be selected at every sampling time (though if x (tk ) ∈ Ωρi /Ωρe,i for nq of these controllers,
Equations (61)–(67) with δ = 0 and δ = 1 are the same, such that the number of control laws is
2n p − nq ). One could consider other potential control options in addition, such as the Lyapunov-based
controllers hi ( x ), i = 1, . . . , n p . However, though all of these controllers are designed and are available
in principle, they could cause closed-loop stability issues that require that not all of them be available
to be randomly selected between at each sampling time. The conditions which determine which
controllers are possibilities at a given sampling time should rely on the position of x (tk ) in state-space
and speciﬁcally whether x (tk ) ∈ Ωρi for the i-th controller to be considered as a candidate.
To exemplify this, consider the two level sets Ωρ1 and Ωρ2 and their subsets Ωρe,1 and Ωρe,2
shown in Figure 3. Two potential values of x (tk ) are presented (x a and xb ) to exemplify the role
that the state-space location of x (tk ) should play in determining which of the n p controllers of
the form of Equations (61)–(67) or the Lyapunov-based controllers of the form hi ( x (tk )) should be
considered as candidates to randomly select between at a given sampling time. Consider ﬁrst that
x (tk ) = x a . In this case, x (tk ) ∈ Ωρ1 /Ωρe,1 , and therefore, as described in Section 2.4, the LMPC of
Equations (61)–(67) with i = 1 would be able to maintain the closed-loop state in Ωρ1 throughout the
subsequent sampling period. It is also true that x (tk ) ∈
/ Ωρe,2 , so it may at ﬁrst seem reasonable to
consider that if the LMPC of Equations (61)–(67) is used with i = 2, the constraint of Equation (67) could
be activated to decrease the value of the Lyapunov function between two sampling periods and thereby
drive the closed-loop state toward the origin using the properties of the Lyapunov-based controller

170

Mathematics 2018, 6, 169

and the constraint of the form of Equation (67) described in Section 2.4. However, the closed-loop
stability properties delivered by the constraint of Equation (67) are developed with the requirement
that Equations (2)–(5) must hold within the stability region and that x (tk ) must be in this stability
/ Ωρ2 , these properties are not guaranteed to hold. Therefore, when x (tk ) = x a
region. When x (tk ) ∈
in Figure 3, the LMPC of Equations (61)–(67) with i = 2 would not be a wise choice to randomly
select at a given sampling time. Similarly, h2 ( x (tk )) is guaranteed to maintain closed-loop stability
when x (tk ) ∈ Ωρ2 , but if h2 ( x (tk )) is applied when x (tk ) = x a , x (tk ) ∈
/ Ωρ2 and therefore the stability
properties are not guaranteed to hold.

xa

Ω ρ1
Ωρe,1
Ω ρ2
Ωρe,2

xb

Figure 3. Intersecting stability regions with two different potential initial conditions x (tk ) = x a and
x (tk ) = xb .

In contrast, consider the potential initial condition x (tk ) = xb . In this case, x (tk ) ∈ Ωρ1 and
Ωρ2 . Consequently, Equations (61)–(67) with i = 1 or i = 2 (for δ = 1 or δ = 0), h1 ( x (tk )), and
h2 ( x (tk )) can all maintain closed-loop stability of the process of Equation (1), and therefore all could be
considered as potential control designs between which to randomly select at tk . This indicates that the
location of x (tk ) in state-space should be checked with respect to Ωρi , i = 1, . . . , n p , before developing
a candidate set of controllers to randomly select between at tk . It should be noted, however, that if
Ωρi , i = 2, . . . , n p , are subsets of Ωρ1 , then at each sampling time, Equations (61)–(67) with i = 1 and
δ = 0, Equations (61)–(67) with i = 1 and δ = 1, and h1 ( x (tk )) are all candidate controllers that can
maintain closed-loop stability. If x (tk ) is in the intersection of additional level sets, there are additional
candidate controllers which could be randomly selected between. Therefore, the minimum number of
candidate controllers is 3 (or 2 if x (tk ) ∈ Ωρ1 /Ωρe,1 such that Equations (61)–(67) with δ = 0 and δ = 1
are equivalent), with more potentially being possible, especially as more stability regions with more
intersections are developed.
Taking the above considerations into account, the implementation strategy for the LMPC design
of Equations (61)–(67) is proposed as follows:
Step 1. At tk , a random integer j between 1 and 2n p is selected, and δ is randomly selected to be
zero or one.
Step 2. If j ∈ {2, . . . , n p }, set i = j. If j ∈ {n p + 2, . . . , 2n p }, set i = j − n p . Verify that Vi ( x (tk )) ∈
Ωρi . If yes, move to Step 3. If not, return to Step 1.
Step 3. If j is a number between 1 and n p , use the LMPC of Equations (61)–(67) with i = j and the
selected value of δ. If j = n p + d, d = 1, . . . , n p , set u = hd ( x (tk )).
Step 4. Apply the control action computed for tk to the process of Equation (1).
Step 5. tk ← tk+1 . Return to Step 1.
Remark 6. To prevent the possibility that the same index that is found to not meet the conditions in Step 2 at tk
will be selected multiple times as Steps 1 and 2 are repeated until a value of j is found for which Vi ( x (tk )) ∈ Ωρi ,

171

Mathematics 2018, 6, 169

indexes that cause Vi ( x (tk )) ∈
/ Ωρi can be removed in the random integer selection procedure in Step 1 at tk as
they are identiﬁed before they force the algorithm to return to Step 1.
5.3.1.1. Stability Analysis of Randomized LMPC
In this section, we develop sufﬁcient conditions required for the randomized LMPC
implementation strategy to provide closed-loop stability of the nonlinear process of Equation (1)
under this implementation strategy and feasibility of the LMPC of Equations (61)–(67) when it is
selected via the implementation strategy in the absence of a cyberattack in Section 5.3.1 to be used in
determining a control action at a given sampling time. We ﬁrst introduce two propositions that will
then be used in proving the main results.
Proposition 1. Refs. [60,82] Consider the systems
ẋ a (t) = f ( x a (t), u(t), w(t))

(68)

ẋb (t) = f ( xb (t), u(t), 0)

(69)

with initial states x a (t0 ) = xb (t0 ) ∈ Ωρ1 . There exists a function f W of class K such that:

| x a (t) − xb (t)| ≤ f W (t − t0 )

(70)

for all x a (t), xb (t) ∈ Ωρ1 and all w(t) ∈ W with:
fW (τ ) =

Lw θ Lx τ
( e − 1)
Lx

(71)

Proposition 2. Refs. [60,82] Consider the Lyapunov function Vi (·) of the system of Equation (1). There exists
a quadratic function f V,i (·) such that:

for all x, x̂ ∈ Ωρi with

Vi ( x ) ≤ Vi ( x̂ ) + f V,i (| x − x̂ |)

(72)

−1
(ρi ))s + Mv,i s2
f V,i (s) = α4,i (α1,i

(73)

where Mv,i > 0 is a constant.
Proposition 3. Ref. [62] Consider the Lyapunov-based controller hi ( x ) that meets Equations (2)–(5) with
Lyapunov function Vi (·), applied in sample-and-hold to the system of Equation (1). If ρi > ρe,i > ρmin,i > ρs,i ,
and θ > 0, Δ > 0, and w,i > 0 satisfy:

then ∀ x (tk ) ∈ Ωρi /Ωρs,i ,

−1
− α3,i (α2,i
(ρs,i )) + Lx,i MΔ + Lw,i θ ≤ −w,i /Δ

(74)

Vi ( x (t)) ≤ Vi ( x (tk ))

(75)

and x (t) ∈ Ωρi for t ∈ [tk , tk+1 ). Furthermore, if ρmin,i is deﬁned as follows:
ρmin,i = max{Vi ( x (t + Δ)) : Vi ( x (t)) ≤ ρs,i }

(76)

then the closed-loop state is ultimately bounded in Ωρmin,i in the sense that:
lim sup | x (t)| ∈ Ωρmin,i
t→∞

172

(77)

Mathematics 2018, 6, 169

Theorem 1. Consider the system of Equation (1) in closed-loop under the implementation strategy of
Section 5.3.1 based on controllers hi ( x ) that satisfy Equations (2)–(5), and consider that the conditions in
Proposition 3 hold. Let w,i > 0, Δ > 0, ρi > ρe,i > ρmin,i > ρs,i satisfy:
ρe,i ≤ ρi − f V,i ( f W (Δ))

(78)

and Equations (74) and (76), for i = 1, . . . , n p , and Ωρe,j ⊂ Ωρe,1 , j = 2, . . . , n p . If x (t0 ) ∈ Ωρ1 and N ≥ 1,
then the state x (t) of the closed-loop system is always bounded in Ωρ1 .
Proof. The proof consists of two parts. In the ﬁrst part, we demonstrate that despite the random
selection of a control law in Step 1 of the implementation strategy in Section 5.3.1, a characterizable
control action is applied at every sampling time, and the LMPC of Equations (61)–(67) is feasible at
every sampling time at which it is used for determining the control action to apply to the process. In
the second part, we prove the results of Theorem 1.
Part 1. To demonstrate that an input with characterizable properties is returned by the
implementation strategy of Section 5.3.1 at every sampling time to be applied to the process, we note
that one of two inputs is returned at every sampling time: a) a control action computed by the LMPC
of Equations (61)–(67) with i = j where x (tk ) ∈ Ωρ j or b) a Lyapunov-based controller h j ( x (tk )) where
x (tk ) ∈ Ωρ j .
In case (a), a solution to the LMPC of Equations (61)–(67) must have the characterizable property
that it met the constraints of the LMPC because the LMPC always has at least one feasible solution.
Speciﬁcally, hi ( x̃ (tq )), q = k, . . . , k + N − 1, t ∈ [tq , tq+1 ), with i = j, is a feasible solution to the
optimization problem of Equations (61)–(67) when x (tk ) ∈ Ωρ j . It causes the constraint of Equation (64)
to be met because hi ( x̃ (tq )), q = k, . . . , k + N − 1, t ∈ [tq , tq+1 ), maintains the closed-loop state in
Ωρ j ⊆ Ωρ1 by Proposition 3, and the state constraint of Equation (64) is met for all states in Ωρ1 . hi ( x ) in
sample-and-hold also satisﬁes the input constraint of Equation (65) by Equation (5). From Proposition 3,
it causes the constraint of Equation (66) to be met when x (tk ) ∈ Ωρ j , and it trivially satisﬁes the
constraint of Equation (67). Notably, the feasibility of hi ( x ) in sample-and-hold is true regardless of
whether δ = 1 or δ = 0 because this is a feasible solution to all constraints of the optimization problem.
In case (b), the control action applied to the process is also characterizable because it is a
control action that meets Proposition 3. Therefore, regardless of the control action applied at tk ,
the control action has characterizable properties which can be used in establishing closed-loop stability.
Furthermore, whenever Equations (61)–(67) are used to determine an input at a given sampling time,
a feasible solution to this optimization problem always exists because it is ensured that x (tk ) ∈ Ωρi
before the solution is obtained, and the feasibility of hi ( x̃ (tq )), q = k, . . . , k + N − 1, t ∈ [tq , tq+1 ) was
demonstrated to hold above as long as x (tk ) ∈ Ωρi .
Part 2. In this part, we prove that even with a control law randomly selected at every sampling
time according to the implementation strategy in Section 5.3.1, the closed-loop state is maintained
within Ωρ1 for all times if x (t0 ) ∈ Ωρ1 .
To demonstrate this, we ﬁrst consider the case that at a given sampling time, a control law of
the form of Equations (61)–(67) with i = j when x (tk ) ∈ Ωρ j is selected. In this case, either the
constraint of Equation (66) is activated (if x (tk ) ∈ Ωρe,i ), the constraint of Equation (67) is activated (if
x (tk ) ∈ Ωρi /Ωρe,i , tk ≥ t , or δ = 1), or both are activated (as may occur, for example, if tk ≥ t or δ = 1
but x (tk ) ∈ Ωρe,i ).
Consider ﬁrst the case that Equation (66) is activated. In this case, application of Proposition 2
(assuming that x (t) ∈ Ωρi for t ∈ [tk , tk+1 )) gives:
Vi ( x (t)) ≤ Vi ( x̃ (t)) + f V,i (| x (t) − x̃ (t)|)

173

(79)

Mathematics 2018, 6, 169

for t ∈ [tk , tk+1 ). Applying the constraint of Equation (66) and Proposition 1, we obtain that:
Vi ( x (t)) ≤ ρe,i + f V,i ( f W (|t − tk |)) ≤ ρe,i + f V,i ( f W (Δ))

(80)

for t ∈ [tk , tk+1 ). When Equation (78) holds, Vi ( x (t)) ≤ ρi , for t ∈ [tk , tk+1 ), which validates the
assumption used in deriving this result and guarantees that x (t) ∈ Ωρi for t ∈ [tk , tk+1 ) when
x (tk ) ∈ Ωρe,i and the LMPC of Equations (61)–(67) is used to determine the input to the process of
Equation (1). Because Ωρi ⊆ Ωρ1 , x (t) ∈ Ωρ1 for t ∈ [tk , tk+1 ).
Consider now the case that the constraint of Equation (67) is activated. In this case, we have from
this constraint and Equation (3) that
∂Vi ( x (tk ))
f ( x ( t k ), u ( t k ), 0)
∂x
∂V ( x (tk ))
f ( x (tk ), hi ( x (tk )), 0) ≤ −α3,i (| x (tk )|)
≤ i
∂x

(81)

from which we can obtain:
∂Vi ( x (t))
f ( x (t), u(tk ), w(t))
∂x
∂V ( x (t))
f ( x (t), u(tk ), w(t))
= i
∂x
∂V ( x (tk ))
f ( x ( t k ), u ( t k ), 0)
− i
∂x
∂Vi ( x (tk ))
f ( x ( t k ), u ( t k ), 0)
+
∂x

 ∂Vi ( x (t))
f ( x (t), u(tk ), w(t))
≤ 
∂x


∂V ( x (tk ))
f ( x (tk ), u(tk ), 0) − α3,i (| x (tk )|)
− i
∂x

(82)

≤ Lx,i | x (t) − x (tk )| + Lw,i |w| − α3,i (| x (tk )|)

≤ Lx,i MΔ + Lw,i θ − α3,i (| x (tk )|)

for t ∈ [tk , tk+1 ), where the last inequality follows from Equations (7) and (8). Furthermore, if x (tk ) ∈
Ωρi /Ωρs,i , we can obtain from Equation (82) that:
∂Vi ( x (t))
f ( x (t), u(tk ), w(t))
∂x
−1
(ρs,i ))
≤ Lx,i MΔ + Lw,i θ − α3,i (α2,i

(83)

If Equation (74) holds, then
∂Vi ( x (t))
f ( x (t), u(tk ), w(t)) ≤ −w,i /Δ
∂x

(84)

Integrating Equation (84) gives that Vi ( x (t)) ≤ Vi ( x (tk )), ∀t ∈ [tk , tk+1 ), such that if x (tk ) ∈
Ωρi /Ωρs,i , then x (t) ∈ Ωρi , ∀t ∈ [tk , tk+1 ).
If instead x (tk ) ∈ Ωρs,i ⊂ Ωρi , then from Equation (76), x (t) ∈ Ωρmin,i ⊂ Ωρi for t ∈ [tk , tk+1 ).
Therefore, if Equations (61)–(67) are used to compute the input trajectory at tk and x (tk ) ∈ Ωρi and
Equation (67) is applied, x (t) ∈ Ωρi for t ∈ [tk , tk+1 ) (this holds regardless of whether Equation (66)
is simultaneously applied since this proof relied only on whether Equation (67) is applied and not
whether the other constraints were simultaneously applied). Because Ωρi ⊆ Ωρ1 , this indicates

174

Mathematics 2018, 6, 169

that when the LMPC of Equations (61)–(67) is used with the constraint of Equation (67) activated to
determine the control action at tk when x (tk ) ∈ Ωρi , then x (t) ∈ Ωρ1 for t ∈ [tk , tk+1 ).
Finally, consider the case that x (tk ) ∈ Ωρi and hi ( x (tk )) is used to control the process of
Equation (1) from tk to tk+1 . In this case, the following holds:
∂Vi ( x (tk ))
f ( x (tk ), h( x (tk )), 0) ≤ −α3,i (| x (tk )|)
∂x

(85)

as follows from Equation (3). Using a similar series of steps as in Equation (82), we obtain:
∂Vi ( x (t))
f ( x (t), h( x (tk )), w(t))
∂x
≤ Lx,i MΔ + Lw,i θ − α3,i (| x (tk )|)

(86)

If x (tk ) ∈ Ωρi /Ωρs,i , then as for Equation (83), we obtain:
∂Vi ( x (t))
f ( x (t), h( x (tk )), w(t))
∂x

−1
(ρs,i ))
≤ L x,i MΔ + Lw,i θ − α3,i (α2,i

(87)

If Equation (74) holds, then we can use a similar series of steps as for Equation (84) to derive
that Vi ( x (t)) ≤ Vi ( x (tk )), ∀t ∈ [tk , tk+1 ), such that if x (tk ) ∈ Ωρi /Ωρs,i , then x (t) ∈ Ωρi , ∀t ∈ [tk , tk+1 ).
If x (tk ) ∈ Ωρs,i , then when Equation (76) holds, we obtain that x (t) ∈ Ωρmin,i , t ∈ [tk , tk+1 ), so that
x (t) ∈ Ωρi for t ∈ [tk , tk+1 ). Since Ωρi ⊆ Ωρ1 , we again obtain that if x (tk ) ∈ Ωρi and hi ( x (tk )) is
applied for t ∈ [tk , tk+1 ), then x (t) ∈ Ωρ1 , ∀ t ∈ [tk , tk+1 ).
The above results indicate that throughout every sampling period, if the conditions of Theorem 1
hold and the implementation strategy in Section 5.3.1 is used, then the closed-loop state does not
leave Ωρ1 , implying that it also holds throughout all time if x (t0 ) ∈ Ωρ1 . This completes the proof.
Remark 7. Theorem 1 only speaks to the closed-loop state remaining in a bounded region of operation. If the
randomness is removed and the i = 1 controller is selected to be used with the constraint of Equation (67)
activated for all subsequent times (i.e., Equations (14)–(20) with t > t ), the closed-loop state is guaranteed
to be ultimately bounded in a neighborhood of the origin [60]. If the randomness is not removed but t > t in
Equations (61)–(67), the i-th controller will cause Vi ( x (t)) < Vi ( x (tk )), t ∈ (tk , tk+1 ] as noted in Section 2.4.
However, consider the case that x (tk ) ∈ Ωρi and x (tk ) ∈ Ωρz , but the i-th controller is selected at tk . The decrease
in Vi throughout the sampling period as a result of using the i-th controller does not necessarily imply that
Vz ( x (t)) < Vz ( x (tk )), ∀t ∈ (tk , tk+1 ]. If the randomness is removed, however, and only the i = 1 controller is
used with t > t , V1 ( x (t)) < V1 ( x (tk )), t ∈ (tk , tk+1 ] in every sampling period (i.e., a continuous decrease of
the same Lyapunov function is ensured so that the closed-loop state is guaranteed to move to lower level sets of
this Lyapunov function and not to again leave them) until the closed-loop state reaches Ωρs,1 , after which point it
remains ultimately bounded in Ωρmin,1 . Another idea for driving the closed-loop state to a neighborhood of the
origin with a randomized LMPC implementation strategy would be to change the implementation strategy at t
to only allow controllers to be selected in Steps 1-2 for which V1 and h1 are used in their design (e.g., h1 and the
i = 1 LMPC) so that each of the potential controllers would cause a decrease in the same Lyapunov function
value over time.
Remark 8. The stability analysis reveals that despite the intuitive nature of the approach for deterring
cyberattackers, it suffers the same problem as the controller in Section 5.2; namely, it does not meet Deﬁnition 4,
and once the controller learns the implementation strategy itself, he or she could develop an attack policy that
is not guaranteed to maintain closed-loop stability according to the proof methodology above. We can see a
potential for the lack of resilience by referring again to Figure 3 and noting that if the actual state measurement
is at x a , the closed-loop stability proof relies on the i = 2 controller not being an option; however, a false state
175

Mathematics 2018, 6, 169

measurement of xb may cause the i = 2 controller to be chosen when x (tk ) = x a , such that the conditions
required for the closed-loop stability proof in Theorem 1 (i.e., that the implementation strategy in Section 5.3.1
is correctly followed) do not hold. However, the closed-loop stability issues with the proposed design in the
presence of a cyberattack are deeper than this; the problem is not necessarily that the control action computed
by a controller that would not otherwise have been selected is used, but rather that regardless of whether that
controller should have been allowed to be used per the implementation strategy in Section 5.3.1 is used or not, the
input applied to the process has no relationship to the state in the sense that, for example, the state constraints in
Equations (66) and (67) are not necessarily met (or even close to being met) by the actual process state even if the
controller used at tk indicated feasibility of the control action with respect to these constraints. This is because
the controller is using a different initial condition than the actual process initial condition and therefore will
compute, potentially, a state trajectory under the input selected as optimal by the LMPC that is very different
from the actual process state trajectory under that same input, even in the absence of disturbances/plant-model
mismatch. Mismatch is introduced by the cyberattack at the initial condition for the model of Equation (62).
5.3.2. Problems with Incorporating Randomness in LMPC Design
In this section, we demonstrate the use of the randomized LMPC for the CSTR example of
Section 5.2.1 during routine operation and also in the case that false state measurements are provided
to demonstrate that the randomized LMPC implementation strategy can maintain closed-loop stability
under normal operation, but may at best in certain sensor cyberattack cases only delay an unsafe
condition from being reached (i.e., randomness by itself, without giving the properties in Deﬁnition 4,
does not create cyberattack resilience in control). We ﬁrst develop the set of LMPC’s to be used to
control the process of Equations (46) and (47). We begin by developing seven (i.e., n p = 7) potential
combinations of Vi , hi , Ωρi , and Ωρe,i . The form of each Vi is x T Pi x, where Pi is a symmetric positive
deﬁnite matrix of the following form:


P11 P12
(88)
P12 P22
Sontag’s control law [80] was used to set the value of the component of every hi = [ hi,1 hi,2 ] T
corresponding to u2 as follows:
⎧
⎪
⎨
hi,2 ( x ) =

−

⎪
⎩0,

L f˜ Vi +

&

L f˜ Vi2 + L g̃2 Vi4

L g̃2 Vi

,

if L g̃2 Vi = 0

(89)

if L g̃2 Vi = 0

where if hi,2 fell below or exceeded the upper or lower bound on u2 , hi,2 was saturated at the
respective bound. L f˜Vi and L g̃k Vi represent the Lie derivatives of Vi with respect to f˜ and g̃k , k = 1, 2.
For simplicity, hi,1 was taken to be 0 kmol/m3 for i = 1, . . . , 7. Using the values of the entries of each Pi
associated with each Vi in Table 3 and the associated hi , i = 1, . . . , 7, the stability regions in Table 3 were
obtained by discretizing the state-space and choosing an upper bound on each Lyapunov function
in a region of state-space where V̇i was negative at the discretized points under the controller hi ,
i = 1, . . . , 7 (the discretization was performed in increments of 0.01 kmol/m3 in C A for C A between
0 and 4 kmol/m3 , and in increments of 1 in T for T between 340 and 560 K). Subsets of the stability
regions were selected to be Ωρe,i with the goal of allowing several different control laws to be developed.
For i = 2, . . . , 7, Ωρi ⊆ Ωρ1 . The value of ρe,i was not more than 80% of ρi in each case.

176

Mathematics 2018, 6, 169

Table 3. i-th controller parameters.
i

P11

P12

P22

ρi

ρe,i

1
2
3
4
5
6
7

1200
2000
1500
0.2
1200
1200
1200

5
–20
–20
0
5
5
5

0.1
1
10
2000
0.1
0.1
0.1

180
180
180
180
180
180
180

144
144
144
144
100
130
30

Initially, we evaluate the closed-loop stability properties of the process of Equations (46) and (47)
for normal operation under the randomized LMPC implementation strategy and, for comparison,
under the i = 1 LMPC used for all times. The process was initialized from xinit = [−0.4 kmol/m3
20 K] T . For the randomized LMPC design, the implementation strategy in Section 5.3.1 was followed
with the exception that, for simplicity, δ was set to 0 at every sampling time, and only h1 ( x ) was
considered as a candidate controller at a given sampling time as an alternative to controllers in
Table 3. Therefore, at every sampling time, both the LMPC of Equations (61)–(67) with i = 1 and h1 ( x )
were allowable control actions, and the i-th controller in Table 3 was also allowable if x (tk ) ∈ Ωρi .
The simulations were implemented in MATLAB using fmincon and the seed rng(5) and random
integer generation function randi when the randomized LMPC implementation strategy was used.
The integration step for the model of Equations (46) and (47) was set to 10−4 h, N = 10, and Δ =
0.01 h, with 1 h of operation used. The Lyapunov-based stability constraint activated when x (tk ) ∈
Ωρe,i was enforced at the end of every sampling period in the prediction horizon, and whenever
the Lyapunov-based stability constraint involving the time-derivative of the Lyapunov function
was enforced, the other Lyapunov-based constraint was implemented at the end of the sampling
periods after the ﬁrst. The initial guess provided to fmincon in both cases was the steady-state input
vector. The maximum and minimum values of u2 were multiplied by 10−5 in numerically solving the
optimization problem.
Figures 4–6 show the state, input, and state-space trajectories resulting from controlling the
process with one LMPC throughout the time period of operation, and Figures 7–9 show the results
of controlling the LMPC with one of the eight potential control laws selected at every sampling time,
but depending on the position of the state measurement in state-space. The ﬁgures indicate that both
the single LMPC implemented over time and the randomized LMPC implementation strategy were
able to maintain the closed-loop state within Ωρ1 . Figure 10 shows which controller (i in Table 3)
was selected by the randomized LMPC implementation strategy at each sampling time. Notably,
the control laws associated with i = 2, 3, and 4 in Table 3 were not chosen, which is consistent with
the requirement that a control law can only be available to be selected if x (tk ) ∈ Ωρi (from Figure 9,
we see that the closed-loop state did not enter, for example, Ωρ2 and Ωρ3 , and the results of the
simulations indicate that though the closed-loop state sometimes entered Ωρ4 as shown in Figure 9, it
was never in this region at a sampling time, which explains why these controllers were never selected
by the randomized implementation strategy). The time-integral of Equation (48) was monitored
for the process of Equations (46) and (47) under the inputs applied to the process, and also for
steady-state operation. For the single LMPC implemented over time, it evaluated to 32.2187, while
for the randomized LMPC implementation strategy, it evaluated to 27.7536. There is some proﬁt
loss due to the randomized LMPC implementation strategy, and also large variations in states and
inputs shown in Figures 7 and 8. If the randomized LMPC implementation strategy was able to deter
cyberattacks, one could consider whether that made the variations and proﬁt loss acceptable. Despite
the decrease in proﬁts due to the randomization, both the single LMPC over time and the LMPC’s

177

Mathematics 2018, 6, 169

implemented within the randomized implementation strategy signiﬁcantly outperformed steady-state
operation, which had a value of the time-integral of Equation (48) of 13.8847.
After analyzing normal operation for the LMPC and randomized LMPC implementation strategy,
we look at differences in their response to the cyberattack policy determined in Section 5.2.1, where
the attack on the sensors is simulated for 10 sampling periods and the process is initialized at xinit .
The metric that we use for comparing the results in the two scenarios is the time until the closed-loop
state exceeds its threshold of 55 K for x2 (as x2 > 55 K occurs outside the stability region, the closed-loop
state exits the stability region before this unsafe condition is reached). For the single LMPC, x2 ﬁrst
exceeds it threshold around 0.0142 h. In the case of the randomized LMPC, different input policies (i.e.,
different sequences of randomly selected control laws) give different behavior in the presence of the
cyberattack. Therefore, in Table 4, we present the approximate time that x2 exceeds its threshold for
10 different arguments provided to the MATLAB seeding function rng to create 10 different seeds for
the random number generator that selects which control law to randomly select at each sampling time.
The table indicates that the randomization may slightly delay the time at which x2 ﬁrst exceeds its
threshold compared to the case that the single LMPC is used. However, in none of the cases simulated
was it able to prevent the cyberattack from driving the value of x2 above its threshold in 0.1 h of
operation. If a cyberattacker believes that some delay in the attack may cause him or her to be caught,
this strategy may help with deterring some types of attacks. However, the results indicate that it is not
cyberattack-resilient according to Deﬁnition 4. Figure 11 shows the results of the simulations for 0.1 h
with the randomized LMPC implementation strategy for different arguments of rng in state-space.
Figure 12 displays data on the inputs and value of V1 ( x ) over time under both the randomized
LMPC implementation strategy and the single LMPC, as well as the selected control law among the
8 possibilities at each sampling time in the case that the argument of rng is set to 20. This ﬁgure
suggests that some of the difﬁculty with maintaining the closed-loop state in a bounded region under
the attack is that for the falsiﬁed state measurement, the available controllers (the i = 3 and i = 4
controllers are not available because the false state measurement that the controller receives and uses
in determining which control laws should be made available according to the randomized LMPC
implementation strategy is outside of Ωρ3 and Ωρ4 ) compute inputs with similarities to each other and
to the inputs which the single LMPC would compute in the sense that they are either close in value or
create similar effects on the closed-loop state (i.e., the fact that different control laws may be chosen to
compute an input is not very effective in this case at obscuring the mapping between x (tk ) and the
inputs applied to the process). From Figure 12, we see that all of the available control laws were used
at some point, but the inputs computed in every case except for the i = 8 controller were close to those
of the single LMPC, and the i = 8 controller was also not effective at causing a direction change in the
value of V1 , despite that it has some more noticeable differences compared to the trajectory computed
by the single LMPC.
The attack policy chosen plays a role in the amount of delay in the success of an attack which
the randomized LMPC implementation strategy of Section 5.3.1 may cause. For example, consider
instead the falsiﬁed initial condition x1 = 0.0632 kmol/m3 and x2 = 21.2056 K, which is also within
the stability region (but not within the stability regions of the i = 2, 3, or 4 controllers). If used at
each sampling time, it can cause x2 > 55 K in 0.0319 h under the single LMPC. For this attack policy,
the approximate time after which x2 > 55 K for the randomized LMPC implementation strategy is
reported in Table 5. Some of the delays in the success of the attack at driving x2 > 55 K in this case are
much more signiﬁcant than in Table 4. The simulation results demonstrate that the lack of resiliency of
the randomized LMPC policy can come from the lack of correlation between the inputs applied and the
actual process state at each sampling time, as discussed in Remark 8. For example, for the case where
the seed used is 5, the same inputs are applied to the process in both the case that the single LMPC is
used and the case that the randomized LMPC implementation strategy is used at the sampling period
beginning at tk = 0.02 h, but because the initial condition at tk in both cases is different (caused by the
different input policies computed in the prior sampling period by the use of the different control laws),

178

Mathematics 2018, 6, 169

CA − CAs (kmol/m3 )

these same inputs in one case drive the closed-loop state out of the stability region in the sampling
period, and in the other case they do not succeed in driving it out in the sampling period. Conversely,
in the sampling periods between tk = 0.03 h and 0.05 h, the inputs applied to the process under the
randomized LMPC implementation strategy are not the values that would have been computed if the
single LMPC had been used, but they drive the closed-loop state out of the stability region. Though
the randomness may be beneﬁcial at helping delay the success of attacks in some cases, it does not
address the fundamental lack of correlation between the applied inputs and the actual process state
that causes the cyberattack success.

-0.1

-0.2

-0.3

-0.4
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

T − Ts (K)

50

40

30

20

Time (hr)

3.55

3.5

3.45

Q − Qs (kJ/hr)

CA0 − CA0s (kmol/m3 )

Figure 4. State trajectories under the single Lyapunov-based model predictive controller (LMPC) for
the CSTR of Equations (46) and (47).

0
5

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

× 105

0

-5
0

Time (hr)

Figure 5. Input trajectories under the single LMPC for the CSTR of Equations (46) and (47).

179

Mathematics 2018, 6, 169

State
Ω ρ1
Ω ρ2
Ω ρ3
Ω ρ4
Ωρe,5
Ωρe,6
Ωρe,7
Ωρe,1

60

40

T − Ts (K)

20

0

-20

-40

-60
-0.6

-0.4

-0.2

0

0.2

CA − CAs (kmol/m3 )

0.4

CA − CAs (kmol/m3 )

Figure 6. State-space trajectories under the single LMPC for the CSTR of Equations (46) and (47).
The ﬁgure indicates that the closed-loop trajectory settled on the boundary of Ωρe,1 to optimize the
objective function while meeting the constraints. For simplicity, only one level set for each of the n p
potential LMPC’s is shown (Ωρi is shown if Vi = V1 , and Ωρe,i is shown if Vi = V1 , i > 1).

0
-0.1
-0.2
-0.3
-0.4
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

T − Ts (K)

50
40
30
20
10

Time (hr)

Figure 7. State trajectories under the randomized LMPC implementation strategy for the CSTR of
Equations (46) and (47).

180

Q − Qs (kJ/hr)

CA0 − CA0s (kmol/m3 )

Mathematics 2018, 6, 169

4
3
2
1
0
0
5

× 10

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

5

0

-5
0

Time (hr)

Figure 8. Input trajectories under the randomized LMPC implementation strategy for the CSTR of
Equations (46) and (47).

60

State
Ω ρ1
Ω ρ2
Ω ρ3
Ω ρ4
Ωρe,5
Ωρe,6
Ωρe,7
Ωρe,1

T − Ts (K)

40

20

0

-20

-40

-60
-0.6

-0.4

-0.2

0

0.2

CA − CAs (kmol/m3 )

0.4

Figure 9. State-space trajectories under the randomized LMPC implementation strategy for the CSTR
of Equations (46) and (47). For simplicity, only one level set for each of the n p potential LMPC’s is
shown (Ωρi is shown if Vi = V1 , and Ωρe,i is shown if Vi = V1 , i > 1).

181

Mathematics 2018, 6, 169

8

Chosen Controller (i)

7

6

5

4

3

2

1
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

Time (hr)

Figure 10. Scatter plot showing the control law chosen (i in Table 3) in each sampling period by the
randomized LMPC implementation strategy.
Table 4. Approximate time after which x2 > 55 K for various seed values of rng for the randomized
LMPC design subjected to a cyberattack on the sensors determined in Section 5.2.1.
Seed

Time x2 > 55 K (h)

5
10
15
20
25
30
35
40
45
50

0.0143
0.0148
0.0146
0.0324
0.0146
0.0142
0.0143
0.0147
0.0248
0.0231

5
10
15
20
25
30
35
40
45
50
S
Ω ρ1

300

250

T − Ts (K)

200

150

100

50

0

-50
-1.2

-1

-0.8

-0.6

-0.4

-0.2

0

CA − CAs (kmol/m3 )

0.2

0.4

0.6

Figure 11. State-space trajectories for all of the situations in Table 4. The numbers in the caption
represent the seed values for rng. ‘S’ represents the single LMPC.

182

Q − Qs (kJ/h)

CA0 − CA0s (kmol/m3 )

Mathematics 2018, 6, 169

4

Randomized
Single

2
0
-2
-4
0

0.01

0.02

0.03

0.04

0.05

0.06

0.07

0.08

0.09

0.1

Time (h)
5

× 105

Randomized
Single
0

-5
0

0.01

0.02

0.03

0.04

0.05

0.06

0.07

0.08

0.09

0.1

Time (h)

V1 (x)

300

Randomized
Single
ρ1

200

100

0
0

0.01

0.02

0.03

0.04

0.05

0.06

0.07

0.08

0.09

0.1

0.06

0.07

0.08

0.09

0.1

Chosen Controller (i)

Time (h)
8
6
4
2
0

0.01

0.02

0.03

0.04

0.05

Time (hr)

Figure 12. Trajectories of u1 , u2 , and V1 under the randomized LMPC implementation strategy for
rng(20) (denoted by ‘Randomized’ in the ﬁgure) and under the single LMPC (denoted by ‘Single’ in
the ﬁgure). The value of ρ1 is denoted by the horizontal line in the plot for the value of V1 . The bottom
plot indicates the controller selected by the randomized LMPC implementation strategy at each of the
10 sampling times in the simulation.
Table 5. Approximate time after which x2 > 55 K for various seed values of rng for the randomized
LMPC design subjected to a cyberattack on the sensors with x1 = 0.0632 kmol/m3 and x2 = 21.2056 K.
Seed

Time x2 > 55 K (h)

5
10
15
20
25
30
35
40
45
50

0.0674
0.0458
0.0555
0.0767
0.0569
0.0418
0.0457
0.0874
0.0580
0.0950

Simulations were also performed in the case that it was attempted to operate the process at
steady-state (instead of in a time-varying fashion) by removing the constraint of Equation (66) and
using the following quadratic stage cost:
Le = x̃ T Q x̃ + u T Ru

(90)

where Q = diag(104 , 100) and R = diag(104 , 10−6 ). In this case, the LMPC and randomized LMPC
implementation strategy with rng(5) drive the closed-loop state to a neighborhood of the origin in
the absence of a cyberattack. If the falsiﬁed state measurement determined in Section 5.2.1 is applied
(without attempting to see whether there may be a more problematic input policy for the tracking
control design), x2 > 55 K in 0.0834 h under the single LMPC and 0.1395 h under the randomized
LMPC strategy with rng(5). This demonstrates that processes operated at steady-state are not immune

183

Mathematics 2018, 6, 169

to cyberattacks when operated under LMPC or a randomized LMPC implementation strategy because
again in this case, the value of x (tk ) becomes decoupled from the input being applied. In a coupled
nonlinear system, this may result in state trajectories that do not drive the (actual) closed-loop state to
the origin.
Remark 9. The last result concerning steady-state operation indicates that the difﬁculties with the randomized
LMPC design with respect to Deﬁnition 4 hold regardless of whether δ in Equations (61)–(67) is ﬁxed at 0 or 1,
as the issue does not stem from whether the controller is attempting to drive the state predictions it is making
toward the steady-state through the inputs it computes or whether it is attempting to operate the process in a
time-varying fashion, but rather stems from the disconnect between what the controller thinks it is achieving and
what it is actually achieving due to the falsiﬁed state measurements. This also indicates that having the inputs
computed by the different potential controllers be signiﬁcantly different from one another to create signiﬁcant
randomness in what input would be applied to the process may help in some cases (particularly if it sometimes
reverses the direction in which V1 changes), but it cannot address the input-state disconnect unless the manner
in which random control laws are selected or generated can be proven to cause Deﬁnition 4 to be met. The fact
that an allowable input policy exists that can cause problems means that even random attack strategies may pose
a problem. Therefore, while a cyberattacker who cannot afford any delay in an attack might be deterred by the
randomized LMPC implementation strategy, it is unlikely that this policy would provide a sufﬁcient barrier
to attacks.
5.3.3. Creating Unpredictable Controller Outputs: Other Types of Randomness in MPC Design
There are many other techniques besides the randomized LMPC design of the prior sections
which could be used to create randomness in control selection/design. For example, the closed-loop
stability proofs for LMPC in [60] are independent of the objective function; therefore, one method for
introducing randomness in the operation of the process of Equation (1) under LMPC without losing
closed-loop stability during normal operation would be to make random modiﬁcations to the objective
function of Equations (14)–(20) at each sampling time by adding penalty terms which change/are
randomly generated at every sampling time (e.g., in some sampling periods they are zero, in some
sampling periods they may penalize the difference between the input values from randomly selected
values within the input bounds). The LMPC could also seek to generate input policies that create
signiﬁcant input variation over time by using penalty terms in the objective function on the similarity
between the input trajectory computed at tk and that applied at tk−1 (through, for example, terms such
as ∑im=1 (ui (tk ) − ui (tk−1 ))2 subtracted from the stage cost to minimize the objective function more
strongly if the difference between the inputs is greater between two sampling periods; this is not a
randomly generated penalty but it is one that can differ between sampling times as u(tk−1 ) can be
different at each sampling time). A potential disadvantage of this approach, however, is that it causes
other terms in the objective function, which are chosen to be meaningful with respect to operating
objectives such as proﬁt or steady-state tracking, to compete with randomly generated terms.
Another idea for creating randomness within the control design that does not impact the objective
function (and therefore does not require the difﬁcult task of determining an appropriate tuning
that can trade off meaningful terms against randomly generated terms, as in the policies of the
prior paragraph) would be to randomly generate constraints for an MPC at every sampling time.
For example, the state constraint of Equation (17) might be modiﬁed to become x̃ (t) ∈ X̃, t ∈ [tk , tk+ N ),
where X̃ is a state-space region that is randomly generated at every sampling time (but X̃ ⊂ X to
ensure that the modiﬁed state constraint maintains the closed-loop state predictions in X). As an
example, consider that x̃ (t) ∈ X represents a state constraint of the form xmin ≤ x̃ (t) ≤ xmax ,
t ∈ [tk , tk+ N ). A constraint of the form x̃ (t) ∈ X̃ might require that at every sampling time, xrand,min ≤
x̃ (t) ≤ xrand,max , where xrand,min and xrand,max are two randomly selected real numbers (at every
sampling time) with xrand,min ≥ xmin , xrand,max ≤ xmax , and xrand,min ≤ xrand,max . However, these
modiﬁed state constraints are hard constraints that are not guaranteed to be satisﬁed throughout

184

Mathematics 2018, 6, 169

Ωρ1 (x̃ ∈ X can be guaranteed to be satisﬁed by deﬁning Ωρ1 to be in X, but it is not guaranteed
that x̃ can be maintained in randomly generated subsets of X that may only constitute subsets of
the stability region that are not necessarily related to V1 and therefore are not necessarily forward
invariant). Therefore, the randomly generated hard constraints may impact feasibility of an LMPC.
Methods for handling this could include reformulating the hard constraints as soft constraints in the
objective function when the problem is determined to be infeasible at tk , or generating multiple (i.e.,
up to p̄) random subsets of X at tk , and up to p̄ LMPC’s using these different subsets to form the
state constraints of Equation (17), and then attempting to solve these LMPC’s in order from 1 to p̄ to
see whether one is feasible and can be used to compute a control action before applying a backup
control law that guarantees closed-loop stability such as h1 ( x ). Closed-loop stability of the system of
Equation (1) under the LMPC of Equations (14)–(20) with Equation (17) modiﬁed to allow for random
state constraint generation would follow from the results in [60] if feasibility is maintained. One could
also consider other methods for developing randomly generated state constraints, such as exploring
the potential for randomly generating constraints on regions for the closed-loop state to avoid [9–11]
at each sampling time. However, even if optimization-based control designs with randomly generated
constraints are feasible at a sampling time, they may also have disadvantages with respect to proﬁt.
For example, if the objective function is related to process economics and subsets of the allowable
operating region are disallowed by hard constraints, the inputs seek to optimize the economics with a
more restricted constraint set than is actually available, which would be expected to negatively impact
proﬁts. This is because the goal of the randomization would be to cause the controller to compute
inputs which it would not normally compute if the constraint set was less restrictive in order to prevent
an attacker from mapping x (tk ) to an input. If the global optimum of the objective function within
the allowable constraint set is assumed to be achieved with the solution to the controller without
the randomization, then any deviations of the solution from this optimal value for the purpose of
making the input-state measurement mapping difﬁcult to determine would result in a decrease in
proﬁt compared to the optimum condition. If the global optimum is achieved, however, this means
that the randomization is not succeeding in computing inputs which are difﬁcult to map to the state
measurements. Therefore, the premise of the randomized constraint designs would cause a proﬁt
reduction in cases where the economics are being optimized in the objective function (though popular
techniques for solving nonlinear optimization problems (e.g., [83]) may ﬁnd local rather than global
optima, making it less obvious whether the randomization strategy will result in a proﬁt loss compared
to the (local) solution which might be found without the randomization).
The results of the prior sections of this work indicate that cyberattack-deterring control policies
incorporating randomness cannot rely on randomness alone to prevent cyberattacks from being
successful or from being attempted; the inputs computed by any cyberattack-resilient policy according
to Deﬁnition 4 must have a structure that prevents the fact that they are decoupled from the state
measurements from driving the closed-loop state out of a set of safe operating conditions.
5.4. Deterring Sensor Measurement Falsiﬁcation Cyberattacks on Safety: Using Open-Loop Controller Outputs
Whereas the “intuitive” approaches of the prior sections failed to be cyberattack-resilient, in this
section, we show that it may be possible to develop operating policies for which sensor falsiﬁcation
cyberattacks intended to impact process safety cannot be successful. The policy to be examined
is speciﬁc to a subset of the class of systems of Equation (1), speciﬁcally those which have an
open-loop asymptotically stable equilibrium. For clarity of notation in the following, we will denote
the set of nonlinear systems of the form of Equation (1) with an open-loop asymptotically stable
equilibrium as follows:
ẋ = f as ( x, u, w)
(91)

185

Mathematics 2018, 6, 169

where f as is a locally Lipschitz vector function of its arguments and f as (0, 0, 0) = 0. The following
conditions hold for all x ∈ D  ⊂ Rn , where D  is a neighborhood of the origin:
α5 (| x |) ≤ V  ( x ) ≤ α6 (| x |)

(92)

∂V  ( x )
f as ( x, us , 0) ≤ −α7 (| x |)
∂x

(93)

where us = 0 denotes the steady-state input, V  : Rn → R+ is a sufﬁciently smooth positive deﬁnite
Lyapunov function, and the functions α5 , α6 and α7 are of class K. We deﬁne a level set of V 
within D  where x ∈ X as a stability region Ωρ of the nominal system of Equation (91) under us
(Ωρ := { x ∈ X ∩ D  : V  ( x ) ≤ ρ }). In the remaining developments, we assume that V  can be chosen
to be the same as V1 .
5.4.1. Using Open-Loop Controller Outputs: Integration with LMPC
For the system of Equation (91), us itself is a cyberattack-deterring input policy according to
Deﬁnition 4 when x (t0 ) ∈ Ωρ1 ⊂ Ωρ ⊂ X because it drives the closed-loop state to the origin
and is independent of the sensor measurements. However, it does not use feedback of the process
state to impact the speed with which the steady-state is approached. Furthermore, it cannot drive
the closed-loop state off of the steady-state in a fashion that seeks to optimize process economics.
It therefore lacks the desirable properties of feedback controllers for non-attack scenarios, but in the
case of cyberattacks on sensors, it has advantages over feedback control in that it is not dependent on
sensor readings. This indicates that us and feedback controllers complement one another; the former is
beneﬁcial for preventing cyberattack success, and the latter is beneﬁcial for normal operation. Therefore,
in this section, we explore integrating these two types of control in an implementation strategy that,
as will be proven in the next section, is guaranteed under sufﬁcient conditions to maintain closed-loop
stability both in the presence and absence of cyberattacks (i.e., it meets Deﬁnition 4). For developing
this implementation strategy, we again use LMPC because the a priori characterizable region Ωρ1 within
which LMPC maintains the process state during normal operation can be beneﬁcial for developing a
controller implementation strategy that guarantees that Deﬁnition 4 is met (in general, the results of this
work suggest that theory-based control designs may be important for allowing cyberattack-resilient
control designs to be developed, indicating that an important direction of future research may be
making theory-based control designs easier to use in an industrial setting). The implementation
strategy proposed is as follows:
Step 1. Given x (t0 ) ∈ Ωρ1 ⊂ Ωρ ⊂ X, apply us for N1 sampling periods. Go to Step 2.
Step 2. Utilize an LMPC with the form in Equations (14)–(20) to control the process of Equation (91)
for N2 sampling periods. Go to Step 3.
Step 3. Apply us for N1 sampling periods. Return to Step 2.
Characterizations of N1 and N2 that allow closed-loop stability of the system of Equation (91) to
be guaranteed, even in the presence of cyberattacks and sufﬁciently small disturbances, under this
implementation strategy are presented in the next section.
Stability Analysis of Open-Loop Control Integrated with LMPC
This section presents the conditions under which closed-loop stability of the system of
Equation (91) under the implementation strategy in Section 5.4.1 is guaranteed in both the presence
of and absence of a cyberattack that provides false state measurements x f ∈ Ωρ1 at every sampling
time (where the notation x f represents a falsiﬁed sensor signal that in general can be different at each
sampling time). The results are presented in a theorem that relies on the following proposition.

186

Mathematics 2018, 6, 169

Proposition 4. Ref. [62] Consider us for the system of Equation (91) such that the inequalities of Equations (92)

 >
and (93) are met with Lyapunov function V  (·) = V1 (·). If ρ > ρmin
> ρs , and θ > 0, Δ > 0, and w
0 satisfy:

− α7 (α6−1 (ρs )) + Lw,1 θ ≤ −w
/Δ
(94)
then ∀ x (tk ) ∈ Ωρ /Ωρs ,

V  ( x (t)) ≤ V  ( x (tk ))

for t ∈ [tk , tk+1 ) and x (t) ∈ Ωρ . Furthermore, if


ρmin

(95)

is deﬁned as follows:


= max{V  ( x (t + Δ)) : V  ( x (t)) ≤ ρs }
ρmin

then the closed-loop state is ultimately bounded in Ωρ

min

in the sense that:

lim sup | x (t)| ∈ Ωρ

min

t→∞

(96)

(97)

Theorem 2. Consider the system of Equation (91) under the implementation strategy of Section 5.4.1 based
on controllers us and h1 ( x ) that satisfy Equations (92) and (93) and (2)–(5), respectively, and consider
that the conditions in Proposition 4 hold, as well as those in Proposition 3 and Equation (78) with i = 1.
If x (t0 ) ∈ Ωρ1 , Ωρs ⊂ Ωρ

min

and N2 = 

 )
(ρ1 −ρmin
,
(α4,1 (α5−1 (ρ1 ))) MΔ

⊂ Ωρe,1 ⊂ Ωρ1 ⊂ Ωρ , V  (·) = V1 (·), N ≥ 1, N1 = 

 )
(ρ1 −ρmin
,

w

then the state x (t) of the closed-loop system is always bounded in Ωρ1 , ∀ t ≥ 0,

regardless of the value of x̃ (tk ) in Equation (16), ∀ k ≥ 0, if x̃ (tk ) ∈ Ωρ1 when Equations (14)–(20) are used at
a sampling time for computing the control action applied to the process according to the implementation strategy
in Section 5.4.1.
Proof. The proof consists of four parts. In the ﬁrst part, feasibility of the LMPC of Equations (14)–(20)
at every sampling time in which it is used according to the implementation strategy in Section 5.4.1 will
be demonstrated, regardless of whether the state measurements provided to the LMPC in Equation (16)
are accurate or falsiﬁed, if they are within Ωρ1 . The second part will demonstrate that for any
x (tk ) ∈ Ωρ1 , x (tk+ N1 ) ∈ Ωρ when us is used for N1 sampling periods. The third part demonstrates
min
that if x (tk ) ∈ Ωρ and the LMPC of Equations (14)–(20) is used for the next N2 sampling periods to
min
control the system of Equation (91) with potentially falsiﬁed state measurements, then x (tk+ N2 ) ∈ Ωρ1 .
The fourth part combines the results of the prior three parts to demonstrate that the implementation
strategy of Section 5.4.1 guarantees that the closed-loop state remains in Ωρ1 at all times, whether or
not cyberattacks which provide falsiﬁed state measurements occur.
Part 1. When the input us is applied to the system of Equation (91) according to the implementation
strategy in Section 5.4.1, no optimization problem is solved, and therefore there is no feasibility issue
with using us at tk . However, if the LMPC of Equations (14)–(20) is used, then if the state measurement
x̃ (tk ) ∈ Ωρ1 (regardless of whether x̃ (tk ) equals the true state measurement x (tk ) or a falsiﬁed state
measurement x f (tk ) ∈ Ωρ1 ), h1 ( x̃ (tq )), q = k, . . . , k + N − 1, t ∈ [tq , tq+1 ), is a feasible solution to all
constraints of the optimization problem when x̃ (tk ) ∈ Ωρe,1 or when x (tk ) ∈ Ωρ /Ωρe,1 for the reasons
noted in the proof of Part 1 of Theorem 1. While x f can always be chosen to be in Ωρ1 to guarantee
feasibility when the LMPC is used in computing control actions, the proof that x (tk ) is always in
Ωρ1 when the LMPC is used so that the feasibility guarantees at each sampling time hold when no
cyberattack occurs at tk will be developed in subsequent parts of this proof.

187

Mathematics 2018, 6, 169

Part 2. To demonstrate that for any x (tk ) ∈ Ωρ1 , x (tk+ N1 ) ∈ Ωρ , we look at the change in the
min
value of V  along the closed-loop state trajectory of the system of Equation (91) as follows:
V̇  ( x (t)) =

∂V  ( x (t))
∂V  ( x (t))
∂V  ( x (t))
f as ( x (t), us , w(t)) +
f as ( x (t), us , 0) −
f as ( x (t), us , 0)
∂x
∂x
∂x
 

 ∂V ( x (t))

∂V  ( x (t))
f as ( x (t), us , w) −
f as ( x (t), us , 0)
≤ −α7 (| x (t)|) + 
∂x
∂x

(98)

≤ −α7 (| x (t)|) + Lw,1 θ
which follows from Equations (93) and (7) (since V  = V1 and systems of the form of
Equation (91) are members of the class of Equation (1)), and the bound on w. If we consider that
x (tk ) ∈ Ωρ1 /Ωρs , then from Equation (92), α6−1 (ρs ) ≤ | x (t)| such that the upper bound on V̇  ( x (t)) is
determined as follows:
(99)
V̇  ( x (t)) ≤ −α7 (α6−1 (ρs )) + Lw,1 θ
If Equation (94) holds, then

dV 
dt

 /Δ. Integrating this equation gives:
≤ − w

V  ( x (t)) ≤ V  ( x (tk )) −

 (t − t )
w
k
Δ

(100)

for t ≥ tk while x (t) ∈ Ωρ1 /Ωρs .
We are interested in the amount of time that it would take to drive the closed-loop state from any
x (tk ) ∈ Ωρ1 into Ωρ using us . In a worst case, V  ( x (tk )) = V1 ( x (tk )) = ρ1 , and we would like V  at
min
 . From Equation (100), the worst-case time t
t to be ρmin
WC that it would take to drive x ( tk ) from the
(ρ −ρ

)Δ

boundary of Ωρ1 to the boundary of Ωρ using us is tWC = 1 min . However, tWC may not be an
min
w
integer multiple of a sampling period; to guarantee that at least the worst-case amount of time passes
tWC
after tk during which us is applied to the process, N1 =  Δ  is the number of sampling periods
throughout which us must be applied to guarantee that for any x (tk ) ∈ Ωρ1 , x (tk+ N1 ) ∈ Ωρ .
min
Part 3. We next demonstrate that if x (tk ) ∈ Ωρ , it will not exit Ωρ1 within N2 sampling periods
min
under any input within the input bounds (i.e., under any input which the LMPC of Equations (14)–(20)
may compute in the presence or absence of cyberattacks). Speciﬁcally, the following inequality holds
for the time derivative of V  along the closed-loop state trajectory of the system of Equation (91) for
any x ∈ Ωρ1 , u ∈ U, and w ∈ W:
 

 ∂V ( x )

∂V  ( x )
f as ( x, u, w) ≤ 
f as ( x, u, w)
∂x
∂x

 
 ∂V ( x ) 
 | f as ( x, u, w)|
≤ 
∂x 

(101)

≤ α4,1 (| x |) M
≤ α4,1 (α5−1 (ρ1 )) M
which follows from Equations (4) and (8) ( f as is a member of the class of systems of Equation (1)),
Equation (92), and V  = V1 . The result of Equation (101) can be integrated to give:
V  ( x (t)) ≤ V  ( x (tk )) + α4,1 (α5−1 (ρ1 )) M(t − tk )

(102)

for t ≥ tk .
To ﬁnd the shortest possible time that it would take for a sequence of inputs u(t) ∈ U applied in
sample-and-hold to drive the closed-loop state to the border of Ωρ1 , we compute t in Equation (102) if

V  ( x (tk )) = ρmin
and V  ( x (tST )) = ρ1 , where tST denotes the ﬁrst possible time at which V  ( x (t)) = ρ1 .
This gives a shortest time of tST =

 )
(ρ1 −ρmin
.
(α4,1 (α5−1 (ρ1 ))) M

However, this may not be an integer multiple of

188

Mathematics 2018, 6, 169

a sampling period, so that the maximum number of sampling periods over which the LMPC of
Equations (14)–(20) can be used in the implementation strategy of Section 5.4.1 while guaranteeing
closed-loop stability even in the presence of cyberattacks on the sensor measurements is N2 =  tST
Δ .
Part 4. Finally, we prove the results of Theorem 2 by combining the results of the prior parts of
the proof. According to the implementation strategy of Section 5.4.1, for any x (t0 ) ∈ Ωρ1 , us will be
applied for N1 sampling periods. From Part 2 of this proof, this will drive the closed-loop state into
Ωρ by tk+ N1 and also, from Proposition 4, will maintain the closed-loop state in Ωρ1 at all times from
min
Equations (95)–(97). Subsequently, the LMPC of Equations (14)–(20) may be used for N2 sampling
periods. In this case, the closed-loop state will also remain bounded within Ωρ1 from Part 3 of this
proof. Then, us will be used again for N1 sampling periods, and will again maintain the closed-loop
state in Ωρ1 . This sequence of steps will then continue according to the implementation strategy of
Section 5.4.1 such that the closed-loop state will be maintained within Ωρ1 at all times.
Remark 10. Minimal assumptions are made on the trajectory of x f over time in the above proof (only that
x f (tk ) ∈ Ωρ1 , ∀tk ≥ 0). Therefore, the applied policy can handle attacks where x f changes at each sampling
time, regardless of the manner in which it changes as long as the assumptions are met (e.g., there is no need for
separate implementation strategies for different types of sensor attack policies such as surge, bias, geometric,
or replay attacks [20,84]). us is also an attack-resistant policy for denial-of-service attacks [46] of any length,
and the implementation strategy can handle such attacks if an additional statement of what the LMPC should do
when it is not provided a state measurement at tk is added (the proof of Theorem 2 indicates that the controller
could choose any u ∈ U if no sensor signal is provided to it at tk when the LMPC should be used and if the
implementation strategy is followed, closed-loop stability is maintained). Furthermore, the implementation
strategy can also be used with closed-loop stability guarantees if x f is received at some sampling times and x (tk )
at others (as both meet the requirement of Theorem 2 that the state measurement must be in Ωρ1 ). The results
also hold if only a partially falsiﬁed state measurement is received (i.e., only some components of the state vector
are falsiﬁed due to only some sensors being compromised), as long as the full state measurement vector received
by the controller at every sampling time is in Ωρ1 (if not, this may indicate that a cyberattack may be occurring
and could trigger the use of us only so that closed-loop stability is still guaranteed but without the potential
beneﬁts of trading it off with a feedback controller).
5.4.2. Problems with Integrating Open-Loop Control and LMPC
Despite the guarantees which are developed in the prior section for open-loop control integrated
with LMPC, the fact that open-loop inputs are required and that both N1 and N2 depend on the process
 and α , α , and M indicates that this method has fundamental
dynamics through, for example, w
4,1 5
limitations based on the process time constants. The open-loop policy removes the beneﬁts of feedback
control in terms of speeding up the process response. The values of N1 and N2 may be such that
the process would essentially always have to operate in open-loop (i.e., N1 is large and N2 is zero)
to guarantee that no cyberattack can impact closed-loop stability. Open-loop control is not a viable
alternative for feedback control as an operating strategy at all times.
Another problem that may occur with the proposed approach is that the region Ωρ within
which us is guaranteed to drive the closed-loop state to the steady-state may be very small. V  might
be adjusted to try to increase the size of Ωρ , but it is not guaranteed that the input us can drive
the closed-loop state to the steady-state from a large region around the steady-state, as only local
asymptotic stability is implied by Equations (92) and (93). Therefore, the fact that Ωρ is small may
be a fundamental limitation of the system for any V  . Because the results of Theorem 2 require
Ωρ1 ⊂ Ωρ , a small Ωρ means that Ωρ1 must be small as well, which can signiﬁcantly limit the
potential of the LMPC to enforce a policy that is not steady-state operation or that is economically
beneﬁcial compared to steady-state operation. If steady-state operation is desired, a small Ωρ1 means
that closed-loop stability is only guaranteed in a small region around the steady-state, requiring
small sampling times and small disturbances to maintain the closed-loop state in the resulting small

189

Mathematics 2018, 6, 169

Ωρ ⊂ Ωρ ⊂ Ωρ1 ⊂ Ωρ per Equations (94) and (74), which may not be practical for certain processes
min
1
with larger disturbances or larger computation time requirements that restrict the minimum size
of Δ. For this reason as well, the proposed technique, despite the guarantees of Theorem 2, is not
likely to pose a viable solution to the cyberattack problem. Furthermore, the approach only holds
for an open-loop stable steady-state; this is overly restrictive as there are many cases where it may
be desirable to operate around an open-loop unstable steady-state. It may be necessary to utilize
additional assumptions (e.g., that there is an alternative way to obtain a state measurement that is
known to be accurate at certain times) to develop cyberattack-resilient controllers in general that meet
Deﬁnition 4.
5.5. Deterring Sensor Measurement Falsiﬁcation Cyberattacks on Safety: Perspectives
The prior sections demonstrated that due to the fundamental nonlinear dynamics considerations
which deﬁne cyberattacks, concepts for deterring cyberattacks on chemical process control systems
that at ﬁrst seem intuitive may not be proper solutions to the problem. However, the characteristics of
proper solutions can be explicitly deﬁned mathematically. Some policies which meet the mathematical
deﬁnition, however, such as the policy developed in Section 5.4, may be undesirable for some processes
under normal operation. Though policies like that in Section 5.4 might be considered to be a reasonable
policy if a cyberattack is detected (i.e., it becomes reasonable to give up the beneﬁts of feedback control),
the difﬁculty of predicting the responses of nonlinear systems to changes in the process inputs a priori
makes it difﬁcult to assess all cyberattack possibilities during the design of the detection policies
to ensure that detection policies will not miss any attacks; therefore, there is value in continuing
to search for control laws/implementation strategies which are resilient to any cyberattack of a
certain type. The results of the prior sections suggest that cyberattack-resilient control designs may
need to incorporate special features compared to techniques such as LMPC that do not account for
cyberattack-resilience, potentially making them more conservative than control designs which do
not account for cyberattacks in the sense that they may not achieve instantaneous proﬁts as large
as those with alternative controllers; however, a company could assess the potential for proﬁt loss
over time with a cyberattack-resilient controller compared to potential reductions in information
technology-related security costs and the potential economic and human costs of accidents without
cyberattack-resilient control when selecting a controller for a process.
The control designs presented in Sections 5.2–5.4 for investigating the nature of cyberattacks and of
cyberattack-resilient control demonstrated several principles that can be used to guide future research.
The design in Section 5.2 led to the presentation of a potential cyberattack-development methodology
that uses optimization to attempt to systematically determine attack policies in terms of both inputs
and false sensor measurements. Though only one potential computational technique for cyberattack
development was explored, it suggests that cyberattack development for non-intuitive situations,
such as large-scale processes under control laws with many constraints, may be able to be approached
computationally, rather than requiring a trial-and-error approach, which is critical for enabling research
on cyberattack-resilient control designs for the process industries to include simulation case studies.
The developments in Section 5.3 demonstrate that randomness that impacts process operation may be
able to be achieved with closed-loop stability guarantees as part of a cyberattack prevention policy,
and therefore can be considered in developing future designs geared toward addressing Deﬁnition 4.
Finally, in Section 5.4, we demonstrated that despite the strength of the conditions required to meet
Deﬁnition 4, it may be possible to develop control laws with their implementation policies that do
satisfy the deﬁnition, particularly by relying on the implementation strategy or potentially additional
assumptions on the process dynamics or instrumentation setup/accurate measurement availability.
For example, though it is not guaranteed in the strategy presented in Section 5.4 that if V1 ( x (t0 )) = ρ1 ,
there is no input that could be computed by the LMPC of Equations (14)–(20) for any provided false
state measurement in Ωρ1 , the implementation strategy that trades off the use of LMPC with the
open-loop input policy prevents the state from ever reaching a condition where closed-loop stability

190

Mathematics 2018, 6, 169

would be compromised in the face of a cyberattack. It may also be beneﬁcial to consider control designs
such as LMPC that are based on theory that allow rigorous guarantees to be made even in the presence
of disturbances, particularly from a set of initial conditions that can be characterized a priori, since
cyberattack-resilience according to Deﬁnition 4 depends on the allowable set of initial conditions for
the system.
A ﬁnal outcome of the results in this work is that they indicate the utility of the recent theoretical
developments resulting from the study of the stability properties of economic model predictive
control (EMPC) [85–90], which have included notions of stability developed for processes operated
in a time-varying fashion, in studying cybersecurity even for processes that would be operated
at steady-state without cyberattacks. Closed-loop stability when analyzing cyberattacks requires
characterizing the boundedness of the closed-loop state in operating regions in state-space under the
attack (in a sense, the state is being manipulated in a time-varying fashion by the attacker) and not
necessarily driving the state to the steady-state under the attack, as the attacker’s goal for a process
typically operated at steady-state would involve moving it off of that steady-state. As we consider
more complex process [91,92] and control designs (in the sense of greater coupling between process
states due to process designs and controllers intended to improve efﬁciency and enhance economics),
it may become more difﬁcult to predict all the potential methods by which a cyberattacker may attack
a plant, enhancing the need for cyberattack-resilient systems by process and control design.
6. Conclusions
This work developed a comprehensive nonlinear systems characterization of cyberattacks of
different kinds on chemical process control systems, which indicated that cyberattacks on control
systems in the chemical process industries are ﬁrst and foremost a chemical engineering problem
which should be considered during process and control design. We subsequently focused on a speciﬁc
type of cyberattack in which sensor measurements to feedback controllers are compromised with
the goal of impacting process safety and discussed the nonlinear systems deﬁnition of a process
system resilient to these types of cyberattacks. We used three control designs to explore the concept of
cyberattack-resilience against sensor measurement attacks geared toward impacting process safety
and to explore the properties required of controllers for making cyberattack-resilience guarantees.
The results indicate that a control design/implementation strategy which can be effective at deterring
sensor measurement falsiﬁcation-based cyberattacks geared toward impacting process safety should:
(1) maintain closed-loop stability under normal operating conditions and also guarantee closed-loop
stability when inputs that have no relationship to the state measurement are applied to the process;
and (2) result in a desirable operating policy (i.e., not open-loop) during normal operation (i.e., in the
absence of cyberattacks).
Future work will explore cyberattack-resilient control design for larger-scale, more realistic and
complex chemical process models. It will also seek to use the insights gained on cyberattack-resilient
control for nonlinear systems as developed in this work to create cyberattack-resilient controllers, and to
more thoroughly investigate a range of MPC designs which handle disturbances or measurement noise
in control designs such as MPC (e.g., [93–97]) in the context of cyberattack-resilience. All future work
will consider that a deﬁning feature of cyberattacks is that they remove the association between the
input physically implemented on the process and the process state, attempting to make the controller a
vehicle for computing a problematic process input (i.e., misusing the controller) rather than using the
controller formulation to maintain closed-loop stability in the case that state measurements are falsiﬁed.
Funding: Financial support from Wayne State University is gratefully acknowledged.
Conﬂicts of Interest: The author declares no conﬂict of interest.

191

Mathematics 2018, 6, 169

References
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.

17.

18.

19.
20.

21.
22.
23.
24.

Leveson, N.G.; Stephanopoulos, G. A system-theoretic, control-inspired view and approach to process safety.
AIChE J. 2014, 60, 2–14.
Mannan, M.S.; Sachdeva, S.; Chen, H.; Reyes-Valdes, O.; Liu, Y.; Laboureur, D.M. Trends and challenges in
process safety. AIChE J. 2015, 61, 3558–3569.
Venkatasubramanian, V. Systemic failures: Challenges and opportunities in risk management in complex
systems. AIChE J. 2011, 57, 2–9.
Albalawi, F.; Durand, H.; Christoﬁdes, P.D. Process operational safety via model predictive control: Recent
results and future research directions. Comput. Chem. Eng. 2018, 114, 171–190.
Albalawi, F.; Durand, H.; Alanqar, A.; Christoﬁdes, P.D. Achieving operational process safety via model
predictive control. J. Loss Prev. Process Ind. 2018, 53, 74–88.
Albalawi, F.; Durand, H.; Christoﬁdes, P.D. Process operational safety using model predictive control based
on a process Safeness Index. Comput. Chem. Eng. 2017, 104, 76–88.
Zhang, Z.; Wu, Z.; Durand, H.; Albalawi, F.; Christoﬁdes, P.D. On integration of feedback control and safety
systems: Analyzing two chemical process applications. Chem. Eng. Res. Des. 2018, 132, 616–626.
Carson, J.M.; Açıkmeşe, B.; Murray, R.M.; MacMartin, D.G. A robust model predictive control algorithm
augmented with a reactive safety mode. Automatica 2013, 49, 1251–1260.
Wu, Z.; Durand, H.; Christoﬁdes, P.D. Safe economic model predictive control of nonlinear systems.
Syst. Control Lett. 2018, 118, 69–76.
Wieland, P.; Allgöwer, F. Constructive Safety Using Control Barrier Functions. IFAC Proc. Vol. 2007,
40, 462–467.
Braun, P.; Kellett, C.M. On (the existence of) Control Lyapunov Barrier Functions. 2017. Available online:
https://epub.uni-bayreuth.de/3522/ (accessed on 10 August 2018).
Shahnazari, H.; Mhaskar, P. Distributed fault diagnosis for networked nonlinear uncertain systems. Comput.
Chem. Eng. 2018, 115, 22–33.
Shahnazari, H.; Mhaskar, P. Actuator and sensor fault detection and isolation for nonlinear systems subject
to uncertainty. Int. J. Robust Nonlinear Control 2018, 28, 1996–2013.
Yin, X.; Liu, J. Distributed output-feedback fault detection and isolation of cascade process networks.
AIChE J. 2017, 63, 4329–4342.
Alanqar, A.; Durand, H.; Christoﬁdes, P.D. Fault-Tolerant Economic Model Predictive Control Using
Error-Triggered Online Model Identiﬁcation. Ind. Eng. Chem. Res. 2017, 56, 5652–5667.
Demetriou, M.A.; Armaou, A. Dynamic online nonlinear robust detection and accommodation of incipient
component faults for nonlinear dissipative distributed processes. Int. J. Robust Nonlinear Control 2012,
22, 3–23.
Xue, D.; El-Farra, N.H. Resource-aware fault accommodation in spatially-distributed processes with
sampled-data networked control systems.
In Proceedings of the American Control Conference,
Seattle, WA, USA, 24–26 May 2017; pp. 1809–1814.
Xue, D.; El-Farra, N.H. Actuator fault-tolerant control of networked distributed processes with
event-triggered sensor-controller communication. In Proceedings of the American Control Conference,
Boston, MA, USA, 6–8 July 2016; pp. 1661–1666.
Smith, R.E. Elementary Information Security; Jones & Bartlett Learning, LLC: Burlington, MA, USA, 2016.
Cárdenas, A.A.; Amin, S.; Lin, Z.S.; Huang, Y.L.; Huang, C.Y.; Sastry, S. Attacks against process control
systems: Risk assessment, detection, and response. In Proceedings of the ACM Asia Conference on Computer
& Communications Security, Hong Kong, China, 22–24 March 2011.
Greenberg, A. How an Entire Nation Became Russia’s Test Lab for Cyberwar. 2017. Available online:
https://www.wired.com/story/russian-hackers-attack-ukraine/ (accessed on 11 July 2018).
Clark, R.M.; Panguluri, S.; Nelson, T.D.; Wyman, R.P. Protecting drinking water utilities from cyberthreats.
J. Am. Water Works Assoc. 2017, 109, 50–58.
Langner, R. Stuxnet: Dissecting a Cyberwarfare Weapon. IEEE Secur. Priv. 2011, 9, 49–51.
Perlroth, N.; Krauss, C. A Cyberattack in Saudi Arabia Had a Deadly Goal. Experts Fear Another Try. 2018.
Available online: https://www.nytimes.com/2018/03/15/technology/saudi-arabia-hacks-cyberattacks.
html (accessed on 11 March 2018).

192

Mathematics 2018, 6, 169

25.
26.

27.
28.
29.
30.
31.
32.
33.
34.
35.

36.

37.

38.

39.
40.
41.
42.

43.

44.
45.
46.

47.

Groll, E. Cyberattack Targets Safety System at Saudi Aramco. 2017. Available online: https://foreignpolicy.
com/2017/12/21/cyber-attack-targets-safety-system-at-saudi-aramco/ (accessed on 11 July 2018).
Liu, Y.; Sarabi, A.; Zhang, J.; Naghizadeh, P.; Karir, M.; Bailey, M.; Liu, M. Cloudy with a Chance
of Breach: Forecasting Cyber Security Incidents. In Proceedings of the USENIX Security Symposium,
Washington, DC, USA, 12–14 August 2015; pp. 1009–1024.
Solomon, M.G.; Kim, D.; Carrell, J.L. Fundamentals of Communications and Networking; Jones & Bartlett
Publishers: Burlington, MA, USA, 2014.
McLaughlin, S.; Konstantinou, C.; Wang, X.; Davi, L.; Sadeghi, A.R.; Maniatakos, M.; Karri, R.
The Cybersecurity Landscape in Industrial Control Systems. Proc. IEEE 2016, 104, 1039–1057.
Hull, J.; Khurana, H.; Markham, T.; Staggs, K. Staying in control: Cybersecurity and the modern electric grid.
IEEE Power Energy Mag. 2012, 10, 41–48.
Ginter, A. Unidirectional Security Gateways: Stronger than Firewalls. In Proceedings of the ICALEPCS, San
Francisco, CA, USA, 6–11 October 2013; pp. 1412–1414.
Khorrami, F.; Krishnamurthy, P.; Karri, R. Cybersecurity for Control Systems: A Process-Aware Perspective.
IEEE Des. Test 2016, 33, 75–83.
He, D.; Chan, S.; Zhang, Y.; Wu, C.; Wang, B. How Effective Are the Prevailing Attack-Defense Models for
Cybersecurity Anyway? IEEE Intel. Syst. 2014, 29, 14–21.
Ten, C.W.; Liu, C.C.; Manimaran, G. Vulnerability Assessment of Cybersecurity for SCADA Systems.
IEEE Trans. Power Syst. 2008, 23, 1836–1846.
Pang, Z.H.; Liu, G.P. Design and implementation of secure networked predictive control systems under
deception attacks. IEEE Trans. Control Syst. Technol. 2012, 20, 1334–1342.
Rieger, C.; Zhu, Q.; Başar, T. Agent-based cyber control strategy design for resilient control systems:
Concepts, architecture and methodologies. In Proceedings of the 5th International Symposium on Resilient
Control Systems, Salt Lake City, UT, USA, 14–16 August 2012; pp. 40–47.
Chavez, A.R.; Stout, W.M.S.; Peisert, S. Techniques for the dynamic randomization of network attributes.
In Proceedings of the IEEE International Carnahan Conference on Security Technology, Taipei, Taiwan,
21–24 September 2015; pp. 1–6.
Linda, O.; Manic, M.; McQueen, M. Improving control system cyber-state awareness using known
secure sensor measurements. In Critical Information Infrastructures Security. CIRITIS 2012; Hämmerli, B.M.,
Kalstad Svendsen, N., Lopez, J., Eds.; Lecture Notes in Computer Science; Springer: Berlin/Heidelberg,
Germany, 2013; Volume 7722, pp. 46–58.
Plosz, S.; Farshad, A.; Tauber, M.; Lesjak, C.; Ruprechter, T.; Pereira, N. Security vulnerabilities and risks
in industrial usage of wireless communication. In Proceedings of the IEEE International Conference on
Emerging Technology and Factory Automation, Barcelona, Spain, 6–19 September 2014; pp. 1–8.
Lopez, J.; Zhou, J. (Eds.) Wireless Sensor Network Security; IOS Press: Amsterdam, The Netherlands, 2008.
Xu, L.D.; He, W.; Li, S. Internet of Things in Industries: A Survey. IEEE Trans. Ind. Inform. 2014, 10, 2233–2243.
Almorsy, M.; Grundy, J.; Müller, I. An analysis of the cloud computing security problem. arXiv 2016,
arXiv:1609.01107.
Rieger, C.G. Notional examples and benchmark aspects of a resilient control system. In Proceedings of the
2010 3rd International Symposium on Resilient Control Systems, Idaho Falls, ID, USA, 10–12 August 2010;
pp. 64–71.
Rieger, C.G.; Gertman, D.I.; McQueen, M.A. Resilient control systems: Next generation design research.
In Proceedings of the 2009 2nd Conference on Human System Interactions, Catania, Italy, 21–23 May 2009;
pp. 632–636.
Wakaiki, M.; Tabuada, P.; Hespanha, J.P. Supervisory control of discrete-event systems under attacks.
arXiv 2017, arXiv:1701.00881.
Bopardikar, S.D.; Speranzon, A.; Hespanha, J.P. An H-inﬁnity approach to stealth-resilient control design.
In Proceedings of the 2016 Resilience Week, Chicago, IL, USA, 16–18 August 2016; pp. 56–61.
Amin, S.; Cárdenas, A.A.; Sastry, S.S. Safe and secure networked control systems under denial-of-service
attacks. In Hybrid Systems: Computation and Control. HSCC 2009; Majumdar, R., Tabuada, P., Eds.; Lecture
Notes in Computer Science; Springer: Berlin/Heidelberg, Germany, 2009; Volume 5469, pp. 31–45.
Fawzi, H.; Tabuada, P.; Diggavi, S. Secure Estimation and Control for Cyber-Physical Systems Under
Adversarial Attacks. IEEE Trans. Autom. Control 2014, 59, 1454–1467.
193

Mathematics 2018, 6, 169

48.

49.

50.

51.

52.

53.
54.
55.

56.

57.
58.
59.
60.
61.
62.
63.

64.
65.
66.
67.
68.
69.
70.

Zhu, Q.; Başar, T. Game-Theoretic Methods for Robustness, Security, and Resilience of Cyberphysical Control
Systems: Games-in-Games Principle for Optimal Cross-Layer Resilient Control Systems. IEEE Control Syst.
2015, 35, 46–65.
Zhu, Q.; Başar, T. Robust and resilient control design for cyber-physical systems with an application to
power systems. In Proceedings of the 2011 50th IEEE Conference on Decision and Control and European
Control Conference, Orlando, FL, USA, 12–15 December 2011; pp. 4066–4071.
Zhu, Q.; Bushnell, L.; Başar, T. Resilient distributed control of multi-agent cyber-physical systems. In Control
of Cyber-Physical Systems; Tarraf, D., Ed.; Lecture Notes in Control and Information Sciences; Springer:
Berlin/Heidelberg, Germany, 2013; Volume 449, pp. 301–316.
Zonouz, S.; Rogers, K.M.; Berthier, R.; Bobba, R.B.; Sanders, W.H.; Overbye, T.J. SCPSE: Security-Oriented
Cyber-Physical State Estimation for Power Grid Critical Infrastructures. IEEE Trans. Smart Grid 2012,
3, 1790–1799.
Zheng, S.; Jiang, T.; Baras, J.S. Robust State Estimation under False Data Injection in Distributed Sensor
Networks. In Proceedings of the 2010 IEEE Global Telecommunications Conference, Miami, FL, USA, 6–10
December 2010; pp. 1–5.
Pasqualetti, F.; Dorﬂer, F.; Bullo, F. Control-Theoretic Methods for Cyberphysical Security: Geometric
Principles for Optimal Cross-Layer Resilient Control Systems. IEEE Control Syst. 2015, 35, 110–127.
Pasqualetti, F.; Dörﬂer, F.; Bullo, F. Attack Detection and Identiﬁcation in Cyber-Physical Systems. IEEE Trans.
Autom. Control 2013, 58, 2715–2729.
McLaughlin, S. CPS: Stateful policy enforcement for control system device usage. In Proceedings of the
29th Annual Computer Security Applications Conference, New Orleans, LA, USA, 9–13 December 2013;
pp. 109–118.
Melin, A.; Kisner, R.; Fugate, D.; McIntyre, T. Minimum state awareness for resilient control systems under
cyber-attack. In Proceedings of the 2012 Future of Instrumentation International Workshop, Gatlinburg, TN,
USA, 8–9 October 2012; pp. 1–4.
Qin, S.J.; Badgwell, T.A. A survey of industrial model predictive control technology. Control Eng. Pract. 2003,
11, 733–764.
Rawlings, J.B. Tutorial overview of model predictive control. IEEE Control Syst. 2000, 20, 38–52.
Durand, H. State Measurement Spooﬁng Prevention through Model Predictive Control Design.
In Proceedings of the IFAC NMPC-2018, Madison, WI, USA, 19–22 August 2018; pp. 643–648.
Heidarinejad, M.; Liu, J.; Christoﬁdes, P.D. Economic model predictive control of nonlinear process systems
using Lyapunov techniques. AIChE J. 2012, 58, 855–870.
Mhaskar, P.; El-Farra, N.H.; Christoﬁdes, P.D. Stabilization of nonlinear systems with state and control
constraints using Lyapunov-based predictive control. Syst. Control Lett. 2006, 55, 650–659.
Muñoz de la Peña, D.; Christoﬁdes, P.D. Lyapunov-Based Model Predictive Control of Nonlinear Systems
Subject to Data Losses. IEEE Trans. Autom. Control 2008, 53, 2076–2089.
Zhu, B.; Joseph, A.; Sastry, S. A taxonomy of cyber attacks on SCADA systems. In Proceedings of the 2011
IEEE International Conferences on Internet of Things, and Cyber, Physical and Social Computing, Dalian,
China, 19–22 October 2011; pp. 380–388.
Krotoﬁl, M.; Cárdenas, A.A. Resilience of process control systems to cyber-physical attacks. In Proceedings
of the Nordic Conference on Secure IT Systems, Ilulissat, Greenland, 18–21 October 2013; pp. 166–182.
Gentile, M.; Rogers, W.J.; Mannan, M.S. Development of an inherent safety index based on fuzzy logic.
AIChE J. 2003, 49, 959–968.
Heikkilä, A.M.; Hurme, M.; Järveläinen, M. Safety considerations in process synthesis. Comput. Chem. Eng.
1996, 20, S115–S120.
Khan, F.I.; Amyotte, P.R. How to Make Inherent Safety Practice a Reality. Can. J. Chem. Eng. 2003, 81, 2–16.
Gupta, J.P.; Edwards, D.W. Inherently Safer Design—Present and Future. Process Saf. Environ. Prot. 2002,
80, 115–125.
Kletz, T.A. Inherently safer plants. Plant/Oper. Prog. 1985, 4, 164–167.
Li, L.; Hu, B.; Lemmon, M. Resilient event triggered systems with limited communication. In Proceedings of
the 2012 51st IEEE Conference on Decision and Control, Maui, HI, USA, 10–13 December 2012; pp. 6577–6582.

194

Mathematics 2018, 6, 169

71.

72.
73.

74.

75.

76.
77.
78.
79.
80.
81.
82.
83.
84.

85.
86.
87.

88.
89.
90.
91.
92.
93.

Melin, A.M.; Ferragut, E.M.; Laska, J.A.; Fugate, D.L.; Kisner, R. A mathematical framework for the analysis
of cyber-resilient control systems. In Proceedings of the 2013 6th International Symposium on Resilient
Control Systems, San Francisco, CA, USA, 13–15 August 2013; pp. 13–18.
Chandy, S.E.; Rasekh, A.; Barker, Z.A.; Shaﬁee, M.E. Cyberattack Detection using Deep Generative Models
with Variational Inference. arXiv 2018, arXiv:1805.12511.
Rosich, A.; Voos, H.; Li, Y.; Darouach, M. A model predictive approach for cyber-attack detection and
mitigation in control systems. In Proceedings of the IEEE Conference on Decision and Control, Florence,
Italy, 10–13 December 2013; pp. 6621–6626.
Tajer, A.; Kar, S.; Poor, H.V.; Cui, S. Distributed joint cyber attack detection and state recovery in smart grids.
In Proceedings of the IEEE International Conference on Smart Grid Communications, Brussels, Belgium,
17–20 October 2011; pp. 202–207.
Kiss, I.; Genge, B.; Haller, P. A clustering-based approach to detect cyber attacks in process control systems.
In Proceedings of the IEEE 13th International Conference on Industrial Informatics, Cambridge, UK, 22–24
July 2015; pp. 142–148.
Valdes, A.; Cheung, S. Intrusion Monitoring in Process Control Systems. In Proceedings of the 42nd Hawaii
International Conference on System Sciences, Big Island, HI, USA, 5–8 January 2009; pp. 1–7.
Wu, Z.; Albalawi, F.; Zhang, J.; Zhang, Z.; Durand, H.; Christoﬁdes, P.D. Detecting and Handling
Cyber-attacks in Model Predictive Control of Chemical Processes. Mathematics 2018, accepted.
Ricker, N.L. Model predictive control of a continuous, nonlinear, two-phase reactor. J. Process Control 1993,
3, 109–123.
Alanqar, A.; Ellis, M.; Christoﬁdes, P.D. Economic model predictive control of nonlinear process systems
using empirical models. AIChE J. 2015, 61, 816–830.
Lin, Y.; Sontag, E.D. A universal formula for stabilization with bounded controls. Syst. Control Lett. 1991,
16, 393–397.
Grossmann, I.E. Review of nonlinear mixed-integer and disjunctive programming techniques. Optim. Eng.
2002, 3, 227–252.
Mhaskar, P.; Liu, J.; Christoﬁdes, P.D. Fault-Tolerant Process Control: Methods and Applications; Springer:
London, UK, 2013.
Wächter, A.; Biegler, L.T. On the implementation of an interior-point ﬁlter line-search algorithm for large-scale
nonlinear programming. Math. Program. 2006, 106, 25–57.
Mo, Y.; Sinopoli, B. Secure control against replay attacks. In Proceedings of the 2009 47th Annual Allerton
Conference on Communication, Control, and Computing, Monticello, IL, USA, 30 September–2 October
2009; pp. 911–918.
Ellis, M.; Durand, H.; Christoﬁdes, P.D. A tutorial review of economic model predictive control methods.
J. Process Control 2014, 24, 1156–1178.
Rawlings, J.B.; Angeli, D.; Bates, C.N. Fundamentals of economic model predictive control. In Proceedings
of the Conference on Decision and Control, Maui, HI, USA, 10–13 December 2012; pp. 3851–3861.
Faulwasser, T.; Korda, M.; Jones, C.N.; Bonvin, D. Turnpike and dissipativity properties in dynamic real-time
optimization and economic MPC. In Proceedings of the IEEE 53rd Annual Conference on Decision and
Control, Los Angeles, CA, USA, 15–17 December 2014; pp. 2734–2739.
Müller, M.A.; Grüne, L.; Allgöwer, F. On the role of dissipativity in economic model predictive control.
IFAC-PapersOnLine 2015, 48, 110–116.
Huang, R.; Harinath, E.; Biegler, L.T. Lyapunov stability of economically oriented NMPC for cyclic processes.
J. Process Control 2011, 21, 501–509.
Omell, B.P.; Chmielewski, D.J. IGCC power plant dispatch using inﬁnite-horizon economic model predictive
control. Ind. Eng. Chem. Res. 2013, 52, 3151–3164.
Amini-Rankouhi, A.; Huang, Y. Prediction of maximum recoverable mechanical energy via work integration:
A thermodynamic modeling and analysis approach. AIChE J. 2017, 63, 4814–4826.
Tula, A.K.; Babi, D.K.; Bottlaender, J.; Eden, M.R.; Gani, R. A computer-aided software-tool for sustainable
process synthesis-intensiﬁcation. Comput. Chem. Eng. 2017, 105, 74–95.
Limon, D.; Alamo, T.; Salas, F.; Camacho, E. Input to state stability of min–max MPC controllers for nonlinear
systems with bounded uncertainties. Automatica 2006, 42, 797–803.

195

Mathematics 2018, 6, 169

94.
95.
96.
97.

Campo, P.J.; Morari, M. Robust Model Predictive Control. In Proceedings of the American Control
Conference, Minneapolis, MN, USA, 10–12 June 1987; pp. 1021–1026.
Pannocchia, G.; Gabiccini, M.; Artoni, A. Offset-free MPC explained: Novelties, subtleties, and applications.
IFAC-PapersOnLine 2015, 48, 342–351.
Ellis, M.; Zhang, J.; Liu, J.; Christoﬁdes, P.D. Robust moving horizon estimation based output feedback
economic model predictive control. Syst. Control Lett. 2014, 68, 101–109.
Das, B.; Mhaskar, P. Lyapunov-based offset-free model predictive control of nonlinear process systems.
Can. J. Chem. Eng. 2015, 93, 471–478.
c 2018 by the author. Licensee MDPI, Basel, Switzerland. This article is an open access

article distributed under the terms and conditions of the Creative Commons Attribution
(CC BY) license (http://creativecommons.org/licenses/by/4.0/).

196

Article

Recurrent Neural Network-Based Model
Predictive Control for Continuous
Pharmaceutical Manufacturing
Wee Chin Wong, Ewan Chee, Jiali Li and Xiaonan Wang *
Department of Chemical & Biomolecular Engineering, Faculty of Engineering, National University of Singapore,
4 Engineering Drive 4, Singapore 117585, Singapore; weechin.wong@gmail.com (W.C.W.);
ewan-jun-xian.chee@student.ecp.fr (E.C.); e0276496@u.nus.edu (J.L.)
* Correspondence: chewxia@nus.edu.sg; Tel.: +65-6601-6221
Received: 5 August 2018; Accepted: 26 October 2018; Published: 7 November 2018

Abstract: The pharmaceutical industry has witnessed exponential growth in transforming operations
towards continuous manufacturing to increase proﬁtability, reduce waste and extend product
ranges. Model predictive control (MPC) can be applied to enable this vision by providing superior
regulation of critical quality attributes (CQAs). For MPC, obtaining a workable system model is of
fundamental importance, especially if complex process dynamics and reaction kinetics are present.
Whilst physics-based models are desirable, obtaining models that are effective and ﬁt-for-purpose
may not always be practical, and industries have often relied on data-driven approaches for system
identiﬁcation instead. In this work, we demonstrate the applicability of recurrent neural networks
(RNNs) in MPC applications in continuous pharmaceutical manufacturing. RNNs were shown to be
especially well-suited for modelling dynamical systems due to their mathematical structure, and their
use in system identiﬁcation has enabled satisfactory closed-loop performance for MPC of a complex
reaction in a single continuous-stirred tank reactor (CSTR) for pharmaceutical manufacturing.
Keywords: pharmaceuticals; critical quality attributes (CQAs); recurrent neural networks; model
predictive control (MPC); system identiﬁcation

1. Introduction
The pharmaceutical industry has shown a growing interest in adopting the concept of continuous
manufacturing [1,2] to reduce waste, cost, environmental footprints and lead-times. Coupled with
developments in continuous manufacturing technologies and quality by design (QbD) paradigms,
there has thus recently been an increasing demand for more advanced system identiﬁcation and
process control strategies for continuous pharmaceutical manufacturing [1].
Continuous manufacturing has the potential of extending the palette of permissible reaction
conditions and enabling reaction outcomes that are quite challenging when performed under batch
conditions [3–5], and its application to the production of complex Active Pharmaceutical Ingredients
(APIs) is an emerging research domain. However, the reactions involved are generally both reversible
and coupled with many side reactions, which leads to highly non-linear systems that impose difﬁculties
for system identiﬁcation. The need to operate in tight and extreme conditions also necessitates stricter
control requirements [6–8]. The complexity of the system, as well as its potential impact on reaction
yields, downstream processing requirements and critical quality attributes (CQAs) of ﬁnal products,
render model identiﬁcation and control of continuous API reactions particularly challenging.
Advanced model-based control technologies promise to improve control of CQAs and are seen
as vital to enabling continuous pharmaceutical manufacturing, and their performance hinges on the
quality of the model obtained from system identiﬁcation. Many rigorous physics-based models have
Mathematics 2018, 6, 242; doi:10.3390/math6110242

197

www.mdpi.com/journal/mathematics

Mathematics 2018, 6, 242

been proposed to describe different API reactions [6,9,10] and they have clear physical interpretations.
However, these models can suffer from complicated structures and may incur excessive computational
costs during online control. The need for models that evaluate quickly for online control purposes is not
unique to the pharmaceutical industry, and extensive work has also been done for thin-ﬁlm deposition
in the microelectronics industry [11,12]. Moreover, it may be extremely difﬁcult and expensive to
derive accurate models of non-linear systems from ﬁrst principles in the ﬁrst place [13]. In contrast,
experimental data-driven heuristic models aim to describe underlying processes with relatively
simpler mathematical expressions and are thus generally easier to obtain [14]. Neural networks belong
to this class of data-driven models, and they have been extensively applied in the chemical and
biochemical processing industries, particularly in modelling complex non-linear processes whose
process understanding is limited to begin with [15–18]. The goal of system identiﬁcation is to create
models that capture the relationships between the process state variables and control variables,
and data-based empirical models for system identiﬁcation have been widely studied in previous
work [19,20]. Artiﬁcial Neural Networks (ANNs) are interesting candidate models for these purposes
due to their ability to approximate any continuous function, subject to assumptions on the activation
function. RNNs constitute a sub-class of ANNs, and they are structured to use hidden variables as a
memory for capturing temporal dependencies between system and control variables. These networks
have been extensively used in sequence learning problems like scene labeling [21] and language
processing [22], demonstrating good performance. Ref. [23] provides an overview of the neural
network applications, particularly from a process systems engineering perspective. In this work, the
use of RNNs for system identiﬁcation of a complex reaction in a single CSTR for pharmaceutical API
production will be demonstrated.
The design of effective model-based control algorithms for continuous manufacturing is also a
key research focus in academia and industry [24], and the model predictive control (MPC) method is
a prominent example that has been widely employed in industrial applications [25–27]. It has also
been applied in the control of CQAs in continuous pharmaceutical manufacturing [10,24], and an
example can be found in [10] where the authors presented two plant-wide end-to-end MPC designs
for a continuous pharmaceutical manufacturing pilot plant. This plant covered operations from
chemical synthesis to tablet formation, and the MPC designs were obtained using the quadratic
dynamic matrix control (QDMC) algorithm. The results showed that, by monitoring the CQAs in real
time, critical process parameters (CPPs) could be actively manipulated by feedback control to enable
process operation that is more robust and ﬂexible. The advantages that MPC has over conventional
proportional-integral-derivative (PID) control are highlighted in [24], which compared their control
performance for a feeding blending unit (FBU) used in continuous pharmaceutical manufacturing.
Previous studies have explored the potential of using RNNs with MPC. For example, ref. [28]
investigated the use of RNNs in controlling non-linear dynamical systems. RNNs have also been used
for predictive control of reactions in CSTRs [29]. However, this CSTR study was limited to relatively
simple kinetics like single-step irreversible reactions, i.e., A → B. This paper illustrates therefore how
RNNs can be used with MPC of reactions with more complex kinetics.
The paper is organized as follows. Section 2 describes the plant model, which is the subject
of system identiﬁcation, and the control scenarios that will be used to assess closed-loop control
performance. Section 3.1 articulates the RNN-based system identiﬁcation methodology and Section 3.2
describes the MPC problem formulation. Results and discussions are shown in Section 4.
2. Plant Model and Control Scenarios
The following sub-sections describe (i) the true plant model for which system identiﬁcation will be
performed and (ii) the two control scenarios that will be used to assess closed-loop control performance.

198

Mathematics 2018, 6, 242

2.1. Plant Model
The reaction system comprising of a single CSTR, as was also analysed in [30,31], will be the
object of this study. For this work, the focus is on system identiﬁcation using RNNs with a view
towards closed-loop control with MPC, thereby marking a difference from how this reaction system
was studied in previous literature. The reaction is described by Equation (1), where A is the feed
species, R is the reaction intermediate and the desired product, and S is the undesired by-product:
k1

k2

k4

k3

ARS

(1)

The equations used to represent the dynamical behavior of this system are based on normalized
dimensionless quantities and are as shown in Equations (2)–(4) below:
dC A
dt
dCR
dt
kj

= q[C A0 − C A ] − k1 C A + k4 CR

(2)

= q[1 − C A0 − CR ] + k1 C A + k3 [1 − C A − CR ] − [k2 + k4 ]CR
,*
++*
E
1
= k0,j exp
−
− 1 , j ∈ {1, 2, 3, 4}
RT0 j T

(3)
(4)

where, Ci∈{ A,R,S} ∈ R+ refers to the species concentration in the reactor, C A0 ∈ R+ the feed
concentration of A, q ∈ R+ the feed ﬂow rate, and k j∈{1,2,3,4} ∈ R+ the rate constants for the respective
reaction. For each rate constant, k0,j∈{1,2,3,4} ∈ R+ is its associated Arrhenius pre-exponential constant,
E
and [ RT
]
∈ R its associated normalised activation energy.
0 j ∈{1,2,3,4}
The reactions are ﬁrst-order and reversible. The reactor is operated isothermally and perfect
mixing is assumed. All reactor concentrations are measured in this example. The manipulated variables
are q and T, and their values are also measured. It is also assumed that the only species entering
the CSTR are A and R, such that their feed concentrations sum up to unity. As such, CS is easily
E
calculable as a function of time. The values of k0,j∈{1,2,3,4} and [ RT
]
can be found in [31] and
0 j ∈{1,2,3,4}
are reproduced in the Appendix A for ease of reference.
Figure 1 shows that, at steady-state conditions for a given q, CR reaches a maximum at a certain
temperature, beyond which the reaction gets driven back to the left of Equation (1) to eventually yield
only A and no R. This system possesses rich and relevant dynamics for continuous pharmaceutical
manufacturing and is therefore worth detailed investigation.
The control problem for this system is challenging due to the existence of input
multiplicities [30,32], which occur when a set of outputs can be reached by more than one set of
inputs. This implies the existence of sign changes in the determinant of the steady-state gain matrix
within the operating region. Linear controllers with integral action therefore become unstable for
this problem.
In what follows, as is common in digital control, the discrete-time domain with time-steps denoted
by k ∈ Z+ will be used. The state vector, x, and manipulated vector (MV), u, are also deﬁned as follows:
x  [C A , CR ] , u  [q, T ] . The underlying plant model can therefore be described by a non-linear
discrete-time difference equation, as Equations (5) and (6) show:
x k +1
yk

= Φ( xk , uk )

(5)

=

(6)

xk

where k ∈ Z+ is the discrete-time index, and xk and uk the state vector and manipulated vector at
time-step k respectively. Φ(.) is the state-transition equation consistent with Equations (2)–(4), and full
state feedback is assumed, such that the measured output yk equals xk for all time-steps.

199

Mathematics 2018, 6, 242

The system identiﬁcation problem consists of ﬁnding an approximation of Equations (2)–(4),
and forms the subject of Section 3.1 in this paper. It will be supposed that the p−step ahead prediction
problem is of vital interest for MPC. Throughout this paper, all problems are considered from time-step
zero, and a sampling time Δt, of 0.1 time units is used.

Figure 1. Steady-state conditions as a function of T with q = 0.8.

2.2. Closed-Loop Control Scenarios
The approach taken to construct the RNN for MPC is to train the RNN with data from the
training set, then evaluate the model performance using previously unseen data from the test
set. However, since the main focus of this study is process control, the ﬁnal evaluation will be
performed by comparing the closed-loop performance of the RNN-based MPC (RNN-MPC) against a
benchmark non-linear MPC (NMPC) controller that directly uses the true plant model, as described in
Equations (2)–(4), as its internal model.
Two control scenarios were selected for performance evaluation and the operating conditions
for each scenario are reﬂected in the ﬁrst two rows of Table 1. These scenarios are namely cases I
and II, and they correspond respectively to a reactor system start-up case and an upset-recovery case.
In case I, the system is assumed to initially be at a low temperature state with a relatively low product
concentration. In case II, the initial conditions correspond instead to a high-temperature and low-yield
state. Figure 2 shows the locations of the initial conditions for these control scenarios with respect to
the set-point, with case I represented by the purple point to the left of the peak in the green CR plot,
and case II represented by the cyan point to the right of the same peak.
Table 1. Initial conditions and set-points for control scenarios.
CA

CR

q

T

0.692
0.822
0.324

0.287
0.152
0.406

0.800
0.800
0.800

0.800
1.100
1.043

Control Scenario
I: Start-up
II: Upset-recovery
Set-point (maximum CR /C A )

200

Mathematics 2018, 6, 242

Figure 2. Initial conditions for cases I (start-up) and II (upset-recovery) relative to the set-point.

The set-point is judiciously located where the ratio of the product concentration to the feed
concentration, CR /C A , is maximised. This set-point corresponds to a product concentration that is
slightly lower than what is maximally achievable. The rationale for choosing this set-point over the
point for maximum CR is that it maximizes yield whilst minimising downstream separations cost.
The operating conditions corresponding to the target set-point are shown in the last row of Table 1.
3. Methodology
3.1. Non-Linear Time-Series System Identiﬁcation via Recurrent Neural Networks
ANNs serve as a potential source of models that capture the dynamics of highly non-linear
systems sufﬁciently well while being relatively easy to obtain and evaluate online, and RNNs are a
sub-class of ANNs that are structured to better capture temporal dependencies in the system. RNNs
are particularly useful for making p-step ahead predictions of state variables for predictive control,
because the prediction for time-step p depends on the present state and all control actions in time-step
k ∈ {0, ..., p − 1}. The prediction for time-step p − 1 used in the above prediction for time-step p
depends similarly on the present state and all control actions in time-step k ∈ {0, ..., p − 2}, and so on.
Figure 3 illustrates the structure of an RNN layer in its compact and unfolded forms. The unfolded
form reveals the repeating cells forming each layer, and each cell is taken in this study to represent a
time-step, such that the state of the cell representing time-step k ∈ {0, ..., p − 1} serves as the input for
a cell representing time-step k + 1. Each cell contains N number of hidden nodes that encode the state
representation, where N is user-speciﬁable. The equations that mathematically characterise a single
RNN cell in a single-layer RNN are as shown in Equations (7) and (8) below:
hk

= Wh,h hk−1 + Wu,h uk−1 + b1

(7)

ŷk

= Φ(hk + b2 )

(8)

where k ∈ {1, ..., p} is the discrete-time index with p the prediction horizon, hk ∈ R N the (hidden) state
of the cell representing time-step k, uk−1 ∈ R2 the cell input, ŷk ∈ R2 the cell output which corresponds
to the state vector prediction for time-step k, (b1 , b2 ) ∈ (R N )2 the offset vectors, Wu,h ∈ R N ×2 and
Wh,h ∈ R N × N the input-to-hidden-state weight matrix and the hidden-state-to-hidden-state weight
201

Mathematics 2018, 6, 242

matrix respectively, and Φ : R N → R2 an activation function that is applied element-wise. h0 is
initialised in this study by using y0 .

Figure 3. Illustration of a recurrent neural network (RNN) layer in compact form (left) and unfolded
form (right).

Equations (7) and (8) are generalisable to deep RNNs containing more than one layer. For an
l-layer RNN, the activation functions for layers j ∈ {2, ..., l } take the form Φ : R N → R N , and the
input-to-hidden-state weight matrices have dimensions N × N instead. Deep RNNs may be preferred
to single-layer RNNs for their enhanced ability to learn features of the dynamical system that occur
"hierarchically", but this comes at the expense of longer RNN training times stemming from more
parameters to train.
The regressors required to predict ŷk∈{1,...,p} are henceforth represented by φk := {y0 , u0 , . . . , uk−1 },
and they are introduced into the RNN in a fashion illustrated in Figure 4. Equation (9) below serves as
a shorthand to describe the RNN:
ŷk

=

fˆRNN (φk ), k ∈ {1, ..., p}

(9)

An RNN is characterised by the values of Wh,h , Wu,h , b1 and b2 for all layers, and these values
constitute the set of parameters. These parameters are learnt from training data by minimising the
predictive error of the model on the training set as determined through a user-speciﬁed loss function.
The learning process is performed through the back-propagation through time (BPTT) algorithm that
estimates the gradient of the loss function as a function of the weights, and an optimisation algorithm
that uses the calculated gradient to adjust the existing weights. The adaptive moment estimation
algorithm (Adam) [33] is an example of an optimisation algorithm that is widely used.
The RNN parameters may be difﬁcult to train in some cases due to problems with vanishing and
exploding gradients, and RNN cells with different structures can be used to circumvent this issue.
Long Short-Term Memory cells (LSTMs) were developed to address these problems, and they are used
as the repeating cell in this study. Further details on LSTM cells may be found in the Appendix B.
To generate the data set for training the RNNs in this study, a numerical model of the CSTR
system based on Equations (2)–(4) is needed, because this data consists precisely of this system’s
response to MV perturbations. This numerical model was implemented in Python version 3.6.5, and its
temporal evolution between sampling points was simulated using the explicit Runge-Kutta method of
order 5(4) through the scipy.integrate.solve_ivp function.
202

Mathematics 2018, 6, 242

MV perturbations are then introduced into the system to obtain its dynamic response.
This procedure mimics the manual perturbation of the system through experiments, which become
necessary in more complicated reaction systems whose reaction kinetics and overall dynamics resist
expression in neat analytical forms. These perturbations take the form of pre-deﬁned sequences of
control actions, {uexp,k }k∈{0,...,Te −1} , where the "exp" subscript refers to "experiment" and Te represents
the ﬁnal time-step for the experiment. These control actions are separated by Δt.
To simulate the system’s dynamic response to the experimental sequence, the control actions
associated to the element in this sequence, uexp,k = [qexp,k , Texp,k ] , k ∈ {0, . . . , Te − 1}, are applied at
time-step k for a period of Δt, during which the system’s evolution with this MV is simulated using
the Runge-Kutta method of order 5(4). Once Δt elapses, uexp,k+1 is applied with the system evolution
proceeding in the same manner. This procedure repeats until the ﬁnal time-step, Te , is completed.
A history of the system’s experimental dynamic response is associated to each experimental
sequence, which takes the form of {yexp,k }k∈{1,...,Te } . yexp,k is the measured system output at time-step
k after uexp,k−1 has been applied to the system for a period of Δt. This history corresponds to the labels
in machine learning terminology, and the data set is thereafter constructed from both the experimental
sequences and their associated labels. For the p-step ahead prediction problem, each data point thus
takes the form {yk , uk , uk+1 , . . . , uk+ p−1 } with the associated label {yk+1 , . . . , yk+ p }, k ∈ {0, . . . , Te − p}.
Te − p data points can thus be extracted from each experimental sequence. Multiple experimental
sequences can be constructed by perturbing the MVs in different ways, and such a sequence is shown
in Figure 5 with its associated system dynamical response, with this sequence showing variations of
q in the range [0.70, 1.05] for ﬁxed values of T. For this study, these sequences were generated in a
fashion similar to Figure 5, by introducing linear changes of different frequencies to one component of
the MV spanning its experimental range while keeping the other MV component constant.
Before training the RNNs, it is necessary to split the data set into the training set and the test
set. The training set contains the data with which the RNN trains its weight matrices, and the test
set will be used to determine the models with the best hyperparameters. The two hyperparameters
considered in this study are the number of hidden nodes, which also correspond to the dimensionality
of the hidden states, and the number of hidden layers.
The experimental simulations and the extraction of training data were performed using Python
version 3.6.5 for this study. Keras version 2.1.5, an open-source neural network library written in
Python, was used for RNN training with TensorFlow version 1.7.0 as its backend.

Figure 4. RNN structure for the p-step ahead prediction problem.

203

Mathematics 2018, 6, 242

Figure 5. Example of an experimental sequence and the dynamic response with Δt = 0.1 time units.

3.2. Control Problem Formulation
MPC is a control strategy that selects a set of m future control moves, {u0 , ...um−1 }, that minimises
a cost function over a prediction of p steps by incorporating predictions of the dynamical system
for these p steps, {ŷ1 , ..., ŷ p }. The cost function is typically chosen to punish large control actions,
which implies greater actuator power consumption, and differences between the state vector and the
set-point at each time-step. Input and output constraints can also be factored into the MPC formulation.
Since MPC performance depends on the quality of the predictions of the system, obtaining a reasonably
accurate model through system identiﬁcation is crucial.
The MPC problem can be formulated as shown in Equations (10)–(13) below:
,
min

{Δu0 ,Δu1 ,...,Δum−1 }

p

m −1

k =1

k =0

∑ (ŷk − y∗k ) Qy (ŷk − y∗k ) + ∑

Δuk Qu Δuk

s.t.

(10)

ŷk = fˆRNN (φk ), k ∈ {1, . . . , p}

(11)

uk ∈ [umin,k , umax,k ], k ∈ {0, . . . , m − 1}

(12)

Δuk ∈ [Δumin,k , Δumax,k ], k ∈ {0, . . . , m − 1}

(13)

where p ∈ Z+ is the prediction horizon, m ∈ {1, . . . , p} the control horizon, ŷk ∈ R2 the prediction of
the state vector for the discrete-time step k obtained from the RNN, fˆRNN described in Equation (9),
y∗k ∈ R2 the set-point at time-step k, uk ∈ R2 the MV for time-step k, Δuk  uk − uk−1 the discrete-time
rate of change of the MV which corresponds to the control action size at time-step k, ( Qy , Qu ) ∈ (R2×2 )2
symmetric positive semi-deﬁnite weight matrices, and (umin,k , umax,k , Δumin,k , Δumax,k ) ∈ (R2 )4 the
lower and upper bounds for the control action and the rate of change of the control action at time-step k.
In the above formulation, it is assumed that there are no changes in actuator position beyond time-step
m − 1, i.e., Δum−1 = Δum+k = 0, k ∈ {0, . . . , p − m − 1}.
This optimization problem is not convex in general and thus does not possess special structures
amenable to global optimality. This is therefore a Non-Linear Programming (NLP) problem, and
modern off-the-shelf solvers can be used to solve it. This problem is solved at every time-step to yield
204

Mathematics 2018, 6, 242

the optimal control sequence for that time-step, {Δu0∗ , . . . , Δu∗m−1 }. The ﬁrst element, Δu0∗ , is then
applied to the system until the next sampling instant, where the problem is solved again to yield
another optimal control sequence. This procedure is then repeated in a moving horizon fashion.
The MPC controller in this study was implemented in Python version 3.6.5 through the
scipy.optimize.minimize function, and the sequential least squares quadratic programming (SLSQP)
algorithm was selected as the option for this solver.
4. Results and Discussion
The RNN-MPC workﬂow consists of (i) gathering experimental sequence data with perturbations
of the MV to generate the data set; (ii) learning the RNNs from the training set and validating their
performance with test data, and selecting the RNNs with the best test performance; and (iii) integrating
the chosen RNN with the MPC and ﬁnally evaluating its control performance.
4.1. System Identiﬁcation
RNNs with 250, 500 and 1000 hidden nodes were trained for this study, and the number of RNN
layers for these models was also varied from 1 to 3. The validation performance of these models on the
test set was quantiﬁed through the root-mean-square error (RMSE) metric, which is deﬁned as shown
in Equation (14) below:

RMSE

=

.
/
/
1
0
Ntest

Ntest p

∑∑

'

(ŷ j )i − (yexp,j )i

(2 
(14)

i =1 j =1

where Ntest ∈ Z+ is the number of data points in the test set, p ∈ Z+ the prediction horizon,
(ŷ j )i ∈ R2 the j-ahead output prediction for data point i, and (yexp,j )i ∈ R2 the corresponding
experimentally-determined output which also represents the ground truth that predictions are tested
against. The smaller the RMSE of the model on the test data, the better its general predictive power.
Table 2 tabulates the validation performance of the RNNs on the test data, and it can be observed
that prediction performance improves with an increasing number of hidden nodes. This is because
hidden states of greater dimensionalities offer greater latitude for capturing more features of the
underlying system, contributing to its temporal dynamics. An improvement of the validation
performance can also be observed with an increase of the number of hidden layers from 1 to 2.
This observation is attributable to the potential of deep hierarchical models to better represent some
functions than shallower models [34].
Table 2. Root-mean-square error (RMSE) over test data of RNNs trained over 1000 epochs.
No. Layers / No. Nodes

250

500

1000

1
2
3

0.0299
0.0238
0.0262

0.0268
0.0118
0.0119

0.0206
0.0083
0.0125

However, performance deteriorated when the number of layers was increased from 2 to 3, and this
may be due to the additional layers introducing more model parameters that needed to be tuned, such
that the training data set became too small to tune all of them correctly.

205

Mathematics 2018, 6, 242

Table 2 reveals that RNNs with two hidden layers and 1000 hidden nodes for each RNN cell gave
the best validation performance over the test set, with this representing the optimised hyperparameter
conﬁguration. An RNN with two hidden layers and 2000 hidden nodes was also trained and it was
observed that performance deteriorated when even more hidden nodes were used. This result is
tabulated in Table 3, and possible explanations may be that the 2000-node network overﬁtted the
training data, or that the use of 2000-node cells introduced more parameters to the model, rendering
the existing training data set too small to tune the additional parameters correctly. RNN with two
hidden layers will be used for subsequent closed-loop control studies.
Table 3. RMSE over test data of RNNs with hidden layers and either 1000 or 2000 nodes trained over
1000 epochs.
No. Layers

No. Nodes

RMSE

2
2

1000
2000

0.0083
0.0177

It is also worth noting that validation performance is also a function of the quality of the training
set. This performance can be further improved by using a larger training set reﬂecting the system
dynamics within the control range, particularly for any control scenarios earmarked as important.
The prediction performances of this optimised RNN on the training and test sets are respectively
shown in Figure 6 below for completeness.

206

Mathematics 2018, 6, 242

(a)

(b)

Figure 6. System identiﬁcation performance of the optimised RNN. (a) Training performance of the
optimised RNN. (b) Validation performance of the optimised RNN on test data.

Figure 6a reveals a good ﬁt of the RNN to the training data, and testiﬁes to the model’s ability to
reﬂect highly dynamic outputs from highly dynamic training data. Figure 6b shows that the model
succeeded in capturing the general trends for previously unseen test data. Even though this ﬁt was not
perfect, particularly for CR between 3 and 4 time units, it will be demonstrated in a later section that
satisfactory closed-loop performance can still be achieved with predictions from this RNN.
4.2. RNN-MPC Closed-Loop Control Performance
As described in Section 2.2, the objective in both control scenarios is to bring the system quickly
and smoothly to a target set-point where the ratio of CR to C A is maximised, because this maximises

207

Mathematics 2018, 6, 242

yield while minimising downstream separations cost. Since MPC strategies based on single linear
models do not perform well for this example [32], non-linear MPC solutions will be required.
The MPC formulation was shown in Equations (10)–(13), and the prediction and control horizons
for the MPC controller implemented for this study were set to 10 for both control scenarios, i.e.,
p = m = 10. Since the sampling rate, Δt, was set as 0.1 time units, p and m correspond to 1.0 time
unit. The total simulation time, Nsim , was set to 40, corresponding to 4.0 time units. The weight
matrices for the controller, Qy and Qu , were deﬁned as diag[2.4, 5.67] and diag[25, 25] respectively. The
coefﬁcients selected for Qy reﬂect that controlling CR is more important than controlling C A , and Qu
contain coefﬁcients that are even larger to avoid control actions that are over-aggressive, since these
control actions cause system instability. For the constraints, [umin,k , umax,k ] = [[0.75, 0.5] , [0.85, 1.1] ],
∀k ∈ {0, Nsim−1 } and [Δumin,k , Δumax,k ] = [[−0.1, −0.1] , [0.1, 0.1] ], ∀k ∈ {0, Nsim−1 }.
In what follows, the closed-loop control performance of the RNN-MPC controller will be
benchmarked against the NMPC controller whose internal model is the actual full plant model
as described in Equations (2)–(4). This NMPC controller was implemented using the same software as
that of the RNN-MPC controller, whose implementation was described in Section 3.2.
The indices used to evaluate control performance are deﬁned as shown in Equations (15)
and (16) below:
Nsim

J=

∑

'

(yk − y∗k ) Qy (yk − y∗k ) + Δuk Qu Δuk

k =1

'

I=
where yk∈{1,...,Nsim } ∈ R2 and y∗k∈{1,...,N

sim }

1−

JRNN − JNMPC
JNMPC

(
(15)

(

× 100%

(16)

∈ R2 are the measured output and the set-point at time-step

k respectively, Δuk ∈
the size of the control action at time-step k, and ( Qy , Qu ) ∈ (R2×2 )2 the
symmetric positive semi-deﬁnite weight matrices.
Figures 7–10 below show the performance of the RNN-MPC and NMPC controllers on both control
scenarios for 250, 500, 1000 and 2000 hidden nodes respectively. Table 4 tabulates the performance
index averaged over both control scenarios for each RNN-MPC controller for the same set of values
for the number of hidden nodes.

R2

Table 4. Performance of closed-loop RNN-MPC as a function of RNN nodes (two layers).

No. Nodes

Average Performance Index, Iavg

Comments

250
500
1000
2000

93.7
95.8
100.0
98.6

Steady-state Offset
Steady-state Offset
Desired Performance
Steady-state Offset

The results show that the RNN-MPC controllers exhibited stability even with only 250 hidden
nodes for both control scenarios, suggesting a robustness associated with the RNN-MPC combination.
For the RNN-MPC controller with 250 hidden nodes, while the NMPC controller exhibited no
steady-state offset, this RNN-MPC controller showed signiﬁcant steady-state offsets for both control
scenarios. However, the initial transient response of the system under RNN-MPC control was similar
to its NMPC benchmark for both scenarios, suggesting that the RNN succeeded in capturing the global
dynamics of the system, and that 250 nodes may have not been sufﬁcient for the model to learn the
subtler dynamics that would have allowed the controller to bring the system precisely back to the
set-point. A notable improvement in performance was observed with 500 nodes, although steady-state
offsets remained for both scenarios.

208

Mathematics 2018, 6, 242

The best closed-loop control performance was obtained with 1000 nodes, and this is consistent
with the ﬁnding that this RNN had the best validation performance on the test data. The control
performance of this RNN-MPC was in fact comparable to its NMPC counterpart, with an Iavg of 100.0.
For 2000 nodes, a deterioration of control performance could be seen with the reappearance of the
steady-state offsets for both scenarios, and this may be attributable to the RNN’s poorer validation
performance on the test data.
To assess the temporal performance of the RNN-MPC controller, 1000 model inputs were
generated randomly and the average computational times required by the NMPC and the RNN-MPC
controllers to generate a single prediction for use in the optimiser are tabulated in Table 5. The RNN
for this temporal benchmarking has 1000 hidden nodes and two layers, and the NMPC generates
predictions by using the Runge-Kutta method of order 5(4) to march the system forward in time. The
predictions for both controllers were generated on an Intel(R) Xeon(R) CPU E5-1650 with 16 GB RAM.
Table 5. Time required to generate a single prediction averaged over 1000 predictions.

Time required

NMPC

RNN-MPC

1.55 ms

1.17 ms

The results in Table 5 show that, for the simulation context described in the previous paragraph,
the times required by the internal models of both controllers to generate a single prediction are of
the same order of magnitude, with the RNN even outperforming its NMPC counterpart slightly.
This testiﬁes to the RNNs being a model that can generate predictions for MPC control at least as fast
as the true plant model for this CSTR system.
This CSTR system is a comparatively simple dynamical system, and other systems can have more
complex exact representations whose evaluation for prediction purposes may take a considerably
longer time. Even though these models generate very good predictions, they would be too slow
to evaluate to be useful for online control. Having observed from earlier discussions that stable
control performance can be achieved if the RNN succeeds in capturing the global dynamics, imperfect
predictions may in fact be tolerable if it entails an RNN that is easier to train and faster to evaluate.
RNNs can therefore serve to balance the needs of MPC for good and quick predictions.
To summarise, even if the system identiﬁcation by the RNNs does not perfectly describe the
underlying plant dynamics, stable closed-loop control performance can be achieved as long as the
global dynamics of the system are captured. Further reﬁnements to the RNN can be made by optimising
its hyperparameters, which in this study have been selected to be the number of hidden nodes and
hidden layers, to obtain a conﬁguration that is capable of capturing the subtler dynamics of the system
while avoiding overﬁtting on the training set.

209

Mathematics 2018, 6, 242

(a)

(b)

Figure 7. Control performance of RNN-MPC with 250 hidden nodes and two RNN layers. (a) Control
performance for case I (start-up). (b) Control performance for case II (upset-recovery).

210

Mathematics 2018, 6, 242

(a)

(b)

Figure 8. Control performance of RNN-MPC with 500 hidden nodes and two RNN layers. (a) Control
performance for case I (start-up). (b) Control performance for case II (upset-recovery).

211

Mathematics 2018, 6, 242

(a)

(b)

Figure 9. Control performance of RNN-MPC with 1000 hidden nodes and two RNN layers. (a) Control
performance for case I (start-up). (b) Control performance for case II (upset-recovery).

212

Mathematics 2018, 6, 242

(a)

(b)

Figure 10. Control performance of RNN-MPC with 2000 hidden nodes and two RNN layers. (a) Control
performance for case I (start-up). (b) Control performance for case II (upset-recovery).

5. Conclusions and Future Research
In this study, a multiple-input multiple-output CSTR that houses a reaction exhibiting output
dynamics was studied. The methods for generating the control-oriented RNNs and integrating their
use into MPC controllers were articulated, and the performance of the RNN-MPC controllers was
benchmarked against NMPC controllers that used the true plant model directly as its internal model.
Two control scenarios were simulated, one involving reactor start-up and the other involving
upset-recovery, and the results showed that even if the RNNs do not perfectly describe the underlying
plant dynamics, RNN-MPC controllers can give stable closed-loop control performance for these
213

Mathematics 2018, 6, 242

scenarios as long as the global dynamics of the system are captured. These RNNs can be reﬁned
through hyperparameter optimisation to obtain conﬁgurations that are capable of capturing the subtler
dynamics of the system while avoiding overﬁtting on the training set, further augmenting their
effectiveness as control-oriented models for MPC.
It is ﬁnally noted again that linear controllers with integral action perform poorly for systems
exhibiting input multiplicities, and that rigorous physics-based models like the model used for the
benchmark NMPC controller can be difﬁcult to obtain in practice and may be too expensive to evaluate
to be useful for online MPC control. The approach presented in this study exploits the ability of
RNNs to capture the temporal dynamics of the system, and it was shown that RNN-based system
identiﬁcation methods can give control-oriented models for MPC that offer satisfactory performance
for two important control scenarios. As the creation of these RNNs is a data-driven process which
yields progressively more effective models with larger amounts of process and sensor data, these
models serve indeed as an alternative source of control-oriented models that capture the dynamics of
highly non-linear systems sufﬁciently well while being relatively easy to obtain and evaluate online.
This opens promising avenues for the application of RNNs or other ML models in enabling continuous
pharmaceutical manufacturing practices.
A potential way to bring this study forward is to compare different ML or RNN architectures
for MPC control-oriented system identiﬁcation. Measurement noise can be incorporated to simulate
realistic sampling scenarios and evaluate the robustness to noise of the ML system identiﬁcation and the
ML-MPC control techniques. Cross-validated optimisation of more hyperparameters characterising the
ML model, which can potentially include the regular dropout rates between hidden layers, the learning
rates and gradient clipping values among others, as well as a more detailed study of the effects of
the experimental sequences on the quality of the ML model trained, can also give future practitioners
useful heuristics for creating and tuning MLs for their own purposes.
Future research can also involve extending the methodology to multiple CSTRs, and to reaction
kinetics of increasing complexity and of more immediate relevance to the pharmaceutical industry.
These can be done in view of an eventual real-world implementation of these RNN-MPC or ML-MPC
control strategies, from which further comparisons of these controllers to conventional PID controllers,
and other MPC strategies like linear MPC and offset-free MPC, can also be made.
Author Contributions: Wee Chin Wong and Xiaonan Wang conceived and designed the methodology; Wee
Chin Wong and Ewan Chee performed the simulations; Wee Chin Wong, Ewan Chee, Jiali Li and Xiaonan Wang
analyzed the data and wrote the paper.

Funding: The authors thank the MOE AcRF Grant in Singapore for ﬁnancial support of the
projects on Precision Healthcare Development, Manufacturing and Supply Chain Optimization
(R-279-000-513-133) and Advanced Process Control and Machine Learning Methods for Enhanced
Continuous Manufacturing of Pharmaceutical Products (R-279-000-541-114).
Acknowledgments: We would like to acknowledge S. A. Khan from the Department of Chemical and Biomolecular
Engineering, National University of Singapore for his input on reaction kinetics and multiple fruitful discussions.
We also thank the Pharma Innovation Programme Singapore (PIPS), which provided the source of motivation for
this work.
Conﬂicts of Interest: The authors declare no conﬂict of interest.

214

Mathematics 2018, 6, 242

Abbreviations
The following abbreviations are used in this manuscript:
Adam Adaptive Moment Estimation
ANN
Artiﬁcial Neural Network
API
Active Pharmaceutical Ingredient
BPTT
Back-Propagation Through Time
CPP
Critical Process Parameter
CQA
Critical Quality Attribute
CSTR
Continuous-Stirred Tank Reactor
FBU
Feeding Blending Unit
LSTM Long Short-Term Memory
MPC
Model Predictive Control
MV
Manipulated Vector
NLP
Non-Linear Programming
NMPC
Non-Linear MPC
PID
Proportional-Integral-Derivative (Control)
QbD
Quality by Design
QDMC
Quadratic Dynamic Matrix Control
RMSE
Root-Mean-Square Error
RNN
Recurrent Neural Network
RNN-MPC RNN-based MPC
SLSQP
Sequential Least Squares Quadratic Programming

Appendix A. Kinetic Parameters for Plant Model
For this study, C A0 was assigned a value of 0.8. The vector of Arrhenius pre-exponentials,
E
k0 , was deﬁned as [1.0, 0.7, 0.1, 0.006] , and the vector of normalized activation energies, RT
,
0
as [8.33, 10.0, 50.0, 83.3] .
Appendix B. Long Short-Term Memory Cells
In conventional RNNs, the BPTT algorithm results in the partial derivative of the error function
being multiplied numerous times to the weights corresponding to the various connections, or edges,
of the RNN. Depending on the spectral radius of the recurrent weight matrix, this leads to either the
vanishing or exploding gradients problem, which severely limits the learning quality of the network.
LSTM cells have been proposed to mitigate this issue. These cells use several gating functions,
like the ’forget’, ’input’ and ’output’ gating functions, that serve to modulate the propagation of signals
between cells. This cell structure avoids the gradient vanishing or exploding problem.
The basic LSTM cell structure is mathematically expressed as follows in Equations (A1)–(A6) below:
 
hk = ok ∗ tanh Ck

(A1)

Ck = f k ∗ Ck−1 + ik ∗ C̃k


C̃k = tanh WC [ hk−1 , uk ] + bc


ik = σ Wi .[ hk−1 , uk ] + bi

(A2)

f k = σ (W f . [ h k − 1 , u k ]  + b f )


ok = σ Wo .[ hk−1 , uk ] + bo

(A5)

(A3)
(A4)
(A6)

where k ∈ Z+ is the time index, hk ∈ R N the hidden state variable, and uk ∈ R2 the input variable.
f k ∈ [0, 1], ik ∈ [0, 1] and ok ∈ [0, 1] are the ‘forgetting’, ‘input’ and ‘output’ gates respectively, and are
characterised by their respective weight matrices and bias vectors, with σ : R N → [0, 1] N an activation
function. The input gate controls the degree to which the cell state, represented by Equation (A2)
and distinct from the hidden state variable, is affected by candidate information, and the output gate

215

Mathematics 2018, 6, 242

controls how this cell state affects other cells. The forget gate modulates the self-recurrent connection of
the cell, allowing it thus to partially remember the previous cell state in a fashion similar to traditional
RNNs. ∗ refers to a point-wise multiplication.
References
1.

2.

3.
4.
5.

6.
7.

8.

9.

10.
11.
12.
13.
14.
15.
16.
17.
18.
19.

Lakerveld, R.; Benyahia, B.; Heider, P.L.; Zhang, H.; Wolfe, A.; Testa, C.J.; Ogden, S.; Hersey, D.R.;
Mascia, S.; Evans, J.M.; et al. The application of an automated control strategy for an integrated continuous
pharmaceutical pilot plant. Org. Process Res. Dev. 2015, 19, 1088–1100. [CrossRef]
Schaber, S.D.; Gerogiorgis, D.I.; Ramachandran, R.; Evans, J.M.B.; Barton, P.I.; Trout, B.L. Economic analysis
of integrated continuous and batch pharmaceutical manufacturing: A case study. Ind. Eng. Chem. Res. 2011,
50, 10083–10092. [CrossRef]
Glasnov, T. Continuous-Flow Chemistry in the Research Laboratory: Modern Organic Chemistry in Dedicated
Reactors at the Dawn of the 21st Century; Springer International Publishing: Basel, Switzerland, 2016; p. 119.
Gutmann, B.; Cantillo, D.; Kappe, C.O. Continuous-ﬂow technology—A tool for the safe manufacturing of
active pharmaceutical ingredients. Angew. Chem. Int. Ed. 2015, 54, 6688–6728. [CrossRef] [PubMed]
Poechlauer, P.; Colberg, J.; Fisher, E.; Jansen, M.; Johnson, M.D.; Koenig, S.G.; Lawler, M.; Laporte, T.;
Manley, J.; Martin, B.; et al. Pharmaceutical roundtable study demonstrates the value of continuous
manufacturing in the design of greener processes. Org. Process Res. Dev. 2013, 17, 1472–1478. [CrossRef]
Benyahia, B.; Lakerveld, R.; Barton, P.I. A plant-wide dynamic model of a continuous pharmaceutical
process. Ind. Eng. Chem. Res. 2012, 51, 15393–15412. [CrossRef]
Susanne, F.; Martin, B.; Aubry, M.; Sedelmeier, J.; Lima, F.; Sevinc, S.; Piccioni, L.; Haber, J.; Schenkel, B.;
Venturoni, F. Match-making reactors to chemistry: A continuous manufacturing-enabled sequence to a key
benzoxazole pharmaceutical intermediate. Org. Process Res. Dev. 2017, 21, 1779–1793. [CrossRef]
Mascia, S.; Heider, P.L.; Zhang, H.; Lakerveld, R.; Benyahia, B.; Barton, P.I.; Braatz, R.D.; Cooney, C.L.;
Evans, J.M.B.; Jamison, T.F.; et al. End-to-end continuous manufacturing of pharmaceuticals: Integrated
synthesis, puriﬁcation, and ﬁnal dosage formation. Angew. Chem. Int. Ed. 2013, 52, 12359–12363. [CrossRef]
[PubMed]
Brueggemeier, S.B.; Reiff, E.A.; Lyngberg, O.K.; Hobson, L.A.; Tabora, J.E. Modeling-based approach towards
quality by design for the ibipinabant API step modeling-based approach towards quality by design for the
ibipinabant API step. Org. Process Res. Dev. 2012, 16, 567–576. [CrossRef]
Mesbah, A.; Paulson, J.A.; Lakerveld, R.; Braatz, R.D. Model predictive control of an integrated continuous
pharmaceutical manufacturing pilot plant. Org. Process Res. Dev. 2017, 21, 844–854. [CrossRef]
Rasoulian, S.; Ricardez-Sandoval, L.A. Stochastic nonlinear model predictive control applied to a thin ﬁlm
deposition process under uncertainty. Chem. Eng. Sci. 2016, 140, 90–103. [CrossRef]
Rasoulian, S.; Ricardez-Sandoval, L.A. A robust nonlinear model predictive controller for a multiscale thin
ﬁlm deposition process. Chem. Eng. Sci. 2015, 136, 38–49. [CrossRef]
Hussain, M.A. Review of the applications of neural networks in chemical process control simulation and
online implementation. Artif. Intell. Eng. 1999, 13, 55–68. [CrossRef]
Cheng, L.; Liu, W.; Hou, Z.G.; Yu, J.; Tan, M. Neural-network-based nonlinear model predictive control for
piezoelectric actuators. IEEE Trans. Ind. Electron. 2015, 62, 7717–7727. [CrossRef]
Xiong, Z.; Zhang, J. A batch-to-batch iterative optimal control strategy based on recurrent neural network
models. J. Process Control 2005, 15, 11–21. [CrossRef]
Tian, Y.; Zhang, J.; Morris, J. Modeling and optimal control of a batch polymerization reactor using a hybrid
stacked recurrent neural network model. Ind. Eng. Chem. Res. 2001, 40, 4525–4535. [CrossRef]
Mujtaba, I.; Hussain, M. Applications of Neural Networks and Other Learning Technologies in Process Engineering;
Imperial College Press: London, UK, 2001.
Nagy, Z.K. Model based control of a yeast fermentation bioreactor using optimally designed artiﬁcial neural
networks. Chem. Eng. J. 2007, 127, 95–109. [CrossRef]
Alanqar, A.; Durand, H.; Christoﬁdes, P.D. On identiﬁcation of well-conditioned nonlinear systems:
Application to economic model predictive control of nonlinear processes. AIChE J. 2015, 61, 3353–3373.
[CrossRef]

216

Mathematics 2018, 6, 242

20.
21.

22.
23.
24.
25.
26.
27.
28.
29.
30.
31.
32.
33.
34.

Wang, X.; El-Farra, N.H.; Palazoglu, A. Proactive Reconﬁguration of Heat-Exchanger Supernetworks.
Ind. Eng. Chem. Res. 2015, 54, 9178–9190. [CrossRef]
Byeon, W.; Breuel, T.M.; Raue, F.; Liwicki, M. Scene labeling with LSTM recurrent neural networks.
In Proceedings of the 2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR),
Boston, MA, USA, 7–12 June 2015; pp. 3547–3555.
Cho, K.; van Merrienboer, B.; Gülçehre, Ç.; Bougares, F.; Schwenk, H.; Bengio, Y. Learning phrase
representations using RNN encoder-decoder for statistical machine translation. arXiv 2014, arXiv:1406.1078.
Lee, J.H.; Shin, J.; Realff, M.J. Machine learning: Overview of the recent progresses and implications for the
process systems engineering ﬁeld. Comput. Chem. Eng. 2018, 114, 111–121. [CrossRef]
Rehrl, J.; Kruisz, J.; Sacher, S.; Khinast, J.; Horn, M. Optimized continuous pharmaceutical manufacturing
via model-predictive control. Int. J. Pharm. 2016, 510, 100–115. [CrossRef] [PubMed]
Rawlings, J.B.; Mayne, D.Q. Model Predictive Control: Theory and Design; Nob Hill: Madison, WI, USA, 2009.
Tatjewski, P. Advanced Control of Industrial Processes, Structures and Algorithms; Springer: London, UK, 2007.
Garcia, C.E.; Morshedi, A. Quadratic programming solution of dynamic matrix control (QDMC).
Chem. Eng. Commun. 1986, 46, 73–87. [CrossRef]
Pan, Y.; Wang, J. Model predictive control of unknown nonlinear dynamical systems based on recurrent
neural networks. IEEE Trans. Ind. Electron. 2012, 59, 3089–3101. [CrossRef]
Seyab, R.A. Differential recurrent neural network based predictive control. Comput. Chem. Eng. 2008,
32, 1533–1545. [CrossRef]
Koppel, L.B. Input multiplicities in nonlinear, multivariable control systems. AIChE J. 1982, 28, 935–945.
[CrossRef]
Seki, H.; Ooyama, S.; Ogawa, M.
Nonlinear model predictive control using successive
linearization—Application to chemical reactors. Trans. Soc. Instrum. Control Eng. 2004, E-3, 66–72.
Bequette, B.W. Non-linear model predictive control : A personal retrospective. Can. J. Chem. Eng. 2007,
85, 408–415. [CrossRef]
Kingma, D.P.; Ba, J. Adam: A Method for stochastic optimization. arXiv 2014, arXiv:1412.6980.
Pascanu, R.; Gulcehre, C.; Cho, K.; Bengio, Y. How to construct deep recurrent neural networks. arXiv 2013,
arXiv:1312.6026.
c 2018 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access

article distributed under the terms and conditions of the Creative Commons Attribution
(CC BY) license (http://creativecommons.org/licenses/by/4.0/).

217

MDPI
St. Alban-Anlage 66
4052 Basel
Switzerland
Tel. +41 61 683 77 34
Fax +41 61 302 89 18
www.mdpi.com
Mathematics Editorial Ofﬁce
E-mail: mathematics@mdpi.com
www.mdpi.com/journal/mathematics

MDPI
St. Alban-Anlage 66
4052 Basel
Switzerland
Tel: +41 61 683 77 34
Fax: +41 61 302 89 18
www.mdpi.com

ISBN 978-3-03897-421-5

